      SUBROUTINE FRCSLV(MPTS,LPTS)
C
C 02/19/97 David Clay Patton
C
      INCLUDE 'PARAMS'
      INCLUDE 'commons.inc'
      PARAMETER (NMAX=MPBLOCK)
      LOGICAL ICOUNT,IUPDAT
      COMMON/TMP2/PSIN(MAX_OCC,NMAX),PSIG(3,MAX_OCC,NMAX)
     & ,PSIL(MAX_OCC,NMAX)
      COMMON/MIXPOT/VXC(MAX_PTS*MXSPN),POT(MAX_PTS*MXSPN)
      DIMENSION GSUB(3,MAX_OCC)
      DIMENSION GRAD(3,MAX_CON,10,3) 
      DIMENSION RVECA(3,MX_GRP)
     & ,ISIZE(3),RR(3),JBEG(3),JEND(3)
      DIMENSION PTS(NSPEED,3),GNAD(NSPEED,10,6,MAX_CON,3) 
      DIMENSION ICOUNT(MAX_CON,3) 
      DATA JBEG,JEND/1,2,5,1,4,10/
      DATA ISIZE/1,3,6/
C
      IF (MPTS .GT. NMAX) THEN
       PRINT *,'FRCSLV: NMAX MUST BE AT LEAST: ',MPTS
       CALL STOPIT
      END IF
      ISPFAC=2/NSPN
      LPTS_BEG=LPTS
C
C  CALCULATE WAVEFUNCTIONS, LAPLACIANS
C  STORE WAVEFUNCTIONS IN PSIN AND NEGATIVE LAPLACIAN IN PSIL
C
      DO IPT=1,MPTS
       DO IWF=1,NWF    
        PSIN(IWF,IPT)=0.0D0
        PSIL(IWF,IPT)=0.0D0
       END DO
      END DO
      IID=0
      DO 386 IFNCT=1,NFNCT
       LMAX1=LSYMMAX(IFNCT)+1
       DO 384 I_POS=1,N_POS(IFNCT)
        IID=IID+1
        CALL OBINFO(1,RIDT(1,IID),RVECA,M_NUC,ISHDUM)
        DO 382 J_POS=1,M_NUC
         CALL UNRAVEL(IFNCT,IID,J_POS,RIDT(1,IID),
     &                RVECA,L_NUC,1)
         IF(NWF.GT.MAX_OCC)THEN
          PRINT *,'FRCSLV: MAX_OCC MUST BE AT LEAST:',NWF
          CALL STOPIT
         END IF
         IF(L_NUC.NE.M_NUC)THEN
          PRINT *,'FRCSLV: PROBLEM IN UNRAVEL'
          CALL STOPIT
         END IF
         LPTS=LPTS_BEG
         DO 380 JPTS=1,MPTS,NSPEED
          NPV=MIN(NSPEED,MPTS-JPTS+1)
          DO LPV=1,NPV  
           PTS(LPV,1)=RMSH(1,LPTS+LPV)-RVECA(1,J_POS)
           PTS(LPV,2)=RMSH(2,LPTS+LPV)-RVECA(2,J_POS)
           PTS(LPV,3)=RMSH(3,LPTS+LPV)-RVECA(3,J_POS)
          END DO
          CALL GORBDRV(2,IUPDAT,ICOUNT,NPV,PTS,IFNCT,GNAD)
          IF(IUPDAT)THEN
           IPTS=JPTS-1 
           ILOC=0
           DO 378 LI=1,LMAX1
            DO MU=1,ISIZE(LI)
             DO ICON=1,N_CON(LI,IFNCT)
              ILOC=ILOC+1
              IF(ICOUNT(ICON,LI))THEN
               DO  IWF=1,NWF
                FACTOR=PSI(ILOC,IWF,1)
                DO LPV=1,NPV
                 PSIN(IWF,IPTS+LPV)=PSIN(IWF,IPTS+LPV) 
     &           +      FACTOR* GNAD(LPV,1,MU,ICON,LI)   
                 PSIL(IWF,IPTS+LPV)=PSIL(IWF,IPTS+LPV)
     &           -0.5D0*FACTOR*(GNAD(LPV,5,MU,ICON,LI)+  
     &                       GNAD(LPV,6,MU,ICON,LI)+  
     &                       GNAD(LPV,7,MU,ICON,LI))  
                END DO
               END DO
              END IF
             END DO
            END DO
  378      CONTINUE  
          END IF 
          LPTS=LPTS+NPV
  380    CONTINUE
  382   CONTINUE
  384  CONTINUE
  386 CONTINUE
C
C  LOOP OVER SHELLS TO GET DERIVATIVES:  ANOTHER STAB AT GETTING 
C  THE SYM RIGHT
C
      IID=0
      DO 485 IFNCT=1,NFNCT
       DO 483 I_POS=1,N_POS(IFNCT)
        IID=IID+1
        CALL OBINFO(1,RIDT(1,IID),RVECA,M_NUC,ISHDUM)
C
C  IDENTIFY ATOM SHELL
C  STORE SYMMETRIZED GRADIENTS IN PSIG
C
        DO I_PT=1,MPTS
         DO IWF=1,NWF    
          DO IX=1,3
           PSIG(IX,IWF,I_PT)=0.0D0
          END DO
         END DO
        END DO
        J_POS=1
        CALL UNRAVEL(IFNCT,IID,J_POS,RIDT(1,IID),
     &               RVECA,L_NUC,1)
        IF(L_NUC.NE.M_NUC)THEN
         PRINT *,'FRCSLV: PROBLEM IN UNRAVEL'
         CALL STOPIT
        END IF
        LPTS=LPTS_BEG
        DO 495 I_PT=1,MPTS
         LPTS=LPTS+1
         DO 493 IGRP=1,NGRP
C
C ROTATE POINT
C MUST BE RMAT(I,J,IGRP) DUE TO SYMMETRIZING
C
          DO I=1,3
           RR(I)=0.0D0
           DO J=1,3
            RR(I)=RR(I)+RMAT(I,J,IGRP)*RMSH(J,LPTS)
           END DO
          END DO
          I_LOC=0
C
C  INITIALIZE SITE DERIVS
C
          DO IWF=1,NWF    
           DO IX=1,3
            GSUB(IX,IWF)=0.0D0
           END DO
          END DO
          X=RR(1)-RVECA(1,J_POS)
          Y=RR(2)-RVECA(2,J_POS)
          Z=RR(3)-RVECA(3,J_POS)
          CALL GTGRAD(X,Y,Z,IFNCT,GRAD)
          DO 480 LI=1,3
           DO 478 MU=JBEG(LI),JEND(LI)
            DO 475 I_CON=1,N_CON(LI,IFNCT)
             I_LOC=I_LOC+1
             DO 465 IWF=1,NWF
              GSUB(1,IWF)=GSUB(1,IWF)
     &                   +PSI(I_LOC,IWF,1)*GRAD(1,I_CON,MU,LI)
              GSUB(2,IWF)=GSUB(2,IWF)
     &                   +PSI(I_LOC,IWF,1)*GRAD(2,I_CON,MU,LI)
              GSUB(3,IWF)=GSUB(3,IWF)
     &                   +PSI(I_LOC,IWF,1)*GRAD(3,I_CON,MU,LI)
  465        CONTINUE
  475       CONTINUE
  478      CONTINUE
  480     CONTINUE
C
C UPDATE PSIG:
C
          IWF=0
          DO ISPN=1,NSPN
           DO K_REP=1,N_REP
            DO IOCC=1,N_OCC(K_REP,ISPN)
             JWF_BEG=IWF
             DO IROW=1,NDMREP(K_REP)
              IWF=IWF+1
              JWF=JWF_BEG
              DO JROW=1,NDMREP(K_REP)
               JWF=JWF+1
C
C <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Look Here...
C The 3 Occurences of REP(IROW,JROW...) might be REP(JROW,IROW....)
C
               PSIG(1,IWF,I_PT)=PSIG(1,IWF,I_PT)
     &          +REP(JROW,IROW,IGRP,K_REP)*GSUB(1,JWF)
               PSIG(2,IWF,I_PT)=PSIG(2,IWF,I_PT)
     &          +REP(JROW,IROW,IGRP,K_REP)*GSUB(2,JWF)
               PSIG(3,IWF,I_PT)=PSIG(3,IWF,I_PT)
     &          +REP(JROW,IROW,IGRP,K_REP)*GSUB(3,JWF)
              END DO
             END DO
            END DO
           END DO
          END DO
          IF ((IWF.NE.NWF).OR.(JWF.NE.NWF)) THEN
           PRINT *,'FRCSLV: OOPS: IWF, JWF AND NWF NOT EQUAL'
           CALL STOPIT
          END IF
C
C END OF UPDATE:
C
  493    CONTINUE
  495   CONTINUE
C
C  UPDATE MATRIX ELEMENTS
C
        DO 30 ISPN=1,NSPN
         JPTS=LPTS_BEG + NMSH*(ISPN-1)
         LPTS=LPTS_BEG
         DO 3100 I_PT=1,MPTS
          JPTS=JPTS+1
          LPTS=LPTS+1
          IWF=NWFS(1)*(ISPN-1)
          DO 390 JWF=1,NWFS(ISPN)
           IWF=IWF+1
           DO 391 IX=1,3
            FRC1(IX,IID)=FRC1(IX,IID) + ISPFAC*PSIG(IX,IWF,I_PT)
     &       *(PSIL(IWF,I_PT) + POT(JPTS)*PSIN(IWF,I_PT))*WMSH(LPTS)
            FRC2(IX,IID)=FRC2(IX,IID) + ISPFAC*PSIG(IX,IWF,I_PT)
     &       *EVLOCC(IWF)*PSIN(IWF,I_PT)*WMSH(LPTS)
  391      CONTINUE
  390     CONTINUE
 3100    CONTINUE
   30   CONTINUE
  483  CONTINUE
  485 CONTINUE
      RETURN
      END
C
C ******************************************************************
C
      SUBROUTINE NUMFORCE
      INCLUDE 'PARAMS'
      INCLUDE 'commons.inc'
      PARAMETER (NMAX=MPBLOCK)
C
      NWFTOT=0
      DO I=1,MXSPN
       NWFTOT=NWFTOT+NWFS(I)
      END DO
      IF (NWF.NE.NWFTOT) THEN
       PRINT *,'NUMFORCE: NWF AND NWFS ARE INCONSISTENT'
       CALL STOPIT
      END IF
c
%ifdef MPI
c
c MPI: send data to children
c
      IF (NPROC .GT. 0) THEN
       CALL SENDDATA(105)
       NMAST= NMAX/(4*NPROC)
      END IF
c
%endif
C
C LOOP OVER ALL POINTS
C
      LPTS=0
   35 CONTINUE
       LPTS_BEG=LPTS
       MPTS=MIN(NMAX,NMSH-LPTS)
c
%ifndef MPI
c
       CALL FRCSLV(MPTS,LPTS)
c
%else
c
c MPI: if all children are busy, let master do some work
c      but don't allow packets smaller than 10 points
c
       IF (NPROC .EQ. 0) THEN
        CALL FRCSLV(MPTS,LPTS)
       ELSE
        CALL CKCHILD(1,NTID)
        IF (NCALLED .NE. NPROC) THEN
         CALL PAMFPUL(1,MPTS,LPTS)
        ELSE
         MPTS= MIN(NMAST,NMSH-LPTS)
         IF (MPTS .LE. 10) THEN
          MPTS= 0
          CALL CKCHILD(2,NTID)
         ELSE
          CALL FRCSLV(MPTS,LPTS)
         ENDIF
        END IF
       END IF
c
%endif
c
       LPTS=LPTS_BEG+MPTS
       IF(LPTS.LT.NMSH) GOTO 35
      CONTINUE
c
c MPI: collect data
c
%ifdef MPI
c
      CALL PAMFPUL(2,0,0)
c
%endif
c
C FORCES ARE TOO BIG BY A FACTOR OF N(G)
C
      IID=0
      DO IFNCT=1,NFNCT
       DO I_POS=1,N_POS(IFNCT)
        IID=IID+1
        DO IX=1,3
         FRC1(IX,IID)=FRC1(IX,IID)/NGRP
         FRC2(IX,IID)=FRC2(IX,IID)/NGRP
        END DO
       END DO
      END DO
      RETURN
      END
C
C *******************************************************
C 
      SUBROUTINE FRCSYM(RVEC,FVEC,FDIFF)
C ORIGINAL VERSION BY MARK R PEDERSON (1990) 
C 
C DIRK POREZAG, AUGUST 1997
C PROJECT OUT FORCE COMPONENTS THAT VIOLATE POINT GROUP SYMMETRY 
C INPUT:  COORDINATES OF THE ATOMIC LOCATION IN RVEC
C         UNSYMMETRIZED FORCE IN FVEC
C OUTPUT: SYMMETRIZED FORCE IN FVEC 
C         |F(INPUT)-F(OUTPUT)| IN FDIFF
C
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       DIMENSION RVEC(3),FVEC(3)
       DIMENSION FSYMM(3)
       DATA ZERO/5.0D-4/
C
C SUM OVER ALL GROUP OPERATIONS THAT LEAVE RVEC UNCHANGED
C
       ZER2=ZERO**2
       DO I=1,3
        FSYMM(I)= 0.0D0
       END DO
       MGRP=0
       DO IGRP=1,NGRP
        DIFF= 0.0D0
        DO I=1,3
         COORD= 0.0D0
         DO J=1,3
          COORD= COORD+RMAT(J,I,IGRP)*RVEC(J)
         END DO
         DIFF= DIFF+(COORD-RVEC(I))**2
        END DO
        IF (DIFF .LT. ZER2) THEN
         MGRP= MGRP+1
         DO I=1,3
          DO J=1,3
           FSYMM(I)= FSYMM(I)+RMAT(J,I,IGRP)*FVEC(J)
          END DO
         END DO
        END IF
       END DO
C
C FINAL CORRECTION, DEFINE FDIFF 
C
       IF (MGRP .LT. 1) THEN
        PRINT *,'FRCSYM: WHERE THE HECK IS THE IDENTITY MATRIX ?'
        CALL STOPIT
       END IF
       FAC= 1.0D0/MGRP
       FDIFF= 0.0D0
       DO I=1,3
        FSYMM(I)= FSYMM(I)*FAC
        FDIFF= FDIFF+(FVEC(I)-FSYMM(I))**2
        FVEC(I)= FSYMM(I)
       END DO
       FDIFF= SQRT(FDIFF)
       RETURN
      END  
C
C **************************************************************
C
      SUBROUTINE HFFLOCAL(RHO)
C
C CALCULATE HELLMAN-FEYNMAN FORCE DUE TO LOCAL POTENTIAL
C DIRK POREZAG, AUGUST 1997 
C
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       PARAMETER(N1BLOCK=MPBLOCK)
       PARAMETER(N2BLOCK=NSPEED)
       DIMENSION RHO(*)
       COMMON/MIXPOT/VXC(MAX_PTS*MXSPN),POT(MAX_PTS*MXSPN)
       COMMON/TMP2/RROT(3,N1BLOCK,MX_GRP),RDIF(3,N2BLOCK)
     &  ,RTMP(N2BLOCK),DTMP(3,N2BLOCK)
     &  ,VLOC(N2BLOCK),RHOCDR(N2BLOCK),RNUC(3,MX_GRP)
       DIMENSION DERIV(3)
       DATA ZERO /1.0D-4/
       DATA SMALL/1.0D-3/
C
       CALL GTTIME(TIME1)
       DO IID=1,NIDENT
        DO I=1,3
         FHELLF(I,IID)= 0.0D0
        END DO
       END DO
C
       DO 100 N1OFS=0,NMSH-1,N1BLOCK
        N1PILE=MIN(N1BLOCK,NMSH-N1OFS)       
C
C ROTATE POINTS 
C
        DO IGRP=1,NGRP
         DO IPTS=1,N1PILE
          DO I=1,3
           RROT(I,IPTS,IGRP)= RMAT(1,I,IGRP)*RMSH(1,N1OFS+IPTS)
     &                       +RMAT(2,I,IGRP)*RMSH(2,N1OFS+IPTS)
     &                       +RMAT(3,I,IGRP)*RMSH(3,N1OFS+IPTS)
          END DO
         END DO
        END DO
C
C UPDATE FHELLF FOR ALL ID MEMBERS
C
        DO IID= 1,NIDENT
         IFU=IFUIDT(IID)
         DO IGRP=1,NGRP
          DO 50 N2OFS=0,N1PILE-1,N2BLOCK
           N2PILE=MIN(N2BLOCK,N1PILE-N2OFS)
           DO IPTS=1,N2PILE
            RDIF(1,IPTS)= RROT(1,N2OFS+IPTS,IGRP)-RIDT(1,IID)
            RDIF(2,IPTS)= RROT(2,N2OFS+IPTS,IGRP)-RIDT(2,IID)
            RDIF(3,IPTS)= RROT(3,N2OFS+IPTS,IGRP)-RIDT(3,IID)
            RTMP(IPTS)= RDIF(1,IPTS)**2+RDIF(2,IPTS)**2+RDIF(3,IPTS)**2
            RTMP(IPTS)= SQRT(RTMP(IPTS))
           END DO
           CALL VLOCAL(2,N2PILE,IFU,RTMP,VLOC)
           CALL RHCDRV(IID,N2PILE,RTMP,DTMP,RHOCDR)
           NOFS=N1OFS+N2OFS 
           DO IPTS=1,N2PILE
            FAC= WMSH(NOFS+IPTS)*(RHO(NOFS+IPTS)*VLOC(IPTS)
     &                         +VXC(NOFS+IPTS)*RHOCDR(IPTS))
            FHELLF(1,IID)= FHELLF(1,IID)+FAC*RDIF(1,IPTS)
            FHELLF(2,IID)= FHELLF(2,IID)+FAC*RDIF(2,IPTS)
            FHELLF(3,IID)= FHELLF(3,IID)+FAC*RDIF(3,IPTS)
           END DO
   50     CONTINUE
         END DO
        END DO
  100  CONTINUE
C
C ALL POINTS DONE, NOW CORRECT FOR MULTIPLICITY OF POINTS AND
C INCLUDE NUCLEAR REPULSION
C
       FACSYM= 1.0D0/NGRP
       DO IID=1,NIDENT
        FHELLF(1,IID)= FACSYM*FHELLF(1,IID)
        FHELLF(2,IID)= FACSYM*FHELLF(2,IID)
        FHELLF(3,IID)= FACSYM*FHELLF(3,IID)
        ZI= ZELC(IFUIDT(IID))
        DO JID=1,NIDENT
         ZJ= ZELC(IFUIDT(JID))
         CALL GASITES(1,RIDT(1,JID),MNUC,RNUC,MSITES)
         DO JNUC=1,MNUC
          D1= RIDT(1,IID)-RNUC(1,JNUC)
          D2= RIDT(2,IID)-RNUC(2,JNUC)
          D3= RIDT(3,IID)-RNUC(3,JNUC)
          DIST= SQRT(D1*D1+D2*D2+D3*D3)
          IF (DIST .GT. ZERO) THEN
           ZZDIRC= ZI*ZJ/(DIST*DIST*DIST)
           FHELLF(1,IID)= FHELLF(1,IID)+D1*ZZDIRC
           FHELLF(2,IID)= FHELLF(2,IID)+D2*ZZDIRC
           FHELLF(3,IID)= FHELLF(3,IID)+D3*ZZDIRC
          END IF
         END DO
        END DO
C
C  ADD NUCLEAR COMPONENT CAUSED BY EFIELD*ZELC
C
        CALL EXTPOT(RIDT(1,IID),EXHERE,DERIV)
        FHELLF(1,IID)= FHELLF(1,IID)+(EFIELD(1)+DERIV(1))*ZI
        FHELLF(2,IID)= FHELLF(2,IID)+(EFIELD(2)+DERIV(2))*ZI
        FHELLF(3,IID)= FHELLF(3,IID)+(EFIELD(3)+DERIV(3))*ZI
C
C SYMMETRIZE FORCE
C
        CALL FRCSYM(RIDT(1,IID),FHELLF(1,IID),FDIFF)
        IF (FDIFF .GT. SMALL) THEN
         PRINT 1010,IID,FDIFF
 1010    FORMAT(' WARNING: HELLMANN-FEYNMAN FORCE OF ATOM ',I3,
     &          ' VIOLATES SYMMETRY BY ',D12.4)
        END IF
       END DO
       CALL GTTIME(TIME2)
       CALL TIMOUT('HELLMANN-FEYNMAN FORCES:           ',TIME2-TIME1)
       RETURN
      END
C
C ***************************************************************
C
      SUBROUTINE FPULAY
C ORIGINAL VERSION BY KOBLAR A JACKSON (1990)
C
C CALCULATE PULAY CORRECTIONS BY NUMERICAL INTEGRATION 
C
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       DIMENSION FPUL(3)
       DATA SMALL/1.0D-3/
C
C ZERO FRC ARRAYS
C
       DO IID=1,NIDENT 
        DO IX=1,3
         FRC1(IX,IID)=0.0D0
         FRC2(IX,IID)=0.0D0
        END DO
       END DO
C
C CALCULATE PULAY CORRECTIONS NUMERICALLY
C
       CALL GTTIME(TIME1)
       CALL NUMFORCE
       CALL GTTIME(TIME2)
       CALL TIMOUT('PULAY CORRECTIONS TO FORCES:       ',TIME2-TIME1)
 1010  FORMAT(1X,A,7X,F12.3)
C
C COMPUTE TOTAL FORCE ON IDENTITY MEMBERS
C SYMMETRIZE PULAY FORCE BEFORE ADDING TO HELLMANN-FEYNMAN TERM
C
       DO 20 IID=1,NIDENT
        DO IX=1,3
         FPUL(IX)= -2*(FRC1(IX,IID)-FRC2(IX,IID))
        END DO
        CALL FRCSYM(RIDT(1,IID),FPUL,FDIFF)
        IF (FDIFF .GT. SMALL) THEN
         PRINT 1020,IID,FDIFF 
 1020    FORMAT(' WARNING: PULAY FORCE CORRECTION OF ATOM ',I3,
     &          ' VIOLATES SYMMETRY BY ',D12.4)
        END IF
        DO IX=1,3
         FTOT(IX,IID)= FPUL(IX)
        END DO
   20  CONTINUE
C
C OBTAIN TOTAL FORCE: HELLMANN-FEYNMAN PART ALREADY IN FHELLF
C
       PRINT '(A)',' '
       PRINT '(A)','HERE ARE THE FORCES:'
       PRINT '(A)','===================='
       IPAR=0
       DO IID=1,NIDENT
        DO IX=1,3
         IPAR=IPAR+1
         FTOT(IX,IID)= FTOT(IX,IID)+FHELLF(IX,IID)+FNONL(IX,IID) 
        END DO 
        PRINT 1030,'ATOM ',IID,', POSITION:',(RIDT(IX,IID),IX=1,3)
        PRINT 1040,'HELLMANN-FEYNMAN:  ',(FHELLF(IX,IID),IX=1,3)
        PRINT 1040,'NONLOCAL FORCE:    ',(FNONL(IX,IID),IX=1,3)
        PRINT 1040,'PULAY CORRECTION:  ',
     &             (FTOT(IX,IID)-FHELLF(IX,IID)-FNONL(IX,IID),IX=1,3)
        PRINT 1040,'TOTAL:             ',(FTOT(IX,IID),IX=1,3)
       END DO 
       PRINT '(A)',' '
 1030  FORMAT(A,I3,A,3(1X,F18.12))
 1040  FORMAT(A,3(1X,D18.12))
       RETURN
      END
