      BLOCK DATA GENERAL
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       DATA DEBUG/.FALSE./
C      DATA DEBUG/.TRUE./
       DATA EFIELD/ 0.0D0, 0.0D0, 0.0D0 /
       DATA DIPOLE/ 0.0D0, 0.0D0, 0.0D0 /
       DATA T1UNRV,T2UNRV/ 0.0D0, 0.0D0 /
      END
C
C **********************************************************************
C
%ifdef MPI
c
      SUBROUTINE CLUSTER()
c
%else
c
      PROGRAM CLUSTER
c
%endif
c
      INCLUDE 'PARAMS'
      INCLUDE 'commons.inc'
      PARAMETER(MXCHG=56)
      LOGICAL FULLSTEP,LNEWWF,DOITALL 
      LOGICAL EXIST,FAILED,SICON
      CHARACTER*1 CHDUM
      CHARACTER*40 NAME
      CHARACTER*60 LINE
c  KAJ
c  info for FLOs
c
c       COMMON/FORRx/NFLO,KSPX!!,TMAT(NDH,NDH,2)
c       COMMON/FLOINFO/FOD(3,MAX_OCC,2),NFOD(2),MFOD(2)
      COMMON/SIC_ENERGY/SICENERGY,TOT_SIC
      DIMENSION MSITES(1), RLOCA(3,MX_GRP)
      DIMENSION ATMASS(MXCHG),PMASS(MAX_IDENT)
C THE EXTERNAL STATEMENT IS NEEDED FOR THE LBFGS CODE
      EXTERNAL LB2
!DIR$ NAME (SYSTEM="system")
      DATA TOLSML/1.0D-4/
      DATA ATMASS/1.00797, 4.0026, 6.939, 9.0122, 10.811, 12.01115
     &            , 14.0067, 15.9994, 18.9984, 20.179, 22.9898, 24.305
     &            , 26.9815, 28.086, 30.9738, 32.064, 35.453, 39.948
     &            , 39.102, 40.08, 44.956, 47.90, 50.942, 51.996
     &            , 54.9381, 55.847, 58.9332, 58.71, 63.546, 65.37
     &            , 69.72, 72.59, 74.9216, 78.96, 79.904, 83.80, 85.47
     &            , 87.62, 88.905, 91.22, 92.906, 95.94, 98.906, 101.07
     &            , 102.905, 106.4, 107.868, 112.40, 114.82, 118.69
     &            , 121.75, 127.60, 126.9044, 131.30, 132.905, 137.34/
      ELOWEST=0.0D0
      iw=1
      CALL PVERSION
      CALL GTTIME(TIME1)
      PRINT '(A)','GLOBAL AWAKENING ON:'
      CALL SYSTEM('date')
      WRITE(*,'(A)')'CPU NODE:'
      CALL SYSTEM('hostname')
      PRINT '(A)',' '
C
C READ RUNS IF AVAILABLE, PROCESS IT, AND WRITE IT
C ITBEG .EQ. 0 -> BEGINNING OF NEW CALCULATION
C ITBEG .NE. 0 -> IN MIDDLE OF SCF CALCULATION
C NCALC:  CALCULATION INDEX
C ISTSCF: START WITH:  0: LEAST-SQUARE FIT OF ATOM POTENTIALS
C                         WITHOUT FURTHER APPROXIMATIONS
C                      1: OLD HAMILTONIAN
C                      2: OLD POTENTIAL
C                      3: LEAST-SQUARE FIT OF ATOM POTENTIALS 
C                         NEGLECTING THREE-CENTER INGEGRALS 
C                      4: OLD WAVEFUNCTIONS
C IHIPOL:  0: START HAMILTONIAN IS NOT INTERPOLATED  
C          1: START HAMILTONIAN IS INTERPOLATED  
C
      call growtube
      INQUIRE(FILE='RUNS',EXIST=EXIST)
      IF (EXIST) THEN
       OPEN(65,FILE='RUNS',FORM='FORMATTED',STATUS='UNKNOWN')
       REWIND(65)
       READ(65,*,END=10) ITBEG,NCALC
       READ(65,*,END=10) ISTSCF,ISTDEF
       READ(65,*,END=10) IHIPOL
       GOTO 20
   10  PRINT *,'CLUSTER: FILE RUNS IS BROKEN'
       CALL STOPIT
   20  CLOSE(65)
      ELSE
       ITBEG= 0
       NCALC= 1
       ISTSCF= 3
       ISTDEF= 4
       IHIPOL= 0
      END IF
      OPEN(65,FILE='RUNS',FORM='FORMATTED',STATUS='UNKNOWN')
      REWIND(65)
      WRITE(65,'(2(1X,I5),12X,A)') ITBEG,NCALC,'ITBEG, NCALC'
      WRITE(65,'(2(1X,I5),12X,A)') ISTSCF, ISTDEF,
     &          'START: 0=SCR.NUC, 1=HAM, 2=POT, 3=LSF, 4=WFUNC'
      WRITE(65,'(1X,I5,18X,A)') IHIPOL,
     &          'START HAMILTONIAN IS INTERPOLATED: 0=NO, 1=YES'
      CLOSE(65)
           IF(NCALC.EQ.1)THEN
                INQUIRE(FILE='SIC',EXIST=EXIST)
                    IF(EXIST)THEN
                    OPEN(66,FILE='PURGRSQ')
                    WRITE(66,*)'T  ... INITIATING PURGRSQ FOR SIC'
                    END IF
                    CLOSE(66)
           END IF
       CLOSE(65)
C
C SETUP AND/OR PROCESS SYMBOL FILE
C
      INQUIRE(FILE='SYMBOL',EXIST=EXIST)
      IF (.NOT.EXIST) CALL ISETUP
      INQUIRE(FILE='SYMBOL',EXIST=EXIST)
      IF (.NOT.EXIST) GOTO 900 
      CALL SYMBOL(NCALC,MODE_RUN,IMESH,IERR)
C     call prelax
C
C IF CONJUGATE-GRADIENT OR VERLET, CHECK FOR CONVERGENCE OF FORCES
C IF THE LARGEST FORCE ACTING ON AN ATOM IN THE CLUSTER IS
C SMALLER THAN GTOL, THE GEOMETRY IS CONVERGED
C
      IF (MODE_RUN .NE. 3)THEN
       GTOL=1.0D-3
       CONVERGENCE=.FALSE.
       OPEN(65,FILE='GEOCNVRG',FORM='FORMATTED',STATUS='UNKNOWN')
       REWIND(65)
       NAME='CONVERGE FALSE'
       READ(65,*,END=30) GTOL
       IF (GTOL.LT.TOLSML) THEN
        PRINT *,'WARNING: CONVERGENCE LIMIT IN GEOCNVRG IS VERY SMALL.'
        PRINT *,'IF YOU INTEND TO PERFORM A GEOMETRY OPTIMIZATION, MAKE'
        PRINT *,'SURE YOU ARE USING A REALLY GOOD MESH. OTHERWISE, THE'
        PRINT *,'GEOMETRY OPTIMIZATION MAY NEVER CONVERGE.'
       END IF
       READ(65,1000,END=30) NAME
       IF (NAME(10:13).EQ.'TRUE') THEN
        PRINT '(A)','CLUSTER: YOU CONVERGED TO THE FINAL ANSWER: 42'
        PRINT '(A)','TO START ANEW, REMOVE FILE GEOCNVRG AND RERUN'
        CLOSE(65)
        GOTO 900
       END IF
   30  REWIND(65)
       WRITE(65,'(1X,G15.6)') GTOL
       WRITE(65,1000) NAME
       CLOSE(65)
      END IF
C
C FAIL IF CALCULATION INDEX WAS NOT FOUND IN SYMBOL
C
      IF (IERR .NE. 0) THEN
       PRINT *,'THE DIRECTIONS FOR CALC INDEX ',NCALC,' AS DEFINED'
       PRINT *,'IN FILE RUNS HAVE NOT BEEN FOUND IN FILE SYMBOL'
       GOTO 900
      END IF
C
C READ AND WRITE SCFDAT
C
      MAXSCF= 80
      SCFTOL= 1.0D-6
      IF (MODE_RUN.EQ.3) SCFTOL= 1.0D-8
      OPEN(65,FILE='SCFDAT',FORM='FORMATTED',STATUS='UNKNOWN')
      REWIND(65)
      READ(65,*,END=50) MAXSCF,SCFTOL
   50 IF (MAXSCF.GT.80) MAXSCF= 80
      REWIND(65)
      WRITE(65,'(1X,I5,1X,G12.4,5X,A)') MAXSCF,SCFTOL,
     &          'MAXSCF, SCFTOL (>0 --> ETOT, <0 --> EKIN)'
      CLOSE(65)
C
C DELETE SOME FILES
C
       OPEN(99,FILE='fforce.dat',STATUS='UNKNOWN')
       CLOSE(99,STATUS='DELETE')
      IF ((ITBEG.EQ.0).AND.(ISTSCF.NE.2)) THEN
       OPEN(99,FILE='POTOLD',FORM='UNFORMATTED',STATUS='UNKNOWN')
       CLOSE(99,STATUS='DELETE')
      END IF
      IF ((NCALC.EQ.1).AND.(ITBEG.EQ.0)) THEN
       OPEN(99,FILE='VERLET',FORM='FORMATTED',STATUS='UNKNOWN')
       CLOSE(99,STATUS='DELETE')
       OPEN(99,FILE='CGRAD',FORM='FORMATTED',STATUS='UNKNOWN')
       CLOSE(99,STATUS='DELETE')
       OPEN(99,FILE='HAMAVG',FORM='UNFORMATTED',STATUS='UNKNOWN')
       CLOSE(99,STATUS='DELETE')
      END IF
C
C SETUP SOME STUFF
C
      ETOTAL=0.0D0
      ENNUC=0.0D0
      ELOCAL=0.0D0
      ERGFLD=0.0D0
      EKINONL=0.0D0
      ENONLO=0.0D0
      ERGXL=0.0D0
      ERGXN=0.0D0
      ERGCL=0.0D0
      ERGCN=0.0D0
      FULLSTEP=.TRUE.
      IF (MAXSCF.EQ.0) THEN
       FULLSTEP=.FALSE.
       MAXSCF=1
      END IF
      MAXSCF=IABS(MAXSCF)
C
C OPEN FILE OUTPUT, INITIALIZE SYMMETRY, AND READ ATOMIC/BASIS SET DATA
C
      OPEN(7,FILE='OUTPUT',FORM='FORMATTED',STATUS='UNKNOWN')
      REWIND(7)
      CALL FGMAT
      CALL CREPMAT
      CALL READINP
c
c MPI: send symmetry and atomic/basis set data to children
c
%ifdef MPI
c
      PRINT*,'CALLING SENDDATA_101'
      CALL SENDDATA(101)
      PRINT*,'BACK FROM SENDDATA_101'
c
%endif
C
C TEST FOR LINEAR DEPENDENCIES AND SYMMETRIZE BASIS
C
      CALL TESTBAS
C
C  GENERATE MESH
C
      IF (IMESH .EQ. 1) THEN
       CALL VMESH(ITBEG,NCALC)
      ELSE
       CALL DVPMESH(ITBEG,NCALC)
      ENDIF
C
C BEGIN SCF ITERATION LOOP. GET ENERGY AND NEW WAVEFUNCTIONS
C LEAVE LOOP IF (.NOT.FULLSTEP)
C
      HAVEHAM=.FALSE.
      ITTOT=MAX(ITBEG,0)
      OLDERG1=0.0D0
      OLDERG2=0.0D0
      ITSCF=0
 400  CONTINUE
      MAXSCF=MAX(MAXSCF,80)
      ITSCF=ITSCF+1
C     DO 400 ITSCF=1,MAXSCF
       CONVERGENCE=.FALSE.
       TRACE=0.0D0
       TOTQNUM=0.0D0
       ITTOT=ITTOT+1
       PRINT '(A)',   ' '
       PRINT '(A,I3)','ITERATION ',ITTOT
       PRINT '(A)',   '============='
       IF (ISTSCF.EQ.4) THEN
        CALL READWF(FAILED)
        IF (FAILED) THEN
         ISTSCF=3
         CALL NEWWAVE_2020(ITTOT,TRACE,ISUCCEED)
C         CALL NEWWAVE(ITTOT,TRACE)
C        CALL NEWOCC (ITTOT,TRACE)
        END IF
       ELSE
        CALL NEWWAVE_2020(ITTOT,TRACE,ISUCCEED)
C        CALL NEWOCC (ITTOT,TRACE)
       END IF
       WRITE(7,1010)TRACE
       PRINT 1010,TRACE
       IF (.NOT.FULLSTEP) GOTO 410
C
C READ AND WRITE SCFDAT
C
      OPEN(65,FILE='SCFDAT',FORM='FORMATTED',STATUS='UNKNOWN')
      REWIND(65)
      READ(65,*,END=55) MAXSCF,SCFTOL
  55  CONTINUE
      REWIND(65)
      WRITE(65,'(1X,I5,1X,G12.4,5X,A)') MAXSCF,SCFTOL,
     &          'MAXSCF, SCFTOL (>0 --> ETOT, <0 --> EKIN)'
      CLOSE(65)
C
C DELETE SOME FILES
C
C
C CHECK FOR CONVERGENCE
C 
       IF (SCFTOL .LT. 0.0D0) THEN 
        ERGCNV=EKINONL
       ELSE
        ERGCNV=ETOTAL
       END IF
       CONVERGENCE=.FALSE.
       IF(MODE_RUN.EQ.3) THEN
        IF ((ABS(ERGCNV-OLDERG1) .LT. ABS(SCFTOL)) .AND.
     &     (ABS(ERGCNV-OLDERG2) .LT. ABS(SCFTOL))) CONVERGENCE=.TRUE.
        OLDERG2=OLDERG1
       ELSE
        IF (ABS(ERGCNV-OLDERG1) .LT. ABS(SCFTOL))  CONVERGENCE=.TRUE.
       ENDIF
       IF (ITSCF.EQ.1) CONVERGENCE=.FALSE.
       IF (ABS(SCFTOL) .GE. 1.0D0) CONVERGENCE=.TRUE.
       OLDERG1=ERGCNV
cKAJ
c  GET THE FLO transformation
c
C        CALL APOTNL(TOTQNUM)
        CALL GETTMAT(TOTQNUM)
c       print *, 'main NFOD', nfod
c       CALL SICSET(2)
C CALCULATE OCCUPATION NUMBERS ASSOCIATED WITH ATOMIC REFERENCE STATES
       CALL GTENRGY
       WRITE(7,*) 'TOTAL ENERGY: ',ETOTAL
C
C OUTPUT TO SUMMARY
C
       OPEN(54,FILE='SUMMARY',FORM='FORMATTED',STATUS='UNKNOWN')
       REWIND(54)
  110  READ(54,'(A)',END=120) CHDUM
       GOTO 110 
  120  CONTINUE
       BACKSPACE(54)
       IF (ITSCF.EQ.1) WRITE(54,1021)
       PRINT*,'MAIN SICENERGY:',SICENERGY
       ELOWEST=MIN(ETOTAL+SICENERGY,ELOWEST)
       WRITE(54,1022)ITTOT,TRACE,ETOTAL,EKINONL,TOTQNUM,
     &  ETOTAL+SICENERGY,ELOWEST
       ETOTAL=ETOTAL+SICENERGY
       CLOSE(54)
       write(WFFILE,"('WFOUT_',I3.3)")iw
       call WFOUT
       iw=iw+1
       WFFILE='WFOUT' 

CK     OPEN(54,FILE='SUMMARY',FORM='FORMATTED',STATUS='UNKNOWN',
CK     %     ACCESS='APPEND')
CK      IF (ITSCF.EQ.1) WRITE(54,1020)
CK      WRITE(54,1030)ITTOT,TRACE,ETOTAL,EKINONL,TOTQNUM
CK     &  ,ETOTAL+ZSIC,MIN(ETOTAL+ZSIC,ELOWEST) !OLDERG1
CK      ETOTAL=ETOTAL+ZSIC
CK      ELOWEST=MIN(ETOTAL,ELOWEST)
CK      CLOSE(54)
C








C
C WAVEFUNCTION DECOMPOSITION INTO LOCAL CONTRIBUTIONS 
C
       LNEWWF=.FALSE.
C       CALL CALLDECOMP(LNEWWF,'DOSOCCU')
       
C
       CALL ATOMSPH(ITTOT)
C
C
C FINISHED 
C
       ISTSCF=2
      IF (ITSCF.LT.MAXSCF.AND..NOT.CONVERGENCE) GOTO 400
C 400 CONTINUE
  410 CONTINUE
      CALL GTTIME(TIME2)
      TTIME=TIME2-TIME1
C
C PRINT DETAILED SUMMARY OF ENERGIES
C
      PRINT 1200, ' '
      PRINT 1200, 'SUMMARY OF ENERGY CONTRIBUTIONS:'
      PRINT 1200, '================================'
      PRINT 1200, 'TOTAL ENERGY:               ',ETOTAL
      PRINT 1200, 'NUCLEAR REPULSION:          ',ENNUC
      PRINT 1200, 'LOCAL POTENTIAL:            ',ELOCAL
      PRINT 1200, 'MEAN-FIELD COULOMB:         ',ECOUL 
      IF (CONVERGENCE) THEN
C      CALL BDOTL
       PRINT 1200,'NONLOCAL POTENTIAL:         ',ENONLO
       PRINT 1200,'KINETIC:                    ',EKINONL-ENONLO
      ELSE
       PRINT 1200,'KINETIC+NONLOCAL POTENTIAL: ',EKINONL
      END IF
      PRINT 1200, 'LOCAL EXCHANGE:             ',ERGXL 
      PRINT 1200, 'LOCAL CORRELATION:          ',ERGCL 
      PRINT 1200, 'NONLOCAL EXCHANGE:          ',ERGXN 
      PRINT 1200, 'NONLOCAL CORRELATION:       ',ERGCN 
      PRINT 1200, 'EXTERNAL ELECTRIC FIELD:    ',ERGFLD
      PRINT 1200, ' '
 1200 FORMAT(A,F20.6)
       call electronic_geometry(ETOTAL) 
C
C FIRST LET'S CLEAN UP THE DISK A BIT ...
C 
      IF (CONVERGENCE) THEN
       OPEN(99,FILE='KBROY3' ,FORM='UNFORMATTED',STATUS='UNKNOWN')
       CLOSE(99,STATUS='DELETE')
       OPEN(99,FILE='KBROY4' ,FORM='UNFORMATTED',STATUS='UNKNOWN')
       CLOSE(99,STATUS='DELETE')
       OPEN(99,FILE='COULOM',FORM='UNFORMATTED',STATUS='UNKNOWN')
       CLOSE(99,STATUS='DELETE')
       OPEN(99,FILE='HAMBST' ,FORM='UNFORMATTED',STATUS='UNKNOWN')
       CLOSE(99,STATUS='DELETE')
       OPEN(99,FILE='OVLPTST',FORM='FORMATTED',STATUS='UNKNOWN')
       CLOSE(99,STATUS='DELETE')
       OPEN(99,FILE='FRMLV'  ,FORM='FORMATTED',STATUS='UNKNOWN')
       CLOSE(99,STATUS='DELETE')
       OPEN(99,FILE='FRMLV'  ,FORM='FORMATTED',STATUS='UNKNOWN')
       CLOSE(99,STATUS='DELETE')
       OPEN(99,FILE='BROYDEN',FORM='FORMATTED',STATUS='UNKNOWN')
       CLOSE(99,STATUS='DELETE')
       OPEN(99,FILE='SICSCI',FORM='FORMATTED',STATUS='UNKNOWN')
       CLOSE(99,STATUS='DELETE')
C
C DONE WITH HOUSECLEANING
C WRITE FORCE DATA, DIPOLE AND EFIELD TO FRCOUT, WRITE VIBINP
C
       DO IID=1,NIDENT
        IZN= NINT(ZNUC(IFUIDT(IID)))
        IF ((IZN.GE.1).AND.(IZN.LE.MXCHG)) THEN
         PMASS(IID)=ATMASS(IZN)
        ELSE
         PMASS(IID)=1.0D10         
        END IF
       END DO
       OPEN(98,FILE='FRCOUT',FORM='FORMATTED',STATUS='UNKNOWN')
       OPEN(99,FILE='VIBINP',FORM='FORMATTED',STATUS='UNKNOWN')
       REWIND(98)
       REWIND(99)
       WRITE(98,1040) ETOTAL,NCALC
       WRITE(99,1080) NIDENT,E_UP,E_DN
       WRITE(99,1090) 
       WRITE(99,1070)(PMASS(IID), IID=1,NIDENT)
       WRITE(99,1040) ETOTAL,NCALC
       DO IID=1,NIDENT
        IZE= NINT(ZELC(IFUIDT(IID)))
        IZN= NINT(ZNUC(IFUIDT(IID)))
        WRITE(98,1050)(RIDT(I,IID), I=1,3),IZE,IZN
        WRITE(98,1060)(FTOT(I,IID), I=1,3)
        WRITE(99,1050)(RIDT(I,IID), I=1,3),IZE,IZN
        WRITE(99,1060)(FTOT(I,IID), I=1,3)
       END DO
       WRITE(98,1060)(DIPOLE(I), I=1,3)
       WRITE(98,1060)(EFIELD(I), I=1,3)
       WRITE(99,1060)(DIPOLE(I), I=1,3)
       WRITE(99,1060)(EFIELD(I), I=1,3)
       CLOSE(98)
       call system('cat FRCOUT >>ALL-FORCES')
       CLOSE(99)
      END IF
C
C OPEN HISTORY. CALL UPDATE
C
      OPEN(33,FILE='XMOL.BST')
      EBST=1.0D30
      REWIND(33)
      READ(33,*,END=3332)NNZZ
      READ(33,*,END=3332)EBST
 3332 CONTINUE
      CLOSE(33)
      IF(EBST.GT.ETOTAL)THEN
         OPEN(33,FILE='CLUSTER')
         REWIND(33)
         READ(33,3334,END=3333)LINE
 3333    CLOSE(33)
         OPEN(33,FILE='XMOL.BST')
         OPEN(34,FILE='XMOL.DAT')
         REWIND(33)
         REWIND(34)
         READ(34,*)NNZZ
         READ(34,*)     
         WRITE(33,*)NNZZ
         WRITE(33,3336)ETOTAL,LINE         
           DO I=1,NNZZ
           READ(34,*)MZ,X1,Y1,Z1  
           WRITE(33,3335)MZ,X1,Y1,Z1
           END DO
 3334    FORMAT(A)
 3335    FORMAT(' ',I5,3F15.6)
 3336    FORMAT(' ',G19.10,A)
         CLOSE(33)
         CLOSE(34)
      END IF
 
      OPEN(33,FILE='HISTORY',FORM='FORMATTED',STATUS='UNKNOWN')
      REWIND(33)
 500  READ(33,'(A)',END=510)CHDUM
      GOTO 500
  510 BACKSPACE(33)
      WRITE(33,*) ' 1000 ****** N E W   D A T A   S E T ******'
      WRITE(33,*) ' 1000',CONVERGENCE
      IF (CONVERGENCE) THEN
       CALL UPDATE(NCALC,MODE_RUN)
       WRITE(33,*)' CONVERGENCE REACHED TOLERANCE:',SCFTOL
      ELSE
       WRITE(33,*)' NO CONVERGENCE, TOLERANCE:',SCFTOL
      END IF
      WRITE(33,1100)TRACE,ETOTAL,EKINONL
C
C TRANSFER OF ATOM PARAMETERS TO HISTORY
C
      NN_ATOMS=NIDENT
      WRITE(33,*) NN_ATOMS,' NUMBER OF IDENTITY MEMBERS'
      DO 650 IA=1,NN_ATOMS
       CALL GASITES(1,RIDT(1,IA),MXNUC,RLOCA,MSITES)
       WRITE(33,*)MXNUC,' NUMBER OF IDENTICAL ATOMS, POSITION:'
       WRITE(33,1110)(RIDT(J,IA),J=1,3),
     &               ZELC(IFUIDT(IA)),ZNUC(IFUIDT(IA))
  650 CONTINUE
      WRITE(33,*) '-1000 ****** E N D   D A T A   S E T ******'
      CLOSE(33)
C
C APPEND WAVE FUNCTIONS TO INPUT IF SMALL CALCULATION
C
      IF (TTIME .LT. 600) THEN
       OPEN(99,FILE='INPUT',FORM='FORMATTED',STATUS='OLD')
       REWIND(99)
  660  READ(99,'(A)',END=670) CHDUM
       GOTO 660 
  670  CONTINUE
       BACKSPACE(99)
       WRITE(99,1120) NSPN,'SPIN'
       WRITE(99,1120) NWF,'NUMBER OF OCCUPIED ORBITALS, EVALUES:'
       WRITE(99,1130)(EVLOCC(IWF), IWF=1,NWF)
       ITOT=0
       WRITE(99,1120)N_REP,'NUMBER OF REPRESENTATIONS'
       DO 770 ISPN=1,NSPN
        DO 760 I_REP=1,N_REP
         WRITE(99,1140) N_OCC(I_REP,ISPN),NS_TOT(I_REP)
         WRITE(99,1130)(OCCUPANCY(I_OCC+ITOT),
     &                  I_OCC=1,N_OCC(I_REP,ISPN))
         ITOT=ITOT+N_OCC(I_REP,ISPN)
         DO 750 IWF=1,N_OCC(I_REP,ISPN)
          WRITE(99,*)' '
          WRITE(99,1130)(PSI_COEF(I,IWF,I_REP,ISPN),
     &                   I=1,NS_TOT(I_REP))
  750    CONTINUE
  760   CONTINUE
  770  CONTINUE
       CLOSE(99)
      END IF
C
C WRITE WAVEFUNCTIONS TO UNFORMATTED FILE
C
      CALL WFOUT
      PRINT*,'FERMI ENERGY:',EFERMI
C     CALL FNDSDS
C
C FIGURE OUT IF WE SHOULD DO ALL THE ANALYSIS STUFF
C THIS WILL ONLY HAPPEN IF WE HAVE A CONVERGED GEOMETRY
C
      DOITALL=.FALSE.
      INQUIRE(FILE='GEOCNVRG',EXIST=EXIST)
      IF (EXIST) THEN
       OPEN(65,FILE='GEOCNVRG',FORM='FORMATTED',STATUS='OLD')
       REWIND(65)
       READ(65,*) GTOL
       READ(65,1000) NAME
       DO I=1,30
        IF (NAME(I:I+3).EQ.'TRUE') DOITALL=.FALSE.
       END DO
       CLOSE(65)
      END IF
C
C IF (DOITALL) CREATE EMPTY INPUT FILES UNLESS THEY ALREADY EXIST
C
      IF (DOITALL) THEN
       DO I=1,4
        IF      (I .EQ. 1) THEN
         NAME='DOSOCCU'
        ELSE IF (I .EQ. 2) THEN
         NAME='ATOMSPH'
        ELSE IF (I .EQ. 3) THEN
         NAME='DOSVIRT'
        ELSE 
         NAME='DOSJNT' 
        END IF
        INQUIRE(FILE=NAME,EXIST=EXIST)
        IF (.NOT. EXIST) THEN
         OPEN(65,FILE=NAME,FORM='FORMATTED',STATUS='NEW') 
         REWIND(65)
         WRITE(65,*) ' '
         CLOSE(65)
        END IF
       END DO
      END IF
C
                call system('cp EVALUES XXXEVALUES')
c               call excite(2)
                call system('cp XXXEVALUES EVALUES')
      CALL SPNORB
C CHECK TO SEE IF WANNIER FUNCTION ARE DESIRED
C IF SO CALCULATE WANNIER FUNCTIONS.
              INQUIRE(FILE='DOWANNIER',EXIST=EXIST)
      IF(EXIST)CALL WANNIER(1)
C
C WAVEFUNCTION DECOMPOSITION INTO LOCAL CONTRIBUTIONS
C
      LNEWWF=.FALSE.
      CALL CALLDECOMP(LNEWWF,'DOSOCCU')
C
C APPROXIMATE ATOMIC CHARGES AND DENSITY/POTENTIAL GRIDS
C THIS WILL DESTROY POTENTIAL AND MESH ARRAYS
C  
%ifndef MPI
      CALL EFG
      CALL HYPERF(0)
      CALL ATOMSPH(0)
      CALL POTRHOSER 
%else
      CALL POTRHOSER 
%endif
       CALL FORMFAK
C
C WAVEFUNCTION DENSITY GRID, ANGULAR DECOMPOSITION OF WAVEFUNCTIONS 
C FOR EACH CENTER, AND JOINT DENSITY OF STATES
C THE STORED HAMILTONIAN MATRIX MUST BE PRESENT TO SOLVE THESE TASKS
C SINCE IT IS USED TO FIND THE EIGENVALUES AND EIGENFUNCTIONS
C
C     CALL DOSJNT !ALWAYS CALL DOSJNT SINCE IT IS PARALLELIZED....
      IF (HAVEHAM) THEN
       ISTSCF=1
       call system('cp XXXEVALUES EVALUES')
       CALL WFGRID
       LNEWWF=.TRUE.
       CALL CALLDECOMP(LNEWWF,'DOSVIRT')
      END IF
C
C UPDATE RUNS
C REREAD IN CASE CHANGES HAVE BEEN MADE
C
      OPEN(65,FILE='RUNS',FORM='FORMATTED',STATUS='UNKNOWN')
      REWIND(65)
      READ(65,*) ITBEG,NCALC
      READ(65,*) ISTSCF,ISTDEF
      READ(65,*) IHIPOL
      REWIND(65)
      IHIPOL=0 
      ITBEG=ITTOT
      IF (CONVERGENCE) THEN
       ITBEG=0
       ISTSCF=ISTDEF
       NCALC=NCALC+1
      ELSE
       IF (FULLSTEP) THEN
        ISTSCF=2
       ELSE
        ITBEG= -1
        MAXSCF=0
       END IF
      END IF
      WRITE(65,'(2(1X,I5),12X,A)') ITBEG,NCALC,'ITBEG, NCALC'
      WRITE(65,'(2(1X,I5),12X,A)') ISTSCF, ISTDEF,
     &          'START: 0=SCR.NUC, 1=HAM, 2=POT, 3=LSF, 4=WFUNC'
      WRITE(65,'(1X,I5,18X,A)') IHIPOL,
     &          'START HAMILTONIAN IS INTERPOLATED: 0=NO, 1=YES'
      CLOSE(65)
  900 CONTINUE
C
C AFTERMATH
C
      CLOSE(7)
      CALL GTTIME(TIME2)
      PRINT '(A)',' '
      CALL TIMOUT('EXECUTION OF UNRAVEL (PART 1):     ',T1UNRV)
      CALL TIMOUT('EXECUTION OF UNRAVEL (PART 2):     ',T2UNRV)
      CALL TIMOUT('EXECUTION OF THIS NEAT PROGRAM:    ',TIME2-TIME1)
      PRINT '(A)','HOPE TO SEE YOU AGAIN VERY SOON :-)' 
C
C THAT'S THE END, FOLKS
C REMOVE RUNNING 
C
C     OPEN(65,FILE='RUNNING',FORM='FORMATTED',STATUS='OLD')
C     CLOSE(65,STATUS='DELETE')
C
C CHECK FOR FILE RUNNING (PREVENTS OTHER PROCESSES TO ACCESS FILES)
C     
C 
C FORMAT STUFF
C
 1000 FORMAT(1X,A40)
 1010 FORMAT('TRACE OF HAMILTONIAN: ',F18.6)
 1020 FORMAT(2X,'IT',10X,'TRACE',14X,'ETOT',10X,
     &       'EKIN+ENONLOC',9X,'CHARGE')
 1021 FORMAT(2X,'IT',10X,'TRACE',16X,'ETOT',17X,
     &       'EKIN+ENONLOC',10X,'CHARGE',14X,'EDFT+SIC',13X,' LOWEST')
 1022 FORMAT(1X,I3,6(1X,F20.9))
 1030 FORMAT(1X,I3,4(1X,F17.6))
 1040 FORMAT(1X,F30.10,1X,I5,' Energy and Symbol NCALC') 
 1050 FORMAT(3(1X,F20.8),2(1X,I3))
 1060 FORMAT(3(1X,D20.12))
 1070 FORMAT(3(1X,F20.6))
 1080 FORMAT(1X,I5,' 0.02 0.005 ',2(1X,F12.6),'  NAT,DX,DE,EUP,EDN')
 1090 FORMAT(' 300.0 0.0  1 6.0 ',26X,'  TEMP,WAVL,IBROAD,FWHM')
 1100 FORMAT(3(1X,F20.8),' TR, EN, KN')
 1110 FORMAT(3(1X,F15.6),3X,2(1X,F8.3),' R, ZELC, ZNUC')
 1120 FORMAT(1X,I5,5X,A)
 1130 FORMAT(3(G20.12))
 1140 FORMAT(3(1X,I5),5X,A)
c
%ifdef MPI
c
      RETURN
c
%endif
c
      END
C
C *********************************************************************
C
C SYMBOL REPLACES THE SYMBOLS DEFINED IN FILE SYMBOL BY THE ACTUAL DATA
C FOR ALL RELEVANT FILES (ALSO DEFINED IN SYMBOL)
C
C INPUT:     NCALC     CALCULATION INDEX
C OUTPUT:    MODE_RUN  CALCULATION MODE
C            IMESH     REQUESTED MESH TYPE
C            IERR      ERROR CODE: 0 - NO ERROR
C                                  1 - CALCULATION INDEX NOT FOUND
C
       SUBROUTINE SYMBOL(NCALC,MODE_RUN,IMESH,IERR)
C ORIGINAL VERSION BY MARK R PEDERSON (1990-1991)
        INCLUDE 'PARAMS'
        INCLUDE 'commons.inc'
        PARAMETER (MAXFILE=50)
        CHARACTER*35 STRING
        LOGICAL EXIST
        CHARACTER*1  COMCHAR
        CHARACTER*80 LINE,FNAM(2,MAXFILE)
        DIMENSION NFCHAR(2,MAXFILE)
        DATA MAXLEN,COMCHAR/16,'!'/
C
        INQUIRE(FILE='SYMBOL',EXIST=EXIST)
        IF (.NOT.EXIST) THEN
         PRINT *,'SYMBOL: SYMBOL FILE IS MISSING'
         CALL STOPIT
        END IF
        OPEN(50,FILE='SYMBOL',FORM='FORMATTED',STATUS='OLD')
        REWIND(50)
C
C SETUP RELAXATION MODE
C
        READ(50,'(A)') STRING
        IF      (STRING(1: 8) .EQ. 'SCF-ONLY') THEN
         MODE_RUN=0
        ELSE IF (STRING(1:18) .EQ. 'CONJUGATE-GRADIENT') THEN
         MODE_RUN=1
        ELSE IF (STRING(1: 6) .EQ. 'VERLET') THEN
         MODE_RUN=2
        ELSE IF (STRING(1:11) .EQ. 'VIBRATIONAL') THEN
         MODE_RUN=3
        ELSE IF (STRING(1:5)  .EQ. 'LBFGS') THEN
         MODE_RUN=4
        ELSE
         PRINT *,'SYMBOL: UNKNOWN RELAXATION MODE: ',STRING
         PRINT *,'VALID MODES ARE: SCF-ONLY, CONJUGATE-GRADIENT, '
         PRINT *,'VERLET, VIBRATIONAL AND LBFGS'
         CALL STOPIT
        END IF
        PRINT '(2A)','RELAXATION MODE: ',STRING
C
C DEFINE FUNCTIONAL
C
        READ(50,'(A)') STRING
        CALL SETDFTYP(STRING)
C
C DEFINE MESH TYPE
C
        READ(50,'(A7)') STRING
        IF (STRING(1:7) .EQ. 'OLDMESH') THEN
         IMESH= 1
        ELSE IF (STRING(1:7) .EQ. 'DVPMESH') THEN
         IMESH= 2
        ELSE
         PRINT *,'SYMBOL: UNKNOWN MESH TYPE: ',STRING(1:7)
         PRINT *,'VALID TYPES ARE: OLDMESH AND DVPMESH'
         CALL STOPIT
        END IF
C
C NOW DEAL WITH THE FILES BUSINESS
C
        READ(50,*) NFILES
        IF (NFILES .GT. MAXFILE) THEN
         PRINT *,'SYMBOL: TOO MANY SYMBOLIC FILES'
         CALL STOPIT
        END IF
        DO 20 IFILE=1,NFILES
         FNAM(1,IFILE)= ' '
         FNAM(2,IFILE)= ' '
         NFCHAR(1,IFILE)=0
         NFCHAR(2,IFILE)=0
         READ(50,1010) LINE
         IPT=1
         DO 10 J=1,80
          IF (LINE(J:J) .EQ. COMCHAR) GOTO 20
          IF (LINE(J:J) .EQ. '=') THEN
           IPT=2
          ELSE IF (LINE(J:J) .NE. ' ') THEN
           NFCHAR(IPT,IFILE)=NFCHAR(IPT,IFILE)+1
           NCH=NFCHAR(IPT,IFILE)
           FNAM(IPT,IFILE)(NCH:NCH)=LINE(J:J)
          END IF
   10    CONTINUE
   20   CONTINUE
C
C READ IN MASSES FOR RELAXATION AND MOVING 
C MOVING SHOULD BE 1 FOR NORMAL DEGREES OF FREEDOM AND 0 FOR FROZEN ONES
C
        READ(50,*) NSYMBS
        READ(50,*) NIDSYM
        IF (NSYMBS .GT. MXSYMBS) THEN
         PRINT *,'SYMBOL: MXSYMBS MUST BE AT LEAST: ',NSYMBS
         CALL STOPIT
        END IF
        IF (NIDSYM .GT. MAX_IDENT) THEN
         PRINT *,'SYMBOL: MAX_IDENT MUST BE AT LEAST: ',NIDSYM
         CALL STOPIT
        END IF
        DO I=1,NIDSYM
         READ(50,*) ATMSYM(I),(MOVING(J,I), J=1,3)
        END DO
C
C CHECK IF SYMBOL CONTAINS INFORMATION AND CONFORMS TO STANDARD
C
        IERR= 1
        IHIG= -1
        ISUM= 0
   50   CONTINUE
         READ(50,*,END=60) ICALC
         IHIG= MAX(IHIG,ICALC)
         IF (ICALC .EQ. NCALC) ISUM= ISUM+1
         DO ISYMB=1,NSYMBS
          READ(50,1010,END=60) LINE
         END DO
         GOTO 50
   60   CONTINUE
        IF (ISUM .EQ. 0) RETURN
        IERR= 0
        IF (((IHIG .GT. NCALC) .OR. (ISUM .GT. 2)) .AND.
     &      ((MODE_RUN .EQ. 1) .OR. (MODE_RUN .EQ. 2))) THEN
         PRINT *,'YOUR CURRENT SYMBOL FILE CANNOT BE USED WITH'
         PRINT *,'CONJUGATE-GRADIENT, VERLET OR LBFGS MODE.'
         PRINT *,'IN ORDER TO USE THESE MODES, THERE MUST BE ONLY ONE'
         PRINT *,'BLOCK OF DATA IN THE SYMBOL FILE THAT CORRESPONDS TO'
         PRINT *,'THE CURRENT CALCULATION INDEX (WHICH IS SET IN RUNS)'
         PRINT *,'AND THERE MUST BE NO BLOCKS WITH A LARGER INDEX.'
         CALL STOPIT
        END IF
C
C GET RELEVANT DATA BLOCK (NEED TO REWIND)
C
        REWIND(50)
        DO I=1,3
         READ(50,'(A)') LINE
        END DO
        READ (50,*) J
        DO I=1,J
         READ(50,'(A)') LINE
        END DO
        READ (50,*) J
        READ (50,*) J
        DO I=1,J
         READ(50,'(A)') LINE
        END DO
   70   CONTINUE
         READ(50,*) ICALC
         IF (ICALC .EQ. NCALC) GOTO 80
         DO ISYMB=1,NSYMBS
          READ(50,1010) LINE
         END DO
         GOTO 70
   80   CONTINUE
C
C READ SYMBOLS
C NOTE: THE RIGHT SIDE MAY CONTAIN BLANKS
C
        DO 130 ISYMB=1,NSYMBS
         READ(50,1010) LINE
         SYMBS(1,ISYMB)= ' '
         SYMBS(2,ISYMB)= ' '
         NSCHAR(1,ISYMB)=0
         NSCHAR(2,ISYMB)=0
         NBLANK=0
         IPT=1
         DO 110 J=1,80
          IF (LINE(J:J) .EQ. COMCHAR) GOTO 120
          IF (LINE(J:J) .EQ. '=') THEN
           IPT=2
          ELSE IF (LINE(J:J) .NE. ' ') THEN
           NBLANK=0
           NSCHAR(IPT,ISYMB)= NSCHAR(IPT,ISYMB)+1
           NCHAR=NSCHAR(IPT,ISYMB)
           SYMBS(IPT,ISYMB)(NCHAR:NCHAR)= LINE(J:J)
          ELSE IF ((NBLANK .EQ. 0) .AND. (IPT .EQ. 2)) THEN
           NBLANK=1
           NSCHAR(IPT,ISYMB)= NSCHAR(IPT,ISYMB)+1
           NCHAR=NSCHAR(IPT,ISYMB)
           SYMBS(IPT,ISYMB)(NCHAR:NCHAR)= LINE(J:J)
          END IF
  110    CONTINUE
  120    IF (NSCHAR(1,ISYMB) .GT. MAXLEN) NSCHAR(1,ISYMB)=MAXLEN
         IF (ISYMB .LE. NIDSYM) THEN
          READ(SYMBS(2,ISYMB),*)(RIDSYM(I,ISYMB), I=1,3)
          DO NCHAR=1,10
           SYMATM(NCHAR,ISYMB)=SYMBS(1,ISYMB)(NCHAR:NCHAR)
          ENDDO
         END IF
  130   CONTINUE
        CLOSE(50)
C
C REPLACE SYMBOLS BY ASSIGNED STRING
C
        DO 200 IFILE=1,NFILES
         OPEN(98,FILE=FNAM(1,IFILE)(1:NFCHAR(1,IFILE)),
     &           FORM='FORMATTED',STATUS='UNKNOWN')
         OPEN(99,FILE=FNAM(2,IFILE)(1:NFCHAR(2,IFILE)),
     &           FORM='FORMATTED',STATUS='UNKNOWN')
         REWIND(98)
         REWIND(99)
  140    CONTINUE
          READ(98,1010,END=190) LINE
          JSYMB=0
          DO 150 ISYMB=1,NSYMBS
           IF (LINE(1:NSCHAR(1,ISYMB)) .EQ.
     &      SYMBS(1,ISYMB)(1:NSCHAR(1,ISYMB))) JSYMB=ISYMB
  150     CONTINUE 
          IF (JSYMB.NE.0) LINE=SYMBS(2,JSYMB)
          WRITE(99,1010) LINE
          GOTO 140
  190    CONTINUE
         CLOSE(98)
         CLOSE(99)
  200   CONTINUE
 1010   FORMAT(A80)
        RETURN
        END
C
C ****************************************************************
C
        SUBROUTINE SETDFTYP(STRING)
C
C DIRK POREZAG, AUGUST 1997
C DEFINE DENSITY FUNCTIONAL
C
         INCLUDE 'PARAMS'
         INCLUDE 'commons.inc'
         PARAMETER(NDFTYP=7)
         PARAMETER(ISTGGA=6)
         CHARACTER*35 STRING
         CHARACTER*6  NAMDF(0:NDFTYP)
         CHARACTER*25 NAMPR(0:NDFTYP)
         DATA NAMDF/'NONE  ','PERZUN','CEPERL','RPA   ','WIGNER',
     &              'GUNLUN','PW91  ','PBE   '/
         DATA NAMPR/'NONE                     ',
     &              'PERDEW-ZUNGER 81         ',
     &              'CEPERLEY                 ',
     &              'RPA                      ',
     &              'WIGNER                   ',
     &              'GUNNARSSON-LUNDQVIST     ',
     &              'PERDEW-WANG 91           ',
     &              'PERDEW-BURKE-ERNZERHOF 96'/
C
C LOOP OVER EXCHANGE AND CORRELATION 
C
         IGGA(1)= -1
         IGGA(2)= -1
         ISTART=1
         DO IXC=1,2
          IF      (STRING(ISTART:ISTART+2) .EQ. 'LDA') THEN
           IGGA(IXC)=0
          ELSE IF (STRING(ISTART:ISTART+2) .EQ. 'GGA') THEN
           IGGA(IXC)=1
          ELSE
           GOTO 900
          END IF
          IF (STRING(ISTART+3:ISTART+3) .NE. '-') GOTO 900
          ISTART=ISTART+4
          DO I=ISTART,35
           IF ((STRING(I:I) .EQ. '*') .OR. 
     &         (STRING(I:I) .EQ. ' ')) GOTO 10
          END DO
          GOTO 900
   10     IEND=I-1 
          ILEN=IEND-ISTART+1
          IF (ILEN .GT. 6) GOTO 900
          DO I=0,NDFTYP
           IF (STRING(ISTART:IEND) .EQ. NAMDF(I)(1:ILEN)) GOTO 20
          END DO
          GOTO 900
   20     IDFTYP(IXC)=I
C
C CHECK GGA AVAILABILITY
C
          IF ((IGGA(IXC) .EQ. 1) .AND. (IDFTYP(IXC) .NE. 0)
     &                           .AND. (IDFTYP(IXC) .LT. ISTGGA)) THEN
           PRINT *,'SETDFTYP: FUNCTIONAL ',STRING(ISTART:IEND)
           PRINT *,'IS NOT A GRADIENT-CORRECTED FUNCTIONAL'
           CALL STOPIT
          END IF
          ISTART=IEND+2
         END DO
         IF (IGGA(1) .LT. 0) GOTO 900
         IF (IGGA(2) .LT. 0) GOTO 900
C
C PRINT RESULTS
C
         IF (IDFTYP(1) .EQ. 0) THEN
          PRINT '(A)', 'EXCHANGE    FUNCTIONAL: NONE'
         ELSE IF (IGGA(1) .EQ. 0) THEN
          PRINT '(A)', 'EXCHANGE    FUNCTIONAL: LDA'
         ELSE 
          PRINT '(2A)','EXCHANGE    FUNCTIONAL: GGA ',NAMPR(IDFTYP(1))
         END IF
         IF (IDFTYP(2) .EQ. 0) THEN
          PRINT '(A)', 'CORRELATION FUNCTIONAL: NONE'
         ELSE IF (IGGA(2) .EQ. 0) THEN
          PRINT '(2A)','CORRELATION FUNCTIONAL: LDA ',NAMPR(IDFTYP(2))
         ELSE
          PRINT '(2A)','CORRELATION FUNCTIONAL: GGA ',NAMPR(IDFTYP(2))
         END IF
         RETURN
  900    PRINT *,'SETDFTYP: INVALID FUNCTIONAL TYPE: ',STRING
         CALL STOPIT
        END
C
C ****************************************************************
C
C CHECK IF BASIS FUNCTIONS ARE LINEARLY DEPENDENT
C
       SUBROUTINE TESTBAS
C ORIGINAL VERSION BY MARK R PEDERSON (1990)
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
C
       PRINT '(A)','TESTING BASIS SET'
       IF (N_REP.GT.MAX_REP) THEN
        PRINT*,'TESTBAS: MAX_REP MUST BE AT LEAST: ',N_REP
        CALL STOPIT
       END IF
       IF (DEBUG) PRINT*,'TESTBAS CALLS OVERLAP MODE: 1'
       CALL OVERLAP(1)
       OPEN(97,FILE='OVLPTST',FORM='FORMATTED',STATUS='UNKNOWN')
       REWIND(97)
       WRITE(97,*) '******** TEST FOR LINEAR DEPENDENCIES *********'
       WRITE(97,*) '***** EIGENVALUES OF THE OVERLAP MATRICES *****'
C
C DIAGONALIZE OVERLAP MATRIX FOR EACH REPRESENTATION
C MOVE OVERLAP MATRIX TO HAM
C
       KIND=0
       ISTOP=0
       DO 70 I_REP=1,N_REP
        WRITE(97,*) 'REPRESENTATION:',I_REP,' DIMEN:',NDMREP(I_REP)
        IF (NS_TOT(I_REP).GT.NDH) THEN
         PRINT *,'TESTBAS: NDH MUST BE AT LEAST: ',NS_TOT(I_REP)
         CALL STOPIT
        END IF
        DO I=1,NS_TOT(I_REP)
         DO J=I,NS_TOT(I_REP)
          KIND=KIND+1
          HAM (J,I)=HSTOR(KIND,1)
         END DO
        END DO
C
C NORMALIZE BASIS FUNCTIONS
C
        DO 30 I=1,NS_TOT(I_REP)
         PRINT*,I,EVAL(I)
         EVAL(I)=1.0D0/SQRT(HAM(I,I))
   30   CONTINUE
        DO 50 I=1,NS_TOT(I_REP)
         DO 40 J=I,NS_TOT(I_REP)
          HAM(J,I)=HAM(J,I)*EVAL(I)*EVAL(J)
   40    CONTINUE
   50   CONTINUE
C
C DIAGONALIZE
C
        MAXB=NS_TOT(I_REP)
        IF (MAXB.NE.0) THEN
         CALL DIAGSP(NDH,MAXB,HAM,EVAL,SC1,0)
         WRITE(97,*) NDMREP(I_REP),MAXB
         WRITE(97,1000)(EVAL(I),I=1,MAXB)
        END IF
        DO 60 I=1,MAXB
         IF (EVAL(I) .LE. 0.0D0) ISTOP=ISTOP+1
   60   CONTINUE
   70  CONTINUE
       IF (ISTOP.GT.0) THEN
        PRINT*,'TESTBAS: ERROR, ISTOP: ',ISTOP
        CALL STOPIT
       END IF
       CLOSE(97)
       RETURN
 1000  FORMAT(' ',5G15.7)
       END
C
C ****************************************************************
C
       SUBROUTINE READWF(FAILED)
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
C
C READWF READS IN WAVEFUNCTIONS TO ALLOW RESTARTING A CALCULATION 
C AT A SELF-CONSISTENT END POINT. THIS IS CONVENIENT FOR FINE-TUNING 
C A SET OF FIT GAUSSIANS AND FOR GETTING GOOD NEW STARTING POINTS.
C IN ORDER TO MAKE SURE THE FILE IS COMPATIBLE, SOME CRITICAL 
C VARIABLES ARE COMPARED TO THE CURRENT CALCULATION. 
C IMPORTANT: IN ORDER TO HAVE THE CORRECT NS_TOT AVAILABLE, OVERLAP
C MUST HAVE BEEN CALLED BEFORE.
C
       LOGICAL FAILED
       LOGICAL EXIST
       CHARACTER*12 EVALSTR
C
C READ IN ATOMIC LOCATIONS AND BASIS SET INFORMATION
C
       FAILED= .FALSE.
       PRINT '(2A)','READING OLD WAVEFUNCTIONS FROM FILE ',WFFILE
       OPEN(99,FILE=WFFILE,FORM='UNFORMATTED',STATUS='UNKNOWN')
       READ(99,END=900) MSPN
       IF (MSPN.NE.NSPN) GOTO 900
       IF (NSPN.GT.MXSPN) THEN
        PRINT *,'READWF: NSPN > MXSPN'
        CALL STOPIT
       END IF
       READ(99,END=900) NWF,(NWFS(ISPN), ISPN=1,NSPN)
       IF (NWF.GT.MAX_OCC) THEN
        PRINT *,'READWF: MAX_OCC MUST BE AT LEAST: ',NWF
        CALL STOPIT
       END IF
       READ(99,END=900)(EVLOCC(IWF), IWF=1,NWF)
       ITOT=0
       READ(99,END=900) MREP
       IF (MREP.NE.N_REP) GOTO 900
       DO 150 ISPN=1,NSPN
        DO I_REP=1,N_REP
         READ(99,END=900) N_OCC(I_REP,ISPN),NBASF
         IF (NBASF.NE.NS_TOT(I_REP)) GOTO 900
         READ(99,END=900)(OCCUPANCY(I_OCC+ITOT),
     &                    I_OCC=1,N_OCC(I_REP,ISPN))
         ITOT=ITOT+N_OCC(I_REP,ISPN)
         DO IWF=1,N_OCC(I_REP,ISPN)
          READ(99,END=900)(PSI_COEF(I,IWF,I_REP,ISPN),
     &                     I=1,NS_TOT(I_REP))
         END DO
        END DO
  150  CONTINUE
       CLOSE(99)
C
C REORTHONORMALIZE OCCUPIED WAVEFUNCTIONS:
C
       IF (DEBUG) PRINT *,'READWF CALLS OVERLAP MODE: 1'
       CALL OVERLAP(1)
       DO 240 ISPN=1,NSPN
       KB=0
       DO 240 IREP=1,N_REP
        NBAS=NS_TOT(IREP)
        DO 160 IB=1 ,NBAS
        DO 160 JB=IB,NBAS
         KB=KB+1
         OVER(JB,IB)=HSTOR(KB,1)
         OVER(IB,JB)=HSTOR(KB,1)
  160   CONTINUE
        ERR=0.0D0
        DO 175 IWF=1,N_OCC(IREP,ISPN)
        DO 175 JWF=1,IWF
         DOT=0.0D0
         IF (JWF.EQ.IWF) THEN
          DO IB=1,NBAS
           DO JB=1,NBAS
            DOT=DOT+OVER(JB,IB)*PSI_COEF(JB,JWF,IREP,ISPN)
     &                         *PSI_COEF(IB,IWF,IREP,ISPN)
           END DO
          END DO
          ERR=ERR+ABS(DOT-1.0D0)
          DO IB=1,NBAS
           PSI_COEF(IB,IWF,IREP,ISPN)=
     &     PSI_COEF(IB,IWF,IREP,ISPN)/SQRT(DOT)
          END DO
          DO IB=1,NBAS
           HAM(IB,IWF)=0.0D0
           DO JB=1,NBAS
            HAM(IB,IWF)=HAM(IB,IWF)
     &                 +PSI_COEF(JB,IWF,IREP,ISPN)*OVER(JB,IB)
           END DO
          END DO
         ELSE
          DOT=0.0D0
          DO IB=1,NBAS
           DOT=DOT+PSI_COEF(IB,IWF,IREP,ISPN)*HAM(IB,JWF)
          END DO
          ERR=ERR+ABS(DOT      )
          DO IB=1,NBAS
           PSI_COEF(IB,IWF,IREP,ISPN)=PSI_COEF(IB,IWF,IREP,ISPN)
     &    -PSI_COEF(IB,JWF,IREP,ISPN)*DOT      
          END DO
         END IF
  175   CONTINUE 
        ER1=ERR
C
C TEST
C
        IF(DEBUG) THEN
        ERR=0.0D0
        DO 185 IWF=1,N_OCC(IREP,ISPN)
        DO 185 JWF=1,IWF
         DOT=0.0D0
         DO IB=1,NBAS
          DO JB=1,NBAS
           DOT=DOT+OVER(JB,IB)*PSI_COEF(JB,JWF,IREP,ISPN)
     &                        *PSI_COEF(IB,IWF,IREP,ISPN)
          END DO
         END DO
         IF (IWF.EQ.JWF) THEN
          ERR=ERR+ABS(DOT-1.0D0)
         ELSE
          ERR=ERR+ABS(DOT)
         END IF
  185   CONTINUE
        PRINT *,'REORTHOGONALIZATION ERROR:',ERR,ER1
        ENDIF
  240  CONTINUE
C
C REMOVE OLD EVALUE FILES AND CREATE DUMMY FILE FOR FIRST ITERATION
C
       ITER=0
  300   ITER=ITER+1
        WRITE(EVALSTR,'(A,I3.3)')'EVAL',ITER
        INQUIRE(FILE=EVALSTR,EXIST=EXIST)
        IF (EXIST) THEN
         OPEN(98,FILE=EVALSTR,FORM='FORMATTED',STATUS='OLD')
         CLOSE(98,STATUS='DELETE')
         GOTO 300
        END IF
       CONTINUE
       OPEN(98,FILE='EVAL001',FORM='FORMATTED',STATUS='UNKNOWN')
       REWIND(98)
       WRITE(98,*) 'NO EIGENVALUES FOR READ WAVEFUNCTIONS'  
       CLOSE(98)
       RETURN
C      
C FAILURE
C
  900  PRINT '(A)','UNABLE TO READ OR PROCESS OLD WAVEFUNCTIONS'
       PRINT '(A)','PROCEEDING WITH DEFAULT STARTING POINT'
       FAILED= .TRUE.
       RETURN
       END
C
C ****************************************************************
C
       SUBROUTINE POTRHOGRD
C
C POTRHOGRID VERSION DIRK POREZAG JUNE 1998. 
C CALCULATION OF CHARGES WITHIN A SPHERE moved into atomsph JK 3/99
C * DENSITY AND POTENTIAL ON A GRID OF POINTS
C
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       PARAMETER (MAXSPH=500)
       PARAMETER (MAXRAD=1000)
       PARAMETER (MAXANG=200)
C
       LOGICAL ICOUNT,EXIST
       CHARACTER*20 FNAME,FORMSTR
       COMMON/MIXPOT/POTIN(MAX_PTS*MXSPN),POT(MAX_PTS*MXSPN)
C
C SCRATCH COMMON BLOCK FOR LOCAL ARRAYS
C
       COMMON/TMP1/COULOMB(MAX_PTS),RHOG(MAX_PTS,NVGRAD,MXSPN)
     &  ,RDIS(NSPEED),VLOC(NSPEED)
     &  ,XRAD(MAXRAD),WTRAD(MAXRAD),CENTER(5,MAXSPH)
     &  ,ANGLE(3,MAXANG),DOMEGA(MAXANG)
     &  ,RVECA(3,MX_GRP),PTS(NSPEED,3),GRAD(NSPEED,10,6,MAX_CON,3)
     &  ,ICOUNT(MAX_CON,3)
       DIMENSION NGRID(3),DERIV(3)
       DIMENSION RBAS(3,4)
C
C MODE:  1 ... CALCULATE DENSITY ON A MESH OF POINTS
C        2 ... CALCULATE POTENTIAL ON A MESH OF POINTS
C
C FOR DENSITY EVALUATIONS, USE OLD SCHEME FOR DENSITY CALCULATION
C OTHERWISE, GET DENSITY FROM COUPOT
C
       PRINT '(A)',' '
       PRINT '(A)','POTENTIAL/DENSITY GRIDS'
       CALL GTTIME(TIME1)
       DO 900 MODE=1,2
C
C READ IN NECESSARY INPUT DATA
C
        IF (MODE.EQ.1) THEN
         FNAME='RHOGRID'
        ELSE
         FNAME='POTGRID'
        END IF
        INQUIRE(FILE=FNAME,EXIST=EXIST)
C
C DETERMINE IF THERE IS ANYTHING TO DO 
C
        FORMSTR= ' '
        IF (.NOT.EXIST) FORMSTR= ' --> NOTHING TO DO'
        IF (MODE .EQ. 1) PRINT '(2A)','DENSITY GRID  ',FORMSTR
        IF (MODE .EQ. 2) PRINT '(2A)','POTENTIAL GRID',FORMSTR
        IF (.NOT.EXIST) GOTO 900
C
C READ INPUT DATA
C
        OPEN(72,FILE=FNAME,FORM='FORMATTED',STATUS='OLD')
        REWIND(72)
C
C CHECK IF THIS FILE IS EMPTY
C IF YES, CREATE A DEFAULT ONE
C
        I=1
        READ(72,*,END=10) ITYPE,IFORM
        I=0
   10   IF (I .EQ. 1) THEN
         DO I=1,3
          RBAS(I,1)=  1.0D30
          RBAS(I,2)= -1.0D30
         END DO
         DO ICNT=1,NCNT
          DO I=1,3
           RBAS(I,1)= MIN(RBAS(I,1),RCNT(I,ICNT))
           RBAS(I,2)= MAX(RBAS(I,2),RCNT(I,ICNT))
          END DO
         END DO
         DO I=1,3
          RBAS(I,1)= RBAS(I,1)-5.0D0
          RBAS(I,2)= RBAS(I,2)+5.0D0
          NGRID(I)= (RBAS(I,2)-RBAS(I,1))/0.5D0+2
          RBAS(I,2)= (RBAS(I,2)-RBAS(I,1))/(NGRID(I)-1)
         END DO
         REWIND(72)
         WRITE(72,1010) 1,1,'Grid mode, unformatted file'
         WRITE(72,1020) (NGRID(I), I=1,3),    'Number of grid points'
         WRITE(72,1030) (RBAS(I,1), I=1,3),   'Origin' 
         WRITE(72,1030) RBAS(1,2),0.0D0,0.0D0,'Basis vector 1' 
         WRITE(72,1030) 0.0D0,RBAS(2,2),0.0D0,'Basis vector 1' 
         WRITE(72,1030) 0.0D0,0.0D0,RBAS(3,2),'Basis vector 1' 
 1010    FORMAT(2(I6,1X),8X,A)
 1020    FORMAT(3(I6,1X),1X,A)
 1030    FORMAT(3(F7.3,1X),1X,A)
         CLOSE(72)
         OPEN(72,FILE=FNAME,FORM='FORMATTED',STATUS='OLD')
         REWIND(72)
        END IF
C
C GRID INPUT 
C
        READ(72,*,END=880) ITYPE,IFORM
        IF (ITYPE .GT. 2) ITYPE= 2
        IF (ITYPE .LT. 1) ITYPE= 1
        IF (IFORM .GT. 2) IFORM= 2
        IF (IFORM .LT. 1) IFORM= 1
        IF (ITYPE .EQ. 2) IFORM= 2
        FORMSTR='UNFORMATTED'
        IF (IFORM .EQ. 2) FORMSTR='FORMATTED'
C
C GET NUMBER OF GRID POINTS, ORIGIN, AND BASIS VECTORS
C
        READ(72,*,END=880)(NGRID(J), J=1,3)
        IF (ITYPE .EQ. 1) THEN
         DO I=1,4
          READ(72,*,END=880)(RBAS(J,I), J=1,3)
         END DO
        END IF
        DO I=1,3
         IF (NGRID(I) .LT. 1) THEN
          PRINT *,'POTRHOGRID: NUMBER OF GRID POINTS MUST BE >= 1'
          GOTO 890
         END IF
        END DO
        IF (NGRID(3) .GT. MAX_PTS) THEN
         PRINT *,'POTRHOGRID: MAX_PTS MUST BEAT LEAST: ',NGRID(3)
         PRINT *,'SKIPPING GRID EVALUATION FOR MODE ',MODE
         GOTO 890
        END IF
        NLOOP=NGRID(1)*NGRID(2)
        FNAME=FNAME(1:3)//'GROUT'
C
C OPEN OUTPUT FILES, WRITE HEADER
C
   20   OPEN(74,FILE=FNAME,FORM=FORMSTR,STATUS='UNKNOWN')
        REWIND(74)
        IF (IFORM .EQ. 1) THEN
         WRITE(74) ITYPE,NSPN
         WRITE(74)(NGRID(J), J=1,3),NGRID(3)
         IF (ITYPE .EQ. 1) THEN
          WRITE(74)((RBAS(J,I), J=1,3), I=1,4)
         END IF
         WRITE(74) NSPN
         DO ISPN=1,NSPN
          X=ISPN
          WRITE(74) ISPN,ISPN,ISPN,ISPN,X
         END DO
        ELSE
         WRITE(74,'(2(1X,I10))') ITYPE,NSPN
         WRITE(74,'(4(1X,I10))')(NGRID(J), J=1,3),NGRID(3)
         IF (ITYPE .EQ. 1) THEN
          WRITE(74,'(3(1X,F20.12))')((RBAS(J,I), J=1,3), I=1,4)
         END IF
        ENDIF
C
C LOOP FOR EACH PILE
C
        DO 850 ILOOP=1,NLOOP
C
C SETUP POINTS
C
         NMSH=NGRID(3)
         IF (ITYPE .EQ. 1) THEN
          IY=MOD(ILOOP-1,NGRID(2))
          IX=(ILOOP-1)/NGRID(2)
          DO IZ=1,NMSH
           I=IZ-1
           RMSH(1,IZ)=RBAS(1,1)+IX*RBAS(1,2)+IY*RBAS(1,3)+I*RBAS(1,4)
           RMSH(2,IZ)=RBAS(2,1)+IX*RBAS(2,2)+IY*RBAS(2,3)+I*RBAS(2,4)
           RMSH(3,IZ)=RBAS(3,1)+IX*RBAS(3,2)+IY*RBAS(3,3)+I*RBAS(3,4)
           WMSH(IZ)=0.0D0
          END DO
         ELSE
          DO IZ=1,NMSH
           READ(72,*,END=870)(RMSH(I,IZ), I=1,3)
           WMSH(IZ)=0.0D0
          END DO
         END IF
C
C NOW: CALCULATE ELECTRONIC COULOMB POTENTIAL AND/OR DENSITY
C DENSITY WILL BE STORED IN RHOG
C
         NGRAD=1
         MODDEN=2
         IF (MODE .EQ. 2) THEN
          MODDEN=1
          IF ((IGGA(1).GT.0).OR.(IGGA(2).GT.0)) NGRAD=10
          DO IAT=1,NIDENT
           GAUSS_CUT(IAT)=1.0D30
          END DO
c
%ifdef MPI
c
c MPI: need to send updated mesh data
c
          CALL SENDDATA(102)
c
%endif
c
          CALL COUPOT1
         ELSE
          I1=IGGA(1)
          I2=IGGA(2)
          IGGA(1)=0
          IGGA(2)=0
          CALL DENSOLD(VOL)
          IGGA(1)=I1
          IGGA(2)=I2
         END IF
C
C UPDATE DATA IN RHOG
C
         DO IGRAD=1,NGRAD
          DO IPTS=1,NMSH
           RHOG(IPTS,IGRAD,1)=RHOG(IPTS,IGRAD,1)+RHOG(IPTS,IGRAD,NSPN)
          END DO 
         END DO 
C
C DENSITY GRID
C
         IF (MODE .EQ. 1) THEN
          IF (NSPN.EQ.1) THEN
           IF (ITYPE .EQ. 1) THEN
            IF (IFORM .EQ. 1) THEN
             WRITE(74)(RHOG(IPTS,1,1), IPTS=1,NMSH)
            ELSE
             WRITE(74,9010)(RHOG(IPTS,1,1), IPTS=1,NMSH)
            END IF
           ELSE
            DO IPTS=1,NMSH
             WRITE(74,9020)(RMSH(I,IPTS), I=1,3)
             WRITE(74,9010) RHOG(IPTS,1,1)
            END DO
           END IF
          ELSE
           IF (ITYPE .EQ. 1) THEN
            IF (IFORM .EQ. 1) THEN
             WRITE(74)(RHOG(IPTS,1,1),
     &                 RHOG(IPTS,1,1)-2*RHOG(IPTS,1,NSPN), IPTS=1,NMSH)
            ELSE
             WRITE(74,9010)(RHOG(IPTS,1,1),
     &                 RHOG(IPTS,1,1)-2*RHOG(IPTS,1,NSPN), IPTS=1,NMSH)
            END IF
           ELSE
            DO IPTS=1,NMSH
             WRITE(74,9020)(RMSH(I,IPTS), I=1,3)
             WRITE(74,9010) RHOG(IPTS,1,1),
     &                 RHOG(IPTS,1,1)-2*RHOG(IPTS,1,NSPN)
            END DO
           END IF
          END IF
          GOTO 850
         END IF
C
C THE FOLLOWING PART IS ONLY DONE IF (MODE .EQ. 2)
C CALCULATING KOHN-SHAM POTENTIAL POT 
C
         CALL GETVLXC(MAX_PTS,RHOG,POT,POTIN)
C
C ADD EFIELD POTENTIAL TO LOCAL POTENTIAL
C
         DO IPTS=1,NMSH
          CALL EXTPOT(RMSH(1,IPTS),EXHERE,DERIV)
          EFHERE=EFIELD(1)*RMSH(1,IPTS)+EFIELD(2)*RMSH(2,IPTS)
     &          +EFIELD(3)*RMSH(3,IPTS)
          POTIN(IPTS)=POTIN(IPTS)+EFHERE+EXHERE
         END DO
C
C WRITE OUTPUT: POTIN   CONTAINS LOCAL  
C               COULOMB CONTAINS COULOMB 
C               POT     CONTAINS EXCHANGE-CORRELATION 
C
         IF (NSPN.EQ.1) THEN
          IF (ITYPE .EQ. 1) THEN
           IF (IFORM .EQ. 1) THEN
            WRITE(74)(POTIN(IPTS),COULOMB(IPTS),POT(IPTS),
     &                IPTS=1,NMSH)
           ELSE
            WRITE(74,9010)(POTIN(IPTS),COULOMB(IPTS),
     &                     POT(IPTS), IPTS=1,NMSH)
           END IF
          ELSE
           DO IPTS=1,NMSH
            WRITE(74,9020)(RMSH(I,IPTS), I=1,3)
            WRITE(74,9010) POTIN(IPTS),COULOMB(IPTS),POT(IPTS)
           END DO
          END IF
         ELSE
          IF (ITYPE .EQ. 1) THEN
           IF (IFORM .EQ. 1) THEN
            WRITE(74)(POTIN(IPTS),COULOMB(IPTS),
     &                POT(IPTS),POT(IPTS+NMSH), IPTS=1,NMSH)
           ELSE
            WRITE(74,9010)(POTIN(IPTS),COULOMB(IPTS),
     &                     POT(IPTS),POT(IPTS+NMSH), IPTS=1,NMSH)
           END IF
          ELSE
           DO IPTS=1,NMSH
            WRITE(74,9020)(RMSH(I,IPTS), I=1,3)
            WRITE(74,9010) POTIN(IPTS),COULOMB(IPTS),
     &                     POT(IPTS),POT(IPTS+NMSH)
           END DO
          END IF
         END IF
  850   CONTINUE
        CLOSE(74)
        GOTO 890
C
C ERROR HANDLING
C        
  870   CLOSE(74)
  880   PRINT *,'ERROR IN INPUT FILE, SKIPPING MODE ',MODE
  890   CLOSE(72)
  900  CONTINUE
       RETURN
 9010  FORMAT(3(1X,E20.12))
 9020  FORMAT(3(1X,F20.12))
       END
C

       SUBROUTINE UPDATE(NCALC,MODE_RUN)
C ORIGINAL VERSION BY MARK R PEDERSON (1990)
C
C UPDATE NUCLEAR COORDINATES
C MODE_RUN=0: NO UPDATE
C MODE_RUN=1: CONJUGATE GRADIENT
C MODE_RUN=2: VERLET UPDATE
C MODE_RUN=3: NO UPDATE
C MODE_RUN=4: LBFGS
C 
        INCLUDE 'PARAMS'
        INCLUDE 'commons.inc'
        CHARACTER*1  CHDUM
        CHARACTER*3  SPNSYM
        LOGICAL NEWGEOM
        LOGICAL EXIST
        DIMENSION MAP(MAX_IDENT)
        DIMENSION X(3*MAX_IDENT),G(3*MAX_IDENT),SCRCGR(3*MAX_IDENT,6)
        DIMENSION MSITES(1),RNUCA(3,MX_GRP)
        DIMENSION DIAG(3*MXATMS)
        DIMENSION WORK(3*MXATMS*(2*NMUPMAX+1)+2*NMUPMAX)
        DIMENSION IPRINT(2)
        DATA ZERO/1.0D-5/
C THESE DATA ARE TO BE USED BY THE LBFGS CODE
      DATA DGUESS,IPRINT(1),IPRINT(2)/0.1D0,-1,0/
      DATA MUPDATE,ACCSOLN,XTOL/4,1.0D-4,10D-16/
C
        ENERGY=ETOTAL
        IF (MODE_RUN .EQ. 1) THEN
         PRINT '(A)','CONJUGATE-GRADIENT UPDATE OF NUCLEAR POSITIONS'
        ELSE IF (MODE_RUN .EQ. 2) THEN
         PRINT '(A)','VERLET UPDATE OF NUCLEAR POSITIONS'
        ELSE IF (MODE_RUN .EQ. 4) THEN
         PRINT '(A)','LBFGS UPDATE OF NUCLEAR POSITIONS'
        ELSE
         RETURN
        END IF
C
C MAP RIDT AND RIDSYM
C
        NPAR=0
        GMAX= 0.0D0
        GSUM= 0.0D0
        DO 100 IID=1,NIDENT
         MAP(IID)=0
         DO IDSYM=1,NIDSYM
          DIFF= (RIDT(1,IID)-RIDSYM(1,IDSYM))**2
     &         +(RIDT(2,IID)-RIDSYM(2,IDSYM))**2
     &         +(RIDT(3,IID)-RIDSYM(3,IDSYM))**2
          IF (SQRT(DIFF) .LE. ZERO) MAP(IID)= IDSYM
         END DO
         IF (MAP(IID) .EQ. 0) THEN
          PRINT *,'UPDATE: UNABLE TO MAP IDENTITY MEMBER ',IID
          CALL STOPIT
         END IF
C
C MANIPULATE FORCES
C IF IN VERLET MODE, DIVIDE FORCE BY MASS
C
         CALL GASITES(1,RIDT(1,IID),MNUC,RNUCA,MSITES)
         GRAD= 0.0D0
         DO I=1,3
          NPAR=NPAR+1
          X(NPAR)= RIDT(I,IID)
          IF (MOVING(I,MAP(IID)) .EQ. 0) THEN
           G(NPAR)= 0.0D0
          ELSE
           GRAD= GRAD+FTOT(I,IID)**2
           G(NPAR)= -FTOT(I,IID)*MNUC
           IF (MODE_RUN .EQ. 2) THEN
            G(NPAR)= G(NPAR)/(ZERO+ATMSYM(MAP(IID)))
           END IF
          END IF
         END DO
         GSUM= GSUM+GRAD
         GRAD= SQRT(GRAD)
         GMAX= MAX(GMAX,GRAD)
  100   CONTINUE
        GSUM= SQRT(GSUM)
C
C CALL CGRAD IF IN CONJUGATE-GRADIENT MODE
C IF CONVERGED, CALL CGRAD WITH MPAR=0 IN ORDER TO DELETE CGRAD FILE
C
        NEWGEOM= .TRUE.
        FTOL=1.0D-4
        IF (MODE_RUN .EQ. 1) THEN
         IF (GMAX .LE. GTOL) THEN
          MPAR=0
          CALL CGRAD(MPAR,ENERGY,X,G,GTOL,FTOL,SCRCGR,ISTAT)
          ISTAT=0
         ELSE
          CALL CGRAD(NPAR,ENERGY,X,G,GTOL,FTOL,SCRCGR,ISTAT)
         END IF
         OPEN(22,FILE='GEOCNVRG',FORM='FORMATTED',STATUS='UNKNOWN')
         REWIND(22)
         WRITE(22,*) GTOL
         IF (ISTAT .EQ. 0) THEN
          PRINT '(A)','FORCES CONVERGED - NO UPDATE NECESSARY'
          NEWGEOM= .FALSE.
          WRITE(22,*) 'CONVERGE TRUE'
         ELSE
          WRITE(22,*) 'CONVERGE FALSE'
         END IF  
         WRITE(22,*) 'ENERGY= ',ENERGY
         WRITE(22,*) 'TOTAL GRADIENT= ',GSUM
         WRITE(22,*) 'LARGEST NUCLEAR GRADIENT= ',GMAX
         CLOSE(22)
C
C NEWTONS EQUATIONS A LA VERLET
C
        ELSE IF (MODE_RUN .EQ. 2) THEN
         DECAY= 0.01D0
         CALL VERLET(NPAR,X,G,DECAY)
C
C CALL LBFGS IF IN LBFGS MODE
C IF CONVERGED, CALL CGRAD WITH MPAR=0 IN ORDER TO DELETE
C DIAG.LBF, SEARCH.LBF, STEP.LBF
C
        ELSE IF (MODE_RUN .EQ. 4) THEN
         INQUIRE(FILE='DIAG.LBF',EXIST=EXIST)
         IF (EXIST) THEN
          OPEN(UNIT=4,FILE='DIAG.LBF',STATUS='OLD')
          READ(4,*)IFLAG
          READ(4,*)
          DO I=1,NPAR
           READ(4,*)DIAG(I)
          ENDDO
          READ(4,*)
          DO I=1,NPAR*(2*MUPDATE+1)+2*MUPDATE
           READ(4,*)WORK(I)
          ENDDO
          CLOSE(UNIT=4)
         ENDIF
         IF (GMAX .LE. GTOL) THEN
          MPAR=0
          CALL LBFGS(MPAR,MUPDATE,X,ENERGY,G,.FALSE.,DIAG,IPRINT,
     &              ACCSOLN,XTOL,WORK,IFLAG,DGUESS)
          IFLAG=0
         ELSE
          CALL LBFGS(NPAR,MUPDATE,X,ENERGY,G,.FALSE.,DIAG,IPRINT,
     &              ACCSOLN,XTOL,WORK,IFLAG,DGUESS)
         ENDIF
C
C WRITE INTERMEDIATE DATA FOR LBFGS
C
	 IF (IFLAG .EQ. 0) THEN
          OPEN(99,FILE='DIAG.LBF',FORM='FORMATTED',STATUS='UNKNOWN')
          CLOSE(99,STATUS='DELETE')
          OPEN(99,FILE='SEARCH.LBF',FORM='FORMATTED',STATUS='UNKNOWN')
          CLOSE(99,STATUS='DELETE')
          OPEN(99,FILE='STEP.LBF',FORM='FORMATTED',STATUS='UNKNOWN')
          CLOSE(99,STATUS='DELETE')
	 ENDIF

         IF (IFLAG .GT. 0) THEN
          OPEN(UNIT=4,FILE='DIAG.LBF',STATUS='unknown')
          WRITE(4,*)IFLAG, "  IFLAG"
          WRITE(4,*)"=====DIAG===="
          DO I=1,NPAR
           WRITE(4,*)DIAG(I)
          ENDDO
          WRITE(4,*)"====WORK===="
          DO I=1,NPAR*(2*MUPDATE+1)+2*MUPDATE
           WRITE(4,*)WORK(I)
          ENDDO
          CLOSE(UNIT=4)
         ENDIF
         OPEN(22,FILE='GEOCNVRG',FORM='FORMATTED',STATUS='OLD')
         REWIND(22)
         WRITE(22,*) GTOL
         IF (IFLAG .EQ. 0) THEN
         PRINT '(A)','FORCES CONVERGED - NO UPDATE NECESSARY'
          NEWGEOM= .FALSE.
          WRITE(22,*) 'CONVERGE TRUE'
         ELSE
          WRITE(22,*) 'CONVERGE FALSE'
         END IF
         WRITE(22,*) 'ENERGY= ',ENERGY
         WRITE(22,*) 'TOTAL GRADIENT= ',GSUM
         WRITE(22,*) 'LARGEST NUCLEAR GRADIENT= ',GMAX
         CLOSE(22)
        END IF
        IF (.NOT.NEWGEOM) RETURN
C
C PRINT NEW SET OF COORDINATES
C        
        PRINT '(A)','NEW SET OF COORDINATES:'
        DO IPAR= 1,NPAR,3
         PRINT 1010,(X(IPAR+I), I=0,2)
 1010    FORMAT(3(1X,F15.6))
        END DO
C
C OPEN SYMBOL AND MOVE FILE POINTER TO THE END
C
        OPEN(22,FILE='SYMBOL',FORM='FORMATTED',STATUS='OLD')
        REWIND(22)
  110    READ(22,1020,END=120) CHDUM
 1020    FORMAT(A1) 
         GOTO 110
  120   CONTINUE
        BACKSPACE(22)
C
C APPEND NEXT SET OF DIRECTIONS TO SYMBOL
C
        WRITE(22,1030) NCALC+1,'NEW CALCULATION CREATED BY UPDATE'
 1030   FORMAT(1X,I5,1X,A)
        DO ISYM=1,NSYMBS
         ISMAP=0
         IF (ISYM .LE. NIDSYM) THEN
          DO IID=1,NIDENT
           IF (ISYM .EQ. MAP(IID)) ISMAP=IID
          END DO
         END IF
         IF (ISMAP .EQ. 0) THEN
          WRITE(22,1040) SYMBS(1,ISYM)(1:NSCHAR(1,ISYM)),
     &                   SYMBS(2,ISYM)(1:NSCHAR(2,ISYM))
 1040     FORMAT(A,' = ',A)
         ELSE
          SPNSYM='UPO'
          IF (ISPIDT(ISMAP) .LT. 0) SPNSYM='SUP'
          IF (ISPIDT(ISMAP) .GT. 0) SPNSYM='SDN'
          WRITE(22,1050) SYMBS(1,ISYM)(1:NSCHAR(1,ISYM)),
     &                   (X(3*(ISMAP-1)+I), I=1,3),SPNSYM
 1050     FORMAT(A,' =',3(1X,F20.11),1X,A3)
         END IF
        END DO
        CLOSE(22)
        RETURN
       END
C
      SUBROUTINE WFOUT
C ORIGINAL VERSION BY MARK R PEDERSON
C 06/23/97 Converted to subroutine. David C. Patton
C
C WRITE WAVEFC
C
      INCLUDE 'PARAMS'
      INCLUDE 'commons.inc'
C
      OPEN(98,FILE=WFFILE,FORM='UNFORMATTED',STATUS='UNKNOWN')
      REWIND(98)
      WRITE(98) NSPN
      WRITE(98) NWF,(NWFS(ISPN),ISPN=1,NSPN)
      WRITE(98) (EVLOCC(IWF), IWF=1,NWF)
      ITOT=0
      WRITE(98) N_REP
      DO 870 ISPN=1,NSPN
        DO 860 I_REP=1,N_REP
          WRITE(98) N_OCC(I_REP,ISPN),NS_TOT(I_REP)
          WRITE(98) (OCCUPANCY(I_OCC+ITOT),
     &             I_OCC=1,N_OCC(I_REP,ISPN))
          ITOT=ITOT+N_OCC(I_REP,ISPN)
          DO 850 IWF=1,N_OCC(I_REP,ISPN)
            WRITE(98) (PSI_COEF(I,IWF,I_REP,ISPN),
     &              I=1,NS_TOT(I_REP))
850       CONTINUE
860     CONTINUE
870   CONTINUE
      CLOSE(98)
      RETURN
      END
C
C **************************************************************
C
      SUBROUTINE READINP
C 
C DIRK POREZAG, JULY 1997
C READ ATOM DATA FROM INPUT AND ELECTRIC FIELD FROM EFIELD
C
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       COMMON/TMP1/RVEC(3,MX_GRP),NFADD(3),MSITES(1),IORD(2,MAX_BARE)
       CHARACTER*80 LINE
       LOGICAL EXIST,ANTIFERRO
       DATA ZERO /1.0D-5/
       DATA TOLSP/1.0D-8/
       DATA ATMCL/1.0D-1/
C
C READ/WRITE EFIELD 
C
       OPEN(21,FILE='EFIELD',FORM='FORMATTED',STATUS='UNKNOWN')
       REWIND(21)
       READ(21,*,END=20) EFIELD
   20  CONTINUE
       REWIND(21)
       WRITE(21,'(3(1X,D24.16))') EFIELD
       CLOSE(21)
C
C OPEN INPUT, READ NUMBER OF FUNCTION SETS 
C
       PRINT '(A)','READING ATOMIC AND BASIS SET DATA'
       INQUIRE(FILE='INPUT',EXIST=EXIST)
       IF (.NOT. EXIST) GOTO 500
       OPEN(21,FILE='INPUT',FORM='FORMATTED',STATUS='OLD')
       REWIND(21)
       READ(21,*,END=500) NFNCT
       IF (NFNCT .GT. MAX_FUSET) THEN
        PRINT *,'READINP: MAX_FUSET MUST BE AT LEAST: ',NFNCT
        GOTO 600
       END IF
C
C CHARGE, PSEUDOPOTENTIAL TYPE, AND LOCATIONS
C
       NIDENT= 0
       NCNT= 0
       ISITPSP= 0 
       ISNLCC= 0
       ANTIFERRO= .FALSE.
       DO 100 IFNCT=1,NFNCT
        READ(21,*,END=500) ZELC(IFNCT),ZNUC(IFNCT)
        READ(21,'(A7)',END=500) PSPSYM(IFNCT)
        IF (PSPSYM(IFNCT)(1:3) .NE. 'ALL') ISITPSP=1
        READ(21,*,END=500) N_POS(IFNCT)
        DO 50 IPOS=1,N_POS(IFNCT)
         NIDENT=NIDENT+1
         IF (NIDENT .GT. MAX_IDENT) THEN
          PRINT *,'READINP: MAX_IDENT MUST BE AT LEAST: ',NIDENT
          GOTO 600
         END IF
         IFUIDT(NIDENT)=IFNCT
         ISPIDT(NIDENT)=0
         READ(21,'(A80)') LINE
         DO I=1,78
          IF (LINE(I:I+2) .EQ. 'SUP') THEN
           ISPIDT(NIDENT)= 1
           ANTIFERRO= .TRUE.
           GOTO 30
          ENDIF
          IF (LINE(I:I+2) .EQ. 'SDN') THEN
           ISPIDT(NIDENT)= -1
           ANTIFERRO= .TRUE.
           GOTO 30
          ENDIF
         END DO
   30    READ(LINE,*,END=500)(RIDT(J,NIDENT),J=1,3)
C
C SET UP COORDINATES AND TYPE FOR EQUIVALENT ATOMS
C
         CALL GASITES(1,RIDT(1,NIDENT),MNUC,RVEC,MSITES)
         IF (NCNT+MNUC .GT. MX_CNT) THEN
          PRINT *,'READINP: MX_CNT MUST BE AT LEAST: ',NCNT+MNUC
          GOTO 600
         END IF
         DO INUC=1,MNUC
          IFUCNT(NCNT+INUC)= IFNCT
          RCNT(1,NCNT+INUC)= RVEC(1,INUC)
          RCNT(2,NCNT+INUC)= RVEC(2,INUC)
          RCNT(3,NCNT+INUC)= RVEC(3,INUC)
         END DO
         NCNT=NCNT+MNUC
C
C CHECK IF ATOMS ARE TOO CLOSE
C
         DO IID=1,NIDENT
          IFOUND=0
          DO INUC=1,MNUC
           DR= ABS(RVEC(1,INUC)-RIDT(1,IID))
     &        +ABS(RVEC(2,INUC)-RIDT(2,IID))
     &        +ABS(RVEC(3,INUC)-RIDT(3,IID))
           IF (DR .LT. ATMCL)THEN
               IFOUND=IFOUND+1
               PRINT*,IFOUND,(RVEC(J,INUC),J=1,3)
           END IF
          END DO
          IF (IID .EQ. NIDENT) IFOUND= IFOUND-1
          IF (IFOUND .NE. 0) THEN
           PRINT *,'READINP: IDENTITY MEMBERS ARE TOO CLOSE TO ',
     &             'EACH OTHER:'
           PRINT *,'ID MEMBER 1: ',IID,', ID MEMBER 2: ',NIDENT
           PRINT 1000,'LOCATION 1: ',(RIDT(J,NIDENT), J=1,3)
           PRINT 1000,'LOCATION 2: ',(RIDT(J,IID),    J=1,3)
 1000      FORMAT(A,3(1X,F15.5))
           GOTO 600
          END IF
         END DO
   50   CONTINUE
C
C BASIS SET INFO
C
        READ(21,*,END=500) IEXTRA
        READ(21,*,END=500) N_BARE(IFNCT)
        IF (N_BARE(IFNCT) .GT. MAX_BARE) THEN
         PRINT *,'READINP: MAX_BARE SHOULD BE AT LEAST: ',N_BARE(IFNCT)
         GOTO 600
        END IF
        PRINT*,'HI MARK',0
        READ(21,*,END=500)(N_CON(L,IFNCT),L=1,3)
        PRINT*,'HI MARK',1
        READ(21,*,END=500)(NFADD(L),L=1,3)
        PRINT*,'HI MARK',2
        READ(21,*,END=500)(BFALP(I,IFNCT),I=1,N_BARE(IFNCT))
        PRINT*,'HI MARK',3
C
C SORT ALPHA FROM BIG TO SMALL
C
        DO I=1,N_BARE(IFNCT)
         IORD(1,I)=I
        END DO
        DO I=1,N_BARE(IFNCT)
         DO J=I+1,N_BARE(IFNCT)
          IF (BFALP(I,IFNCT) .LT. BFALP(J,IFNCT)) THEN
           SAV= BFALP(I,IFNCT)
           BFALP(I,IFNCT)= BFALP(J,IFNCT)
           BFALP(J,IFNCT)= SAV
           ISAV= IORD(1,I)
           IORD(1,I)= IORD(1,J)
           IORD(1,J)= ISAV
          END IF
         END DO
        END DO
        DO I=1,N_BARE(IFNCT)
         DO J=1,N_BARE(IFNCT)
          IF (IORD(1,J) .EQ. I) IORD(2,I)=J
         END DO
        END DO
        LSYMMAX(IFNCT)=0
        DO L=1,3
         IF (IEXTRA .GT. 0) N_CON(L,IFNCT)=N_CON(L,IFNCT)+NFADD(L)
         IF (N_CON(L,IFNCT) .GT. 0) LSYMMAX(IFNCT)=L-1
         IF (N_CON(L,IFNCT) .GT. MAX_CON) THEN
          PRINT *,'READINP: MAX_CON MUST BE AT LEAST: ',N_CON(L,IFNCT)
          GOTO 600
         END IF
         DO I_CON=1,N_CON(L,IFNCT)
         print*,'I_CON:',I_CON
        PRINT*,'HI MARK',4
          READ(21,*,END=500)
     &        (BFCON(IORD(2,I),I_CON,L,IFNCT),I=1,N_BARE(IFNCT))
         END DO
        PRINT*,'HI MARK',5
         IF (IEXTRA .LE. 0) THEN
          DO IFADD=1,NFADD(L)
           READ(21,*,END=500)(DUMMY, I=1,N_BARE(IFNCT))
          END DO
         END IF
        END DO 
        ALPCOR(IFNCT)=0.0D0
  100  CONTINUE
C
C ELECTRONS AND NAME FOR FILE FOR READING/WRITING WAVEFUNCTIONS
C DEFINE NSPN
C
        PRINT*,'HI MARK ELECTRONS'
       READ(21,*,END=500) E_UP,E_DN
        PRINT*,' ',E_UP,E_DN
       NSPN=2
       IF ((ABS(E_UP-E_DN) .LT. TOLSP) .AND. (.NOT. ANTIFERRO)) NSPN=1
       IF (NSPN .GT. MXSPN) THEN
        PRINT *,'READINP: MXSPN MUST BE AT LEAST: ',NSPN
        CLOSE(21)
        CALL STOPIT
       END IF
       E_UP=ABS(E_UP)
       E_DN=ABS(E_DN)
       IF ((E_UP+E_DN) .LT. ZERO) THEN
        PRINT *,'READINP: THERE IS NO POINT IN WASTING CPU TIME FOR'
        PRINT *,'CALCULATIONS WITHOUT ELECTRONS. GET A LIFE !'
        GOTO 600
       END IF
       WFFILE='WFOUT'
       PRINT*,'HI MARK',WFFILE
       READ(21,'(A)') WFFILE
       CLOSE(21)
C
C INITIALIZE PSEUDOPOTENTIAL PARAMETERS
C
       CALL READPSP
C
C GET ATOMIC POTENTIALS AND DENSITIES
       INQUIRE(FILE='SIC',EXIST=EXIST)
       DO IFNCT= 1,NFNCT
        IF(.NOT.EXIST)CALL ATOMSCF(IFNCT)
C       IF(     EXIST)CALL ATOMSIC(IFNCT)
       END DO
       RETURN
C
  500  PRINT *,'READINP: FILE INPUT IS MISSING OR BROKEN'
  600  CLOSE(21)
       CALL STOPIT
C
      END
          subroutine prelax
          character*80 line,name
          dimension r(3,1000)
          dimension name(1000)
          dimension g(3,3,120),t(3,3),v(3),dx(3)
          dimension ml(3)
          OPEN(90,FILE='SYMBOL')
          OPEN(95,FILE='SYMBOL-MP')
          OPEN(80,FILE='xxx')
          read(90,*)
          write(95,95)
 90       format(a80)
 95       format('VIBRATIONAL')
 96       format(' ',I5,' NUMBER OF NUCLEI')
 97       format(a13,3F12.6,' UPO')
          do i=1,2
          read (90,90)line
          write(95,90)line
          end do
          read(90,*)nn
          write(95,*)nn,' NUMBER OF SYMBOLIC FILES'
          do i=1,nn  
          read (90,90)line
          write(95,90)line
          end do
          read (90,*)nn 
          write(95,*)nn,' NUMBER OF SYMBOLS IN LIST'
          read(90,*)nnuc
          write(95,96)nnuc                           
          do i=1,nnuc+1
          read (90,90)line
          write(95,90)line
          end do
          do inuc=1,nn      
          read (90,90)line
          rewind (80)
               name(inuc)=line
                   do j=1,80
                     if(line(j:j).eq.'=')k=j+1
                   end do
          write(80,*)line(k:80)
          rewind(80)
          if(inuc.le.nnuc)then
          read(80,*)(r(j,inuc),j=1,3) 
          print *,(r(j,inuc),j=1,3)
          end if
          write(95,90)name(inuc)
          end do
c generate inequivalent shells:
          open(50,file='IDENT-BAS')
          read(50,*,end=200)ni
          do i=1,ni
           read(50,*)(t(j,i),j=1,3)
             dot=0.0d0
             do j=1,3
             dot=dot+t(j,i)**2
             end do
             do j=1,3
             t(j,i)=t(j,i)/sqrt(dot)
             end do
             print*,(t(j,i),j=1,3)
          end do
          err=0.0d0
          do i=1  ,ni
          do j=i+1,ni
           dot=0.0d0
           do k=1,ni
           dot=dot+t(k,i)*t(k,j)
           end do
           print*,i,j,dot
           err=err+abs(dot)
          end do
          end do
          if(dot.gt.0.000001)go to 200
          mcalc=1
          do inuc=1,nnuc
c decompose r(*,inuc)
           nl=0
           do l=1,3
               v(l)=0.0d0
               do k=1,3
               v(l)=v(l)+r(k,inuc)*t(k,l)
               end do
            if(abs(v(l)).gt.0.001)then
            nl=nl+1
            ml(nl)=l
            v(l)=0.05
            end if
           end do
             do il=1,nl
             do is=-1,1,2
             mcalc=mcalc+1
             write(95,*)mcalc,il,is,' Allowed displacement'       
             do jnuc=1,nn         
                if(jnuc.ne.inuc)then
                write(95,90)name(jnuc)
                else
                l=ml(il)
                    do k=1,3
                    dx(k)=r(k,inuc)+v(il)*is*t(k,l)
                    end do
                write(95,97)name(inuc)(1:13),(dx(k),k=1,3)               
                end if
             end do
             end do
             end do
          end do
 200      continue
          close(80)
          close(90)
          close(95)
          close(50) !end closing
          end
           subroutine growtube
           implicit real*8 (a-h,o-z)
           parameter (mxdm=300)
           dimension t(3,mxdm),r(3,2),v(3)
           dimension grp(3,3,120)
           open(85,file='CLUSTER-TUBE')
           rewind(85)
           nang=6     
           ntn=5
           bnd=1.4
           read(85,*,end=5)nang,ntn,bnd
 5         continue
           rewind(85)
           write(85,*)nang,ntn,bnd,' !tube params'
c          print*,'nang, ntn=?'
c          read*,nang,ntn
           pi=4.0d0*atan(1.0d0)
c 2pi*xx = 1.40*3.0*nang
           xx=bnd*3.0*nang/(2.0d0*pi)
           print*,'xx:',xx
           r(1,1)= xx    
           r(2,1)= bnd/2.d0
           r(3,1)= 0.0d0
           r(1,2)= xx     
           r(2,2)=-bnd/2.d0
           r(3,2)= 0.0d0
           k=0
           alat=sqrt(3.0d0)*bnd/2.0d0
           open(80,file='GRPTUB')
           write(80,*)nang
           do iang=0,nang-1
             theta=(2.0d0*pi/nang)*iang
                 c=cos(theta)
                 s=sin(theta)
             write(80,80) c,  s     ,0.0d0
             write(80,80)-s,  c     ,0.0d0
             write(80,80)0.0d0,0.0d0,1.0d0
             write(80,*)' '
           end do
           rewind(80)
           read(80,*)nang
               do igp=1,nang
               read(80,*)((grp(j,i,igp),j=1,3),i=1,3)
               end do
                   do k=nang+1,nang+2
                     do i=1,3
                     do j=1,3
                     grp(j,i,k)=0.0d0
                     end do
                     end do
                   end do
               grp(1,1,nang+1)= 1.0d0
               grp(2,2,nang+1)=-1.0d0
               grp(3,3,nang+1)= 1.0d0
            pi=4.0d0*atan(1.0d0)
            theta=pi/nang
               c=cos(theta)
               s=sin(theta)
               grp(1,1,nang+2)= c       
               grp(1,2,nang+2)= s       
               grp(2,1,nang+2)=-s       
               grp(2,2,nang+2)= c       
               grp(3,3,nang+2)=-1.0d0
           mgp=nang+2
 10        continue
           ngp=mgp
           mgp=ngp+1
           new=0
                 do igp=1,ngp  
                 do jgp=1,ngp  
                      do i=1,3
                      do j=1,3
                      grp(j,i,mgp)=0.0d0
                           do k=1,3
                           grp(j,i,mgp)=grp(j,i,mgp)+
     &                     grp(j,k,igp)*grp(k,i,jgp)
                           end do
                      end do
                      end do
                   lgp=0
                   do kgp=1,mgp-1
                   add=0.0d0
                      do i=1,3
                      do j=1,3
                      add=add+abs(grp(j,i,mgp)-grp(j,i,kgp))
                      end do
                      end do
                   if(add.lt.1.0d-5)then
                   lgp=-1.0d0
                   end if
                   end do
                   if(lgp.eq.0)then
                   mgp=mgp+1
                   new=1
                   end if
                 end do
                 end do
             mgp=mgp-1
             if(new.eq.1)go to 10
                   do igp=1    ,mgp
                   do jgp=igp+1,mgp
                      add=0.0d0
                      do i=1,3
                      do j=1,3
                      add=add+abs( grp(j,i,igp)-
     &                             grp(j,i,jgp))
                      end do
                      end do
                      if(add.lt.0.0001)then
                      print*,'overcomplete',igp,jgp
                      return       
                      end if
                   end do
                   end do
           rewind(80)
           write(80,*)ngp
              do l=1,2
               do igp=1,ngp  
                  add=0.0d0
                  do i=1,3
                  do j=1,3
                  add=add+abs(grp(j,i,igp))
                  end do
                  end do
               if(l.eq.1.and.abs(add-3.0).lt.0.00001)then
               write(80,80)((grp(j,i,igp),j=1,3),i=1,3)
               write(80,*)' '
               else if(l.eq.2.and.abs(add-3.0).gt..00001)then
               write(80,80)((grp(j,i,igp),j=1,3),i=1,3)
               write(80,*)' '
               end if
               end do
             end do
 80          format(' ',3g20.12)
           close(80)
           write(85,85)
           write(85,86)
           write(85,*)ntn+1,(2*ntn+1)*2*nang,
     &' No of inequivalent and total atoms'
 85        format('GGA-PBE*GGA-PBE')
 86        format('GRP')
 87        format(3F15.6,' 6 ALL')
           k=0
           open(91,file='tube.out')
           write(91,*)(2*ntn+1)*ngp    
           write(91,*)'Tube created by growit'
           do itn=   0,ntn
            theta=itn*pi/nang
               c=cos(theta)
               s=sin(theta)
             v(1)= c*r(1,1)+s*r(2,1)
             v(2)=-s*r(1,1)+c*r(2,1)
             v(3)= r(3,1)+alat*itn+alat/2.0d0
             write(85,87)(v(j)/0.5292,j=1,3)
             do igp=1,ngp
             k=k+1
                       if(k.gt.mxdm)then
                       k=1
                       print*,'bailing on tube geom output'
                       end if
               do j=1,3
               t(j,k)=0.0d0
                  do l=1,3
                  t(j,k)=t(j,k)+grp(l,j,igp)*v(l)
                  end do
               end do
               write(91,91)(t(j,k),j=1,3)
             end do
           end do
           do i=1,k
           ne=0
           do j=1,k
              if(j.ne.i)then
              dd=(t(1,i)-t(1,j))**2+
     &           (t(2,i)-t(2,j))**2+
     &           (t(3,i)-t(3,j))**2 
              dd=sqrt(dd)
                if(dd.lt.1.55)then
                ne=ne+1
                print*,i,j,ne,dd
                end if
              end if
           end do
           print*,'atom:',i,' has: ', ne, 'neighbors'
           end do
           write(85,*)'0.0 0.0 Charge and Spin'
           close(85)
           call system('cat GRPTUB       >>CLUSTER-TUBE')
           call system('rm GRPTUB')
           call system('cat tube.out >> CLUSTER-TUBE')
           call system('rm tube.out')
 91        format(' 6',3f12.4)
           end
       SUBROUTINE FNDSDS
C
C WRITTEN BY MARK R PEDERSON (DEC 2011)       
c
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       PARAMETER (MAX_TOT=NDH*MAX_REP)
       LOGICAL EXIST,FERMISTAT
       DIMENSION EVALSAV(MAX_TOT*MXSPN),OCCTMP(MAX_TOT*MXSPN)
       DIMENSION NDEG(MAX_TOT*MXSPN),INDREP(MAX_TOT*MXSPN),
     &  NSAV(MAX_REP,MXSPN)
       DIMENSION N_VIRT(MAX_REP,MXSPN)
       DIMENSION NTEMP(MAX_TOT*MXSPN)
       DIMENSION EVLT(NDH,MAX_REP,MXSPN)
       DIMENSION INFO(3,MAX_TOT,3)
       DATA  EWIN/0.25/
       NPASS=0
       NHOLE=0
       NPART=0
       DO 130 ISPN=1,NSPN
       FERMI=EFERMI(ISPN)
       CALL OVERLAP(1)
       KBAS=0
        DO 130 IREP=1,N_REP
         NBAS=NS_TOT(IREP)
         DO 80 IBAS=1,NBAS
         DO 80 JBAS=IBAS,NBAS
           KBAS=KBAS+1
           OVER(JBAS,IBAS)=HSTOR(KBAS,1)
           HAM (JBAS,IBAS)=HSTOR(KBAS,2)
   80    CONTINUE
         IF (NBAS.NE.0)THEN
         CALL DIAGGE(NDH,NBAS,HAM,OVER,EVLT(1,IREP,ISPN),SC1,1)
         NSAV(IREP,ISPN)=MIN(NBAS,MAX_VIRT_PER_SYM)
         DO 110 ISAV=1,NSAV(IREP,ISPN)
            EVNOW=EVLT(ISAV,IREP,ISPN)
            IF(EVNOW.LE.FERMI-EWIN)THEN
            NPASS=NPASS+1
            INFO(1,NPASS,1)=ISAV
            INFO(2,NPASS,1)=IREP
            INFO(3,NPASS,1)=ISPN
            ELSE IF(EVNOW.GT.FERMI-EWIN.AND.EVNOW.LE.FERMI)THEN
            NHOLE=NHOLE+1
            INFO(1,NHOLE,2)=ISAV
            INFO(2,NHOLE,2)=IREP
            INFO(3,NHOLE,2)=ISPN
            ELSE IF(EVNOW.GT.FERMI.AND.EVNOW.LE.FERMI+EWIN)THEN
            NPART=NPART+1
            INFO(1,NPART,3)=ISAV
            INFO(2,NPART,3)=IREP
            INFO(3,NPART,3)=ISPN
            END IF
         DO 110 IB=1,NBAS
           PSI_COEF(IB,ISAV,IREP,ISPN)=HAM(IB,ISAV)
  110     CONTINUE
        END IF
  130   CONTINUE
C DETERMINE INTERESTING CONFIGURATIONS:               
         NCONF=0
       DO IH=1,NHOLE
        EVHL=EVLT(INFO(1,IH,2),INFO(2,IH,2),INFO(3,IH,2))
       DO IP=1,NPART
        EVPT=EVLT(INFO(1,IP,3),INFO(2,IP,3),INFO(3,IP,3))
        IF(EVPT-EVHL.LT.EWIN)THEN
        NCONF=NCONF+1
        PRINT 200,(INFO(J,IH,2),J=1,3),(INFO(J,IP,3),J=1,3),
     &EVHL,EVPT,EFERMI
        END IF
       END DO
       END DO
 200   FORMAT(' PT:',3I4,'HT:',3I4,3F12.4)
       RETURN
       END
