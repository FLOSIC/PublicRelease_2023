C ***************************************************************
C
       SUBROUTINE SICHAM(IFLO,MEQV,IFND)
C ORIGINAL VERSION BY MARK R PEDERSON (1988)
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       DIMENSION IFND(MX_GRP)
c  KAJ  get FLO info
c
       REAL*8 ::EC,DKF,ZET,DKS,RS,T,UU,VV,WW,ECRS,ECZET,ALFC
       COMMON/SPARSE/CNTFLO(3),ALPFLO(3),NANSWER
       COMMON/FORRx/NFLO,KSPX!!,TMAT(NDH,NDH,2)  !NEW COMMON BLOCK
       COMMON/SIC_ENERGY/SICENERGY
       COMMON/NEWTIMES/TMWRD,TMNRM,CLWRD,CLNRM
       COMMON/PTIME/TSETUP,TPOLYS,TFMTTM,TRUNIT,FLDNR,ASYMP,ACHRG
     &  ,ATIME,TWASTED,COSTPROJ
       PARAMETER (MXPR=MXPOISS)
       PARAMETER (MXLG=3)
       COMMON/TSTCHG/TOTCHG,COUSIC
       COMMON/COUPDATA/
     &  AIV(3,MXPR,MX_CNT+2,MXLG),AJV(3,MXPR,MX_CNT+2,MXLG)
     &  ,DMTV(10,10,MXPR,MX_CNT+2,MXLG),ALPIV(MXPR,MX_CNT+2,MXLG)
     &  ,ALPJV(MXPR,MX_CNT+2,MXLG),CENTER(3,MX_CNT+2)
     &  ,ADD(MAXUNSYM,MAXUNSYM,2),RVECI(3,MX_GRP),RVECJ(3,MX_GRP)
     &  ,NPAIRS(MX_CNT+2),IP(MX_CNT+2,MXLG)
       LOGICAL FIRST_ALPJ,CALLEDJ,NWRD,MWRD
       COMMON/TMP1/CMB    (MAX_PTS),RHOG(MAX_PTS,NVGRAD,MXSPN)
       COMMON/TMP4/POT    (MAX_PTS)!,RHOG(MAX_PTS,NVGRAD,MXSPN)
       DIMENSION VSIC(MAX_PTS)
       DIMENSION IBEG(3),IEND(3)
       DIMENSION AI(3),AJ(3)
       DIMENSION SS(10,10),DMAT(10,10,2),C(3)
       DIMENSION MAP(MX_GRP,MAX_OCC)
C KW   DIMENSION OG(MAX_PTS,100),MAP(MX_GRP,1000)
       DIMENSION PROIDT(MAX_PTS),PROEQV(MAX_PTS)
       DIMENSION NEEDED(MX_GRP)
       DATA IBEG,IEND/1,2,5,1,4,10/
       DATA ZED/1.0D-30/
       GAUSS_CUT=1.0D30
c
c  KAJ 9-10 GET MAP FROM MAPPER
c
       print *, 'before mapper NMSH', NMSH
       call gttime(tmapi)
CC       CALL MAPPER(MGRP,100,MEQV,IFND,MAP)
       call gttime(tmapo)
       print *, 'after mapper NMSH', NMSH,'TIME IN MAPPER',tmapo-tmapi
       call flush(6)
       LMSH=NMSH ! NUMBER OF POINTS IN THE FUNDAMENTAL WEDGE
                  NF1=1          
                  NF2=MEQV        
c      MGRP=0
                  NMSH_SAV=NMSH
C EVENTUALLY GENERATE 100 RANDOM POINTS IN RMSH, SET NMSH=100 AND RUN
C THE GROUP ASSIGNER:
C 
C DETERMINE NEEDED REPLICAS OF RMSH:
         IF(NMSH*NGRP.GT.MAX_PTS)THEN
         PRINT*,'MAX_PTS MUST BE >',NMSH*NGRP
         CALL STOPIT
         END IF
C!!!                  NMSH_SAV=NMSH
C!!!                  MMSH=NMSH
C!!!   C!!!               DO IMSH=1,NMSH
C!!!                  WMSH(IMSH)=WMSH(IMSH)/NGRP
C!!!                  END DO
C!!!                  DO IGP=2,NGRP 
C!!!                  DO IMSH=1,NMSH
C!!!                      MMSH=MMSH+1
C!!!                      WMSH(MMSH)=WMSH(IMSH)
C!!!                    DO J=1,3
C!!!                    RMSH(J,MMSH)=0.0D0
C!!!                    DO L=1,3
C!!!                    RMSH(J,MMSH)=RMSH(J,MMSH)+RMAT(J,L,IGP)*RMSH(L,IMSH)
C!!!                    END DO
C!!!                    END DO
C!!!                  END DO
C!!!                  END DO
C!!!                  NMSH=MMSH !TOTAL NUMBER OF POINTS
       if(meqv.gt.0) go to 137
                  PRINT*,'POINTS BEFORE FLONASE:',NMSH
C CHECK ORTHONORMALITY OF FLOS
C      MFLO=NFLO
C      NFLO=1
C      PRINT*,'ORTHOGONALITY CHECK'
C      CALL FLONASE(TIME1)
C      NFLO=MFLO
C      STOP
 610         FORMAT(4I5,G15.6)
 615         FORMAT('MAP IFLO:',I4,48I3)
C KAJ 9-10  after mapper
 137      continue
c  print MAP
c
          PRINT *, 'IN SICHAM  ALAN MGRP NMSH', MGRP, NMSH
          NFLO = -IFND(1)
     !!!!!  19/sep    CALL FLOMOMENT
C FIND NEEDED CELLS
          NCELL=0
          NEEDED=0
          DO JFLO=NF1,NF2
          IFLO=IFND(JFLO)
          PRINT 615,IFLO,(MAP(JGP,IFLO),JGP=1,NGRP),IFND(NF1)
          DO JGP=1,NGRP
          IMIN=1000
                DO ICELL=1,NCELL
                IMIN=MIN(ABS(MAP(JGP,IFLO)-NEEDED(ICELL)),IMIN)
                END DO
                IF(IMIN.NE.0)THEN
                NCELL=NCELL+1
                NEEDED(NCELL)=MAP(JGP,IFLO)
                END IF
          END DO
          END DO
                DO ICELL=1      ,NCELL
                DO JCELL=ICELL+1,NCELL
                IF(NEEDED(JCELL).LT.NEEDED(ICELL))THEN
                     NEEDED_SAV=NEEDED(JCELL)
                     NEEDED(JCELL)=NEEDED(ICELL)
                     NEEDED(ICELL)=NEEDED_SAV
                END IF
                END DO
                PRINT*,ICELL,NEEDED(ICELL),' CELLS FOR THIS ADVENTURE'
                END DO
       call flush(6)
C FIGURE OUT THE FUNDAMENTAL WEDGE FOR FLO IFLO:
       PRINT*,'NEED MGRP OPERATIONS TO COMPLETE TASKS:',NCELL
       PRINT '(A,I10)','NUMBER OF INEQUIVALENT POINTS IN VMESH: ',NMSH
       OPEN(32,FILE='MESH_UNSYM',FORM='UNFORMATTED')
       WRITE(32)NMSH
       WRITE(32)RMSH,WMSH
       CLOSE(32)
                  NMSH=0           
                  DO ICELL=1,NCELL
                   DO IMSH=1,LMSH
                     NMSH=NMSH+1
                     DO J=1,3
                     RMSH(J,NMSH)=RMSH(J,IMSH+(NEEDED(ICELL)-1)*LMSH )
                     END DO
                     WMSH(  NMSH)=WMSH(  IMSH+(NEEDED(ICELL)-1)*LMSH )
                   END DO
                  END DO
                  PRINT*,'POINTS REQUIRED 4 THIS SET OF FLOS:',NMSH
C PLACE POINTS FOR EACH CELL IN RMSH
       IF(NSPN*(MXPR/NSPN).NE.MXPR)THEN
        PRINT *,'MXPR MUST BE EVEN IN COUPOT1'
        CALL STOPIT
       END IF
               NFLO=-IFND(NF1) ! THIS WILL BE INFORMED FROM FRMORB
       TMWRD=0.0D0
       TMNRM=0.0D0
       IF (DEBUG) THEN
        PRINT *, 'GAUSS_CUT IN COUPOT'
        PRINT 9000,(GAUSS_CUT(IX),IX=1,MAX_IDENT)
 9000   FORMAT(4(1X,G15.8))
       END IF
       IZM=1                 
       IF(IZM.EQ.0)THEN      
       ELSE    
       RHOG=0.0D0
       CMB=0.0D0
       CALL CONDENSE(NSPN)
       IF(IZM.EQ.IZM) RETURN 
C      CALL COUPOT1
       CMB=CMB*(NSPN/2.0D0)
            CHARGE=0.0D0
            DO IMSH=1,NMSH
            CHARGE=CHARGE+RHOG(IMSH,1,1)*WMSH(IMSH)
            END DO
            PRINT*,'CHARGE_T ON FUNDAMENTAL WEDGE:',CHARGE,NMSH
       OPEN(32,FILE='MESH_UNSYM',FORM='UNFORMATTED')
       READ (32)NMSH
       READ (32)RMSH,WMSH
       CLOSE(32)
       DO ICELL=NCELL,1,-1
             PRINT*,'ICELL, NEEDED:',ICELL,NEEDED(ICELL)
       DO IMSH=1,LMSH
      CMB (IMSH+(NEEDED(ICELL)-1)*LMSH)    
     &         =CMB (IMSH+(ICELL-1)*LMSH)    
                IF(ICELL.LT.NEEDED(ICELL))THEN
                CMB (IMSH+(ICELL-1)*LMSH)=0.0D0
                END IF
         DO LSPN=1,NSPN
         DO IGRAD=1,NVGRAD
       RHOG(IMSH+(NEEDED(ICELL)-1)*LMSH,IGRAD,LSPN)
     &=RHOG(IMSH+(ICELL-1        )*LMSH,IGRAD,LSPN)
       IF(ICELL.LT.NEEDED(ICELL))THEN
       RHOG(IMSH+(ICELL-1        )*LMSH,IGRAD,LSPN)=0.0D0
       END IF
         END DO
         END DO
      END DO
      END DO
      DO IGP=1,NGRP     
      DO IMSH=1,LMSH
      CMB (IMSH+(IGP-1)          *LMSH           )=
     &CMB (IMSH+(MAP(IGP,IFND(1))-1)*LMSH           )
      DO LSPN=1,NSPN
      DO IGRAD=1,NVGRAD
      RHOG(IMSH+(IGP       -1)*LMSH,IGRAD,LSPN)=
     &RHOG(IMSH+(MAP(IGP,IFND(1))-1)*LMSH,IGRAD,LSPN) 
      END DO
      END DO
      END DO
      END DO
          JFLO=1
          IFLO=IFND(JFLO)
          IF(IFLO.EQ.1.AND.KSPX.EQ.1)TOT_CHG=0.0D0 !KW
          IF(IFLO.EQ.1.AND.KSPX.EQ.1)TOT_SIC=0.0D0 !KW          
          IF(JFLO.EQ.1)SIC_COU=0.0D0
          IF(JFLO.EQ.1)SIC_EXC=0.0D0
          IF(JFLO.EQ.1)ORB_SIC=0.0D0
          IF(JFLO.EQ.1)ORB_SCI=0.0D0
            CHARGE=0.0D0
            DESIC=0.0D0
            DVSIC=0.0D0 
            PI=4.0D0*ATAN(1.0D0)
            DO IMSH=1,LMSH*NGRP
            DN=RHOG(IMSH,1,KSPX)
            CHARGE=CHARGE+RHOG(IMSH,1,KSPX)*WMSH(IMSH)
             ZET=1.0D0
             DKF=(DN*3.0D0*PI**2)**(1./3.)
             DKS=SQRT(1.2732395447351627D0*DKF)
             RS=1.9191582926775128D0/DKF
             T=0.0D0
             UU=0.0D0
             VV=0.0D0
             WW=0.0D0
             VCUP=0.0D0
             VCDN=0.0D0
             EC=0.0D0
             VEX=0.0D0
             IF(DN.GT.1.0D-20)THEN        
             CALL PW91LC(RS,ZET,EC,VCUP,VCDN,ECRS,ECZET,ALFC)
              VEX=-(6.0D0*DN/PI)**(1./3.)
             END IF
            VSIC(IMSH)=-(CMB(IMSH)+VEX+VCUP)
            DVSIC=DVSIC+VSIC(IMSH)*DN*WMSH(IMSH)
            DESIC=DESIC-(0.5*CMB(IMSH)+0.75*VEX+EC)*DN*WMSH(IMSH)           
          SIC_COU=SIC_COU-0.5*CMB(IMSH)*DN*WMSH(IMSH)*(NF2-NF1+1)
          SIC_EXC=SIC_EXC-(0.75*VEX+EC)*DN*WMSH(IMSH)*(NF2-NF1+1)
            END DO
          ORB_SCI=DVSIC
          TOT_SIC=TOT_SIC+SIC_COU+SIC_EXC
          TOT_CHG=TOT_CHG+CHARGE*(NF2-NF1+1)
          PRINT 317,CHARGE,DVSIC,DESIC,TOT_CHG,TOT_SIC                                     
 317      FORMAT('THE TALLY:',10F15.6)
       END IF
       SICENERGY=TOT_SIC*(2/NSPN)
       CALL FLUSH(6)
                 PRINT*,'TOT_SIC AND SICENERGY:',SICENERGY
 50    FORMAT(' WEDGE NEW COUSIC:',2I8,8F15.6)
 52    FORMAT(' WEDGE TOT_SIC, CHRGE, IC_COU, SIC_EXC, ORB_SIC, ORBSCI')
C      END DO
C      PRINT 50,LMSH,IFLO,TOT_SIC,TOT_CHG,
C    &     SIC_COU,SIC_EXC,ORB_SIC,ORB_SCI
C      FF=27.2116
C      PRINT 51,LMSH,IFLO,ORB_SIC,ORB_SCI,ORB_SIC*FF,ORB_SCI*FF
C51    FORMAT(' ORBITAL ENERGY AND SHIFT:',2I8,8F15.6)
CCC END OF BUG
       RR_MAX=0.0D0
       PSIPSI_NUM=0.0D0
       ZERO=0.0D0
 20    FORMAT(10F12.5)
       PRINT*,'NMSH BEFORE FLONASE:',NMSH
               NFLO=-IFND(1)
       CALL FLONASE(TIME) ! RETRIEVE INEQUIVALENT FLO
       PRINT*,'NMSH AFTER  FLONASE:',NMSH
       PTT=0.0D0
       DO 150 IPTS=1,NMSH
       PSIPSI_NUM=PSIPSI_NUM+POT(IPTS)*POT(IPTS)*WMSH(IPTS)
 150   CONTINUE
       PRINT*,'PSI_NUM CAPTURE FROM FLONAS:',PSIPSI_NUM
C            PSIPSI_NUM=(PSIPSI_NUM*NGRP)/MGRP
C            CHARGE_NUM=(CHARGE_NUM*NGRP)/MGRP
       PRINT*,"TST: PSI/CHG (NUM):",(NMSH/LMSH),PSIPSI_NUM,CHARGE_NUM
       PRINT*,"TST: LONG  CHARGE IN SICHAM: ",CHARGE_LONG
       PRINT*,"TOTAL CHARGE IN SICHAM:      ",CHARGE
       CALL FLUSH(6)
           MM=1 !SIC Scissor
C            MM=2 !PRP JCP and Support of Multiplicative Hamiltonian
            IF(MM.EQ.1)ORB_SCI=SQRT(ABS(ORB_SCI))
            IF(MM.EQ.2)THEN
              ORB_SCI=1.0D0            
C             IF(NF2-NF1.NE.0)THEN
C             PRINT*,'COMPLETE VSIC MAPPING'
C              CALL STOPIT
C             END IF
            END IF
C NOTE THAT POT=FLO
       PRINT*,'NF1,NF2:',NF1,NF2,ORB_SCI,' SIC SHIFT'
C TEST DENSITY MATRIX
C                    ORB_SCI=1.0D0
C                    MM=1
C DONT FOR GET TO DELETE THE TWO LINES ABOVE HERE
       NWRK=NMSH
       DO JFLO=NF1,NF2
       DO IM=1,MM
       PROIDT=0.0D0
          DO IMSH=1,NWRK
          PROIDT(IMSH)=POT(IMSH)*WMSH(IMSH)*ORB_SCI !W(I)|FLO_I><FLO_I|VI|FLO_I>
          END DO
         IF(IM.EQ.2)THEN
          DO IMSH=1,NWRK
          PROIDT(IMSH)=-PROIDT(IMSH)*VSIC(IMSH) !To match sign convention in 
          END DO 
         END IF
             IFLO=IFND(JFLO)
                 PROEQV=0.0D0                          
                 DO JGP=1,NGRP   !MOST RECENT CHANGE
                 DO IMSH=1,LMSH         
                 PROEQV(IMSH+(JGP-1)          *LMSH)
     &                        =PROIDT(IMSH+(MAP(JGP,IFLO)-1)*LMSH)
                 END DO
                 END DO
          NMSH=NGRP*LMSH
                      II=IM
          CALL APATCH(II,MM,PROEQV)
       END DO
       END DO
       OPEN(60,FILE='VMOLD',FORM='UNFORMATTED')
       READ(60)NMSH
       READ(60)((RMSH(J,IMSH),J=1,3),IMSH=1,NMSH)
       READ(60) (WMSH(IMSH),IMSH=1,NMSH)
       CLOSE(60) 
C CALCULATE EXCHANGE CORRELATION POTENTIAL FOR ORBITAL
       CHARGE=CHARGE!*ISPFAC
       CHARGE_LONG=CHARGE_LONG!*ISPFAC
       IF(ABS(CHARGE_LR-CHARGE) .GT. 0.1D0)THEN
        PRINT *,'************** WARNING ****************'
        PRINT *,'CHARGE VIA ASYMPTOTIC FORMULA: ',CHARGE_LR
       END IF
       CALL GTTIME(TIME2)
       IF (DEBUG) THEN
        PRINT*,'TIME FOR COULOMB POTENTIAL,NMSH:',TIME2-TIME1,NMSH
        PRINT*,'POISSON DIAG: PT   :',TIMEP
        PRINT*,'POISSON DIAG: CT   :',TIME2-TIME1-TIMEP
        PRINT*,'POISSON DIAG, SETUP:',TSETUP
        PRINT*,'POISSON DIAG, POLYS:',TPOLYS
        PRINT*,'POISSON DIAG, FMTTM:',TFMTTM
        PRINT*,'POISSON DIAG, RUNIT:',TRUNIT
        PRINT*,'POISSON DIAG, ATIME:',ATIME
        PRINT*,'POISSON DIAG, WASTED:',TWASTED
        PRINT*,'POISSON DIAG, FLDNR:',FLDNR,FLDNR/(FLDNR+ASYMP+0.001D0)
        PRINT*,'POISSON DIAG, ASYMP:',ASYMP,ASYMP/(FLDNR+ASYMP+0.001D0)
        PRINT*,'POISSON DIAG, ACHRG:',ACHRG,CHARGE_LONG
        PRINT*,'POISSON DIAG, PRTME:',COSTPROJ
        PRINT 997,TMWRD,TMNRM,CLWRD,CLNRM,
     &            TMWRD/(CLWRD+0.001D0),TMNRM/(CLNRM+0.001D0)
        DO ICNT=1,MCNT+1
         PRINT 998,(CENTER(J,ICNT),J=1,3),NPAIRS(ICNT),NCALL,MCALL
        END DO
       END IF
 998   FORMAT(' POISSON:',3(1X,G18.6)/9X,3(1X,I18))
 997   FORMAT(' NEW TIMES:',6G12.4)
       PRINT *,'MADE IT END' 
       RETURN   
       END
C
