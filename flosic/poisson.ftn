C
       SUBROUTINE POISSON2(NWRD,NPAIR,ND,MD,ALPHAV,A,BETAV,B,RHO)
C WRITTEN BY MARK R. PEDERSON 1996
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       PARAMETER (MXPR=MXPOISS)
       COMMON/NEWTIMES/TMWRD,TMNRM,CLWRD,CLNRM
       LOGICAL NWRD
       DIMENSION ALPHAV(MXPR),BETAV(MXPR)
       DIMENSION A(3,MXPR),B(3,MXPR)
       DIMENSION RHO(10,10,MXPR)
       IF(NWRD)THEN
        CALL GTTIME(TIME1)
        DO IP=1,NPAIR,NSPN
         CALL POISSON1(NSPN,ND,MD,ALPHAV(IP),A(1,IP),BETAV(IP),B(1,IP),
     &                 RHO(1,1,IP))
        END DO
        CALL GTTIME(TIME2)
        TMWRD=TMWRD+TIME2-TIME1
        CLWRD=CLWRD+NPAIR
       ELSE
        CALL GTTIME(TIME1)
        CALL POISSON1(NPAIR,ND,MD,ALPHAV,A,BETAV,B,RHO)
        CALL GTTIME(TIME2)
        CLNRM=CLNRM+NPAIR
        TMNRM=TMNRM+TIME2-TIME1
       END IF
       RETURN
       END 
C
C DIRECTIONS FOR USE:
C
C IF YOU ARE SUSPICIOUS OF A BUG:
C (1)Check if Answer is converged as a function of EPSILON in POISSON1
C (2)Check if Answer is converged as a function of THIRTYSOMETHING
C (3)Compare to exact answer that can be obtained by setting
C
C     EPSILON=0.0 THIRTYSOMETHING=1.0D30
C
C IF YOU CONFIRM THE EXISTENCE OF A BUG, PLEASE FIND IT :-)
C AND NOTIFY MARK PEDERSON. THANKS.
C
       SUBROUTINE POISSON1(NPAIR,ND,MD,ALPHAV,A,BETAV,B,RHO)
C ORIGINAL VERSION BY MARK R PEDERSON 4-July 1988
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       CHARACTER*6 FLAG
       LOGICAL GGA
c
c lm is the maximum value of l
c NOTE: lm must be >= 5 for poly to be dimensioned big enough
c
       PARAMETER (LM=06)
       PARAMETER (LMX=3*LM)
       PARAMETER (MXPR=MXPOISS)
       PARAMETER (MAX_ANG=((LMX+1)*(LMX+2))/2)
       PARAMETER (MPX=MAX_ANG)
       LOGICAL SKIP((LM+1)**2)
       LOGICAL FIRST
       LOGICAL CALC(35),SSCL(5)
C
C USE MIXPOT AS TEMPORARY STORAGE 
C
       COMMON/MIXPOT/POTNL(MAX_PTS),IPTR(MAX_PTS),JPTR(MAX_PTS)
       COMMON/TMP1/COULOMB(MAX_PTS),RHOG(MAX_PTS,NVGRAD,MXSPN)
       COMMON/PTIME/TSETUP,TPOLYS,TFMTTM,TRUNIT,FLDNR,ASYMP,ACHRG
     &  ,ATIME,TWASTED,COSTPROJ 
C
       DIMENSION RHOC(35,MXPR,MXSPN),RHOD(20,10,MXPR,MXSPN)
       DIMENSION AA(5,5,3,3,3),BB(5,5,5,5)
       DIMENSION CGRAVITY(4),W4(10,10,4)
       DIMENSION ALPHAV(MXPR),BETAV(MXPR),DELT(MXPR)
       DIMENSION A(3,MXPR),B(3,MXPR),C(3,MXPR),A0(3),B0(3),CCC(3)
       DIMENSION RHO(10,10,MXPR)
       DIMENSION RMOMENT((LM+1)**2)
       DIMENSION COEFICIENT(60,MXPR),DLT(MXPR)
       DIMENSION RHOP(3,3,3,3,3,3),ERP(MPX,5),ADDP(MPX),ADDR(MPX,20)
       DIMENSION CHGD(MPX)
       DIMENSION SSS(MAX_ANG,5),XX(MPX),POLY(MPX,(LM+1)**2)
       DIMENSION ANG(3,MAX_ANG),ASYMPTOT(MAX_ANG),Q(3,3*MAX_ANG)
       DIMENSION RECIP(3*MAX_ANG,0:LM),RECIPR(0:LM),RTEST(0:LM)
       DIMENSION DOMEGA(MAX_ANG),POTLR(MPX)
       DIMENSION TF(5),TB(5),FMB(5)
       DATA PI  /3.141592653589793D0/
       DATA PI2 /6.283185307179586D0/
       DATA PI4/12.566370614359172D0/
       DATA DELTA_MIN/2.0D0/
       DATA TOLER/1.0D-5/
C
C FOR USUAL CALCULATIONS (ANALYTICAL AND NUMERICAL SOLUTION)
C EPSILON MUST BE ZERO TO BE ON THE SAFE SIDE
C
       DATA THIRTYSOMETHING/45.0D0/
C        DATA THIRTYSOMETHING/30.0D0/
       DATA EPSMULTI/1.0D-6/
c      DATA THIRTYSOMETHING/20.0D0/
       DATA EPSILON/0.0D0/
C
C FORCE EVERYTHING TO BE DONE ANALYTICALLY 
C
c      DATA THIRTYSOMETHING/1.0D30/
c      DATA EPSILON/0.0D0/
C
       DATA FIRST/.TRUE./

       IF (LM .LT. 5) THEN
        PRINT *,'POISSON: LM MUST BE >= 5'
        CALL STOPIT
       END IF
       GGA=.FALSE.
       TIMGGA=0.0D0
       TIMGGN=0.0D0
       IF(IGGA(1).GT.0.OR.IGGA(2).GT.0)GGA=.TRUE.
C
C POREZAG 9/94 
C ALL ELEMENTS OF AA THAT ARE CONSTANTS NEED TO BE SET UP
C ONLY ONCE
C
       DO 760 LL=1,3
        DO 755 MM=1,3
         DO 750 NX=1,3
          DO 745 NY=1,5
           DO 740 NZ=1,5
            AA(NZ,NY,NX,MM,LL)=0.0D0
  740      CONTINUE
  745     CONTINUE
  750    CONTINUE
  755   CONTINUE
        AA(1,1,1,1,LL)=1.0D0
        AA(2,2,1,2,LL)=1.0D0
        AA(3,3,1,3,LL)=1.0D0
        AA(2,2,2,1,LL)=1.0D0
        AA(3,3,2,2,LL)=1.0D0
        AA(4,4,2,3,LL)=1.0D0
        AA(3,3,3,1,LL)=1.0D0
        AA(4,4,3,2,LL)=1.0D0
        AA(5,5,3,3,LL)=1.0D0
  760  CONTINUE
C
C IF DEBUG=.TRUE. , CHECK ASYMPTOTIC FORM OF POTENTIAL WITH ANALYTICAL FORM
C BOUNDS ON THE INCOMPLETE GAMMA FUNCTION:
C
       TF(1)=0.5D0*SQRT(PI)
       TF(2)=TF(1)*0.5D0
       TF(3)=TF(2)*1.5D0
       TF(4)=TF(3)*2.5D0
       TF(5)=TF(4)*3.5D0
       TB(1)=(TF(1)*(2*0+1))**(1.0D0/0.5D0)
       TB(2)=(TF(2)*(2*1+1))**(1.0D0/1.5D0)
       TB(3)=(TF(3)*(2*2+1))**(1.0D0/2.5D0)
       TB(4)=(TF(4)*(2*3+1))**(1.0D0/3.5D0)
       TB(5)=(TF(5)*(2*4+1))**(1.0D0/4.5D0)
C
C FOR T>TB(I) FM(T) < TF(I)/T**(M+0.5)
C FOR T<TB(I) FM(T) < 1/(2M+1)
C
       TDIFF=0.0D0
       DIFF_MAX=0.0D0
       IF(FIRST)THEN
        FIRST=.FALSE.
        IF(DEBUG)THEN
         OPEN(73,FILE='DEBUG',FORM='FORMATTED',STATUS='UNKNOWN') 
         REWIND(73)
        END IF
        LMAX=LMX
        CALL ANGMSH(MAX_ANG,LMAX,NANG,ANG,DOMEGA)
        IF(NANG.GT.MAX_ANG)THEN
         PRINT *,'POISSON: MAX_ANG MUST BE AT LEAST: ',NANG
         CALL STOPIT
        END IF
c 
c coordinates in ang are already normalized for harmonics routine
c
        CALL HARMONICS(MPX,NANG,LM,ANG,POLY,NPOLY)
        ERROR=0.0D0
c 
c no longer need to calculate RNORM but still check for ERROR 
c
        DO I=1,(LM+1)**2
         DO J=I,(LM+1)**2
          SSSS=0.0D0
          DO IANG=1,NANG
           SSSS=SSSS+POLY(IANG,I)*POLY(IANG,J)*DOMEGA(IANG)
          END DO
          IF(I.NE.J)THEN
           ERROR=MAX(ERROR,ABS(SSSS))
           IF(DEBUG.AND.(ABS(SSSS).GT.TOLER))PRINT *,I,J,SSSS
          ELSE
           IF (DEBUG) PRINT *,I,J,SSSS
c          RNORM(I)=1.0D0/SSSS
          END IF
         END DO
        END DO
        IF(DEBUG)THEN
          SOLANG=0.0D0
          DO IANG=1,NANG
            SOLANG=SOLANG+DOMEGA(IANG)
          END DO
          PRINT *,'SOLANG= ',SOLANG
        END IF
        IF (ERROR.GT.TOLER) THEN
         PRINT *,'POISSON: SPHERICAL HARMONICS TEST FAILED'
         CALL STOPIT
        END IF
       END IF
C
       IF(NMSH.LE.0)THEN
         PRINT*,'POISSON: NMSH IS <= ZERO'
         CALL STOPIT
       END IF
       IF(NMSH.GT.MAX_PTS)THEN
         PRINT*,'POISSON: MAX_PTS MUST BE AT LEAST:',NMSH
         CALL STOPIT
       END IF
       IF(NPAIR.GT.MXPR)THEN
         PRINT *,'POISSON: MXPR MUST BE AT LEAST: ',NPAIR
         CALL STOPIT
       END IF
       CALL GTTIME(TIME1)
       NP=2
       IF(ND.LT.5)NP=1
       IF(ND.LT.2)NP=0
       MP=2
       IF(MD.LT.5)MP=1
       IF(MD.LT.2)MP=0
C
C MAXIMUM DEGREE OF POLYNOMIAL:
C
       NP_TOT=NP+MP
       NPTP1=NP_TOT+1
       NPTP2=NP_TOT+2
       NPTP3=NP_TOT+3
       DELTA_MIN=1.0D30
       CGRAVITY(1)=0.0D0
       CGRAVITY(2)=0.0D0
       CGRAVITY(3)=0.0D0
       CGRAVITY(4)=0.0D0
       DO 200 IP=1,NPAIR,NSPN
        ALPHA=ALPHAV(IP)
        BETA =BETAV (IP)
        IF(MODDEN.EQ.1)THEN
         CALL GTTIME(TMGG1)
         DO ISPN=1,NSPN
           CALL GTDNCF(GGA,ALPHA,A(1,IP),BETA,B(1,IP)
     &                 ,RHO(1,1,IP+ISPN-1),RHOC(1,IP,ISPN)
     &                 ,RHOD(1,1,IP,ISPN),DLT(IP),CCC)
         END DO
         CALL GTTIME(TMGG2)
         TIMGGA=TIMGGA+TMGG2-TMGG1
        END IF
        DO I=1,10
         DO J=1,10
          RHO(J,I,IP)=RHO(J,I,IP)+RHO(J,I,IP+NSPN-1)
         END DO
        END DO
        IF(NPAIR.NE.1)THEN
         CALL GTTIME(GT1)
         CALL GINTED(ALPHA,BETA,A(1,IP),B(1,IP),W4)
         DO IC=1,4
          CGRTEMP=0.0D0
          DO J=1,10
           DO I=1,10
            CGRTEMP=CGRTEMP+W4(I,J,IC)*RHO(I,J,IP)
           END DO
          END DO
          CGRAVITY(IC)=CGRAVITY(IC)+CGRTEMP
         END DO
         CALL GTTIME(GT2)
        END IF
        IF((ALPHA .LT. 0.0D0).OR.(BETA .LT. 0.0D0))THEN
         PRINT *,'POISSON: ALPHA OR BETA < 0'
         CALL STOPIT
        END IF
        DELTA=ALPHA+BETA
        IF(DELTA.LT.DELTA_MIN)DELTA_MIN=DELTA
        RCDELT=1.0D0/DELTA
        ARG=ALPHA*BETA*RCDELT*((A(1,IP)-B(1,IP))**2
     &     +(A(2,IP)-B(2,IP))**2+(A(3,IP)-B(3,IP))**2)
        FACTOR=PI2*EXP(-ARG)*RCDELT
C
C DVP: FIX G77 PROBLEM (PROGRAM WOULD STOP DUE TO TINY INACCURACY)
C
C       IF (EXARG .GT. 1.0D0)THEN
C        PRINT *,'POISSON: FACTOR TOO LARGE: ',FACTOR,ARG,
C        CALL STOPIT
C       END IF
C
        DO 15 I=1,3
         C(I,IP)=(ALPHA*A(I,IP)+BETA*B(I,IP))*RCDELT
         A0(I)=A(I,IP)-C(I,IP)
         B0(I)=B(I,IP)-C(I,IP)
   15   CONTINUE
C
C MOVE RHO TO RHOP:
C
        DO I1=1,3
         DO J1=1,3
          DO K1=1,3
           DO L1=1,3
            DO M1=1,3
             DO N1=1,3
              RHOP(N1,M1,L1,K1,J1,I1)=0.0D0
             END DO
            END DO
           END DO
          END DO
         END DO
        END DO
C
        DO NXX=0,NP
         DO NYY=0,NP-NXX
          DO NZZ=0,NP-NXX-NYY
           NI=1+NXX*(NXX+4*NYY)+4*NZZ*(NXX+NYY)+3*NZZ
           NI=NI+(NYY*(NYY+3))/2
           N1=NXX+1
           N2=NYY+1
           N3=NZZ+1
           DO MXX=0,MP
            DO MYY=0,MP-MXX
             DO MZZ=0,MP-MXX-MYY
              MI=1+MXX*(MXX+4*MYY)+4*MZZ*(MXX+MYY)+3*MZZ
              MI=MI+(MYY*(MYY+3))/2
              M1=MXX+1
              M2=MYY+1
              M3=MZZ+1
              RHOP(M3,N3,M2,N2,M1,N1)=RHO(NI,MI,IP)
             END DO
            END DO
           END DO
          END DO
         END DO
        END DO
C
        DO MM=1,5
         DO NX=1,5
          DO NY=1,5
           DO NZ=1,5
            BB(NZ,NY,NX,MM)=0.0D0
           END DO
          END DO
         END DO
        END DO
C
        DO 10 I=1,3
         CALL POLYX(A0(I),B0(I),DELTA,AA(1,1,1,1,I))
   10   CONTINUE
        NPP1=NP+1
        NPP2=NP+2
        NPP3=NP+3
        MPP1=MP+1
        MPP2=MP+2
        MPP3=MP+3
        CALL GTTIME(GT3)
        DO 85 M1=1,MPP1
        DO 85 N1=1,NPP1
        DO 85 NX=1,NPTP1
         DO 80 MX=NX,NPTP1
          IF(AA(NX,MX,N1,M1,1).EQ.0.0D0)GO TO 79
          DO 75 M2=1,MPP2-M1
          DO 75 N2=1,NPP2-N1
          DO 75 NY=1,NPTP2-NX
           DO 70 MY=NY,NPTP2-MX
            IF(AA(NY,MY,N2,M2,2).EQ.0.0D0)GO TO 69
            PXY=AA(NX,MX,N1,M1,1)*AA(NY,MY,N2,M2,2)
            DO 65 M3=1,MPP3-M1-M2
             DO 60 N3=1,NPP3-N1-N2
              FACTOR1=RHOP(M3,N3,M2,N2,M1,N1)*PXY
              IF(FACTOR1.EQ.0.0D0)GO TO 59
              DO 55 NZ=1,NPTP3-NX-NY
               MM=MX+MY-2
               DO 50 MZ=NZ,NPTP3-MX-MY
                BB(MM+MZ,NX,NY,NZ)=BB(MM+MZ,NX,NY,NZ)
     &                            +FACTOR1*AA(NZ,MZ,N3,M3,3)
   50          CONTINUE
   55         CONTINUE
   59         CONTINUE
   60        CONTINUE
   65       CONTINUE
   69       CONTINUE
   70      CONTINUE
   75     CONTINUE
   79     CONTINUE
   80    CONTINUE
   85   CONTINUE
        CALL GTTIME(GT4)
        TWASTED=TWASTED+GT4-GT3
        DO 86 I=1,46
         COEFICIENT(I,IP)=0.0D0
   86   CONTINUE
C
C POLYNOMIALS OF DEGREE:  0
C
        COEFICIENT(  1,IP)= BB( 1, 1, 1, 1)
        COEFICIENT(  2,IP)= BB( 2, 1, 1, 1)
        COEFICIENT(  3,IP)= BB( 3, 1, 1, 1)
        MAXN=3
        IF(NP_TOT.GE.1)THEN
C
C POLYNOMIALS OF DEGREE 1
C
         COEFICIENT(  4,IP)= BB( 2, 1, 1, 2)
         COEFICIENT(  5,IP)= BB( 2, 1, 2, 1)
         COEFICIENT(  6,IP)= BB( 2, 2, 1, 1)
         COEFICIENT(  7,IP)= BB( 3, 1, 1, 2)
         COEFICIENT(  8,IP)= BB( 3, 1, 2, 1)
         COEFICIENT(  9,IP)= BB( 3, 2, 1, 1)
         MAXN=9
        END IF
        IF(NP_TOT.GE.2)THEN
C
C POLYNOMIALS OF DEGREE:  2
C
         COEFICIENT( 10,IP)= BB( 3, 1, 1, 3)
         COEFICIENT( 11,IP)= BB( 3, 1, 2, 2)
         COEFICIENT( 12,IP)= BB( 3, 1, 3, 1)
         COEFICIENT( 13,IP)= BB( 3, 2, 1, 2)
         COEFICIENT( 14,IP)= BB( 3, 2, 2, 1)
         COEFICIENT( 15,IP)= BB( 3, 3, 1, 1)
         COEFICIENT( 16,IP)= BB( 4, 1, 1, 3)
         COEFICIENT( 17,IP)= BB( 4, 1, 2, 2)
         COEFICIENT( 18,IP)= BB( 4, 1, 3, 1)
         COEFICIENT( 19,IP)= BB( 4, 2, 1, 2)
         COEFICIENT( 20,IP)= BB( 4, 2, 2, 1)
         COEFICIENT( 21,IP)= BB( 4, 3, 1, 1)
         MAXN=21
        END IF
        IF(NP_TOT.GE.3)THEN
C
C POLYNOMIALS OF DEGREE:  3
C
         COEFICIENT( 22,IP)= BB( 4, 1, 1, 4)
         COEFICIENT( 23,IP)= BB( 4, 1, 2, 3)
         COEFICIENT( 24,IP)= BB( 4, 1, 3, 2)
         COEFICIENT( 25,IP)= BB( 4, 1, 4, 1)
         COEFICIENT( 26,IP)= BB( 4, 2, 1, 3)
         COEFICIENT( 27,IP)= BB( 4, 2, 2, 2)
         COEFICIENT( 28,IP)= BB( 4, 2, 3, 1)
         COEFICIENT( 29,IP)= BB( 4, 3, 1, 2)
         COEFICIENT( 30,IP)= BB( 4, 3, 2, 1)
         COEFICIENT( 31,IP)= BB( 4, 4, 1, 1)
         MAXN=31
        END IF
        IF(NP_TOT.GE.4)THEN
C
C POLYNOMIALS OF DEGREE:  4
C
         COEFICIENT( 32,IP)= BB( 5, 1, 1, 5)
         COEFICIENT( 33,IP)= BB( 5, 1, 2, 4)
         COEFICIENT( 34,IP)= BB( 5, 1, 3, 3)
         COEFICIENT( 35,IP)= BB( 5, 1, 4, 2)
         COEFICIENT( 36,IP)= BB( 5, 1, 5, 1)
         COEFICIENT( 37,IP)= BB( 5, 2, 1, 4)
         COEFICIENT( 38,IP)= BB( 5, 2, 2, 3)
         COEFICIENT( 39,IP)= BB( 5, 2, 3, 2)
         COEFICIENT( 40,IP)= BB( 5, 2, 4, 1)
         COEFICIENT( 41,IP)= BB( 5, 3, 1, 3)
         COEFICIENT( 42,IP)= BB( 5, 3, 2, 2)
         COEFICIENT( 43,IP)= BB( 5, 3, 3, 1)
         COEFICIENT( 44,IP)= BB( 5, 4, 1, 2)
         COEFICIENT( 45,IP)= BB( 5, 4, 2, 1)
         COEFICIENT( 46,IP)= BB( 5, 5, 1, 1)
         MAXN=46
        END IF
        DO 40 I=1, MAXN
         COEFICIENT(I,IP)=FACTOR*COEFICIENT(I,IP)
   40   CONTINUE
        DELT(IP)=DELTA
        C(1,IP)=-C(1,IP)
        C(2,IP)=-C(2,IP)
        C(3,IP)=-C(3,IP)
  200  CONTINUE
C
       IF(CGRAVITY(4).NE.0.0D0.AND.NPAIR.GT.1)THEN
        CGRAVITY(1)=CGRAVITY(1)/CGRAVITY(4)
        CGRAVITY(2)=CGRAVITY(2)/CGRAVITY(4)
        CGRAVITY(3)=CGRAVITY(3)/CGRAVITY(4)
       ELSE
        DO IX=1,3
         CGRAVITY(IX)=0.0D0
        END DO
        DO IP=1,NPAIR,NSPN
         DO IX=1,3
          CGRAVITY(IX)=CGRAVITY(IX)-C(IX,IP)
         END DO
        END DO
        DO IX=1,3
         CGRAVITY(IX)=(NSPN*CGRAVITY(IX))/NPAIR
        END DO
       END IF
C
       DMAX=0.0D0 
       DO IP=1,NPAIR,NSPN
        DIST=SQRT((CGRAVITY(1)+C(1,IP))**2+
     &            (CGRAVITY(2)+C(2,IP))**2+
     &            (CGRAVITY(3)+C(3,IP))**2)
        IF(DIST.GT.DMAX)DMAX=DIST
       END DO
       RCUT=SQRT(THIRTYSOMETHING/DELTA_MIN)+DMAX
C
C MODIFIED WAY TO DETERMINE RCUT INTRODUCED BY DVP 05/98
C
       PIRC=1.0D0/(4*ATAN(1.0D0))
       FACT=SQRT(PIRC/(PIRC+LM+1))
       DIST=2*DMAX/(EPSMULTI/FACT)**(1.0D0/(LM+1))
       RCUT=MAX(RCUT,DIST)
C
       DO IANG=1,NANG
        ASYMPTOT(IANG)=0.0D0
        Q(1,IANG)=CGRAVITY(1)+ANG(1,IANG)*RCUT
        Q(2,IANG)=CGRAVITY(2)+ANG(2,IANG)*RCUT
        Q(3,IANG)=CGRAVITY(3)+ANG(3,IANG)*RCUT
       END DO
       CGRAVITY(1)=-CGRAVITY(1)
       CGRAVITY(2)=-CGRAVITY(2)
       CGRAVITY(3)=-CGRAVITY(3)
       RCUTSQ=RCUT*RCUT
C
C FIND NUMBER OF POINTS THAT ARE IN THE ASYMPTOTIC REGION:
C
       MPTS_CLS=0
       MPTS_FAR=0
       CALL GTTIME(WT1)
       DO IPTS=1,NMSH
        RSQR= (RMSH(1,IPTS)+CGRAVITY(1))**2+
     &        (RMSH(2,IPTS)+CGRAVITY(2))**2+
     &        (RMSH(3,IPTS)+CGRAVITY(3))**2
        IF(RSQR.GT.RCUTSQ)THEN
         MPTS_FAR=MPTS_FAR+1
         IPTR(MPTS_FAR)=IPTS
        ELSE
         MPTS_CLS=MPTS_CLS+1
         JPTR(MPTS_CLS)=IPTS
        END IF
       END DO
       CALL GTTIME(WT2)
       NPOT=2
C
C      PROJECTED COSTS:
C
       COST1=1.36D0*(MPTS_CLS+NANG)*NPAIR + 0.99D0*MPTS_FAR
       COST2=1.36D0*(MPTS_FAR+MPTS_CLS)*NPAIR
       IF(COST2.LT.COST1)THEN
        COST1=COST2
        NPOT=1
        MPTS_FAR=0
        MPTS_CLS=NMSH
        DO IPTS=1,NMSH
         JPTR(IPTS)=IPTS
        END DO
        FLDNR=FLDNR-0.001D0*NANG*NPAIR
       END IF
       ASYMP=ASYMP+0.001D0*MPTS_FAR
       FLDNR=FLDNR+0.001D0*(MPTS_CLS+NANG)*NPAIR
       COSTPROJ=COSTPROJ+COST1*1.0D-6
       CALL GTTIME(TIME2)
       TSETUP=TSETUP+TIME2-TIME1
C
C END OF SETTING UP:
C
       DO 600 IPOT=1,NPOT
        CALL GTTIME(TPOT)
        IF(IPOT.EQ.1)THEN
         IF(DEBUG)THEN
          NPTS=NMSH
         ELSE
          NPTS=MPTS_CLS
         END IF
        ELSE
         NPTS=NANG  
        END IF
        IF(IPOT.EQ.1)THEN
         DO IPTS=1,NPTS
          POTNL(IPTS)=0.0D0
C         CHGDN(IPTS)=0.0D0
         END DO
        END IF
C
        LPTS_BEG=0
 250    CONTINUE
        NPX=MIN(MPX,NPTS-LPTS_BEG)
        DO 550 IP=1,NPAIR,NSPN
         CALL GTTIME(TIME1)
         IF(IPOT.EQ.1)THEN
          IF(DEBUG)THEN
           DO 398 IPTS=1,NPX
            POLY(IPTS,4)=RMSH(1,LPTS_BEG+IPTS)+C(1,IP)
            POLY(IPTS,3)=RMSH(2,LPTS_BEG+IPTS)+C(2,IP)
            POLY(IPTS,2)=RMSH(3,LPTS_BEG+IPTS)+C(3,IP)
            POLY(IPTS,1)=1.0D0
 398       CONTINUE
          ELSE
           DO 399 IPTS=1,NPX
            POLY(IPTS,4)=RMSH(1,JPTR(LPTS_BEG+IPTS))+C(1,IP)
            POLY(IPTS,3)=RMSH(2,JPTR(LPTS_BEG+IPTS))+C(2,IP)
            POLY(IPTS,2)=RMSH(3,JPTR(LPTS_BEG+IPTS))+C(3,IP)
            POLY(IPTS,1)=1.0D0
 399       CONTINUE
          END IF
         ELSE
          DO 400 IPTS=1,NPX
           POLY(IPTS,4)=Q(1,LPTS_BEG+IPTS)+C(1,IP)
           POLY(IPTS,3)=Q(2,LPTS_BEG+IPTS)+C(2,IP)
           POLY(IPTS,2)=Q(3,LPTS_BEG+IPTS)+C(3,IP)
           POLY(IPTS,1)=1.0D0
 400      CONTINUE
         END IF
         DO 406 IPTS=1,NPX
          POLY(IPTS,5)=POLY(IPTS,2)**2
          POLY(IPTS,7)=POLY(IPTS,3)**2
          POLY(IPTS,10)=POLY(IPTS,4)**2
 406     CONTINUE
         TMAX=0.0D0 
         DO 432 IPTS=1,NPX
          XX(IPTS)=DELT(IP)*(POLY(IPTS,5)+POLY(IPTS,7)+POLY(IPTS,10))
          TMAX=MAX(TMAX,XX(IPTS))
 432     CONTINUE
        DO IPTS=1,NPX
          CHGD(IPTS)=EXP(-XX(IPTS))
        END DO
         RMAX1=TMAX/DELT(IP)
         RMAX2=RMAX1*RMAX1
         RMAX3=RMAX1*RMAX2
         RMAX4=RMAX2*RMAX2
         FMB(1)=SQRT(TMAX)
         FMB(2)=FMB(1)*TMAX
         FMB(3)=FMB(2)*TMAX
         FMB(4)=FMB(3)*TMAX
         FMB(5)=FMB(4)*TMAX
         DO M=0,4
          IF(TMAX.GT.TB(M+1))THEN
           FMB(M+1)=TF(M+1)/FMB(M+1)
          ELSE
           FMB(M+1)=1.0D0/(2.0D0*M+1.0D0)
          END IF
         END DO
         DO I=1,10
          CALC(I)=.TRUE.
         END DO
C
C OLD VERSION BELOW HAS BEEN REPLACED BY CALC(I)=.TRUE.
C
C        DO I=11,35
C         CALC(I)=.FALSE.
C        END DO
         DO I=11,35
          CALC(I)=.TRUE.
         END DO
         SSCL(1)=.TRUE.
         SSCL(2)=.TRUE.
         DO I=3,5
          SSCL(I)=.FALSE.
         END DO
         DO I=2,4 
          IF(ABS(COEFICIENT(I+5,IP)*RMAX1*FMB(3)).GT.EPSILON)THEN
           SSCL(3)=.TRUE.
          END IF
         END DO
         DO I=5,10
          IF(ABS(COEFICIENT(I+5,IP)*RMAX2*FMB(3)).GT.EPSILON)THEN
           SSCL(3)=.TRUE.
          END IF
         END DO   
         DO I=5,10
          IF(ABS(COEFICIENT(I+11,IP)*RMAX2*FMB(4)).GT.EPSILON)THEN
           SSCL(4)=.TRUE.
          END IF
         END DO
         DO I=11,20
          IF(ABS(COEFICIENT(I+11,IP)*RMAX3*FMB(4)).GT.EPSILON)THEN
           CALC(I)=.TRUE.
           SSCL(4)=.TRUE.
          END IF
         END DO   
         DO I=21,35
          IF(ABS(COEFICIENT(I+11,IP)*RMAX4*FMB(5)).GT.EPSILON)THEN
           CALC(I)=.TRUE.
           SSCL(5)=.TRUE.
          END IF
         END DO
         MAXFMT=3
         IF(SSCL(4))MAXFMT=4
         IF(SSCL(5))MAXFMT=5
         IF(NP_TOT.GT.1)THEN
          DO 402 IPTS=1,NPX
           POLY(IPTS,6)=POLY(IPTS,3)*POLY(IPTS,2)
           POLY(IPTS,8)=POLY(IPTS,4)*POLY(IPTS,2)
           POLY(IPTS,9)=POLY(IPTS,4)*POLY(IPTS,3)
 402      CONTINUE
         END IF
         IF(NP_TOT.GT.2)THEN
          IF(CALC(11))THEN
           DO 407 IPTS=1,NPX
            POLY(IPTS,11)=POLY(IPTS,2)*POLY(IPTS,5)
 407       CONTINUE
          END IF
          IF(CALC(12))THEN
           DO 408 IPTS=1,NPX
            POLY(IPTS,12)=POLY(IPTS,3)*POLY(IPTS,5)
 408       CONTINUE
          END IF
          IF(CALC(13))THEN
           DO 409 IPTS=1,NPX
            POLY(IPTS,13)=POLY(IPTS,2)*POLY(IPTS,7)
 409       CONTINUE
          END IF
          IF(CALC(14))THEN
           DO 410 IPTS=1,NPX
            POLY(IPTS,14)=POLY(IPTS,3)*POLY(IPTS,7)
 410       CONTINUE
          END IF
          IF(CALC(15))THEN
           DO 411 IPTS=1,NPX
            POLY(IPTS,15)=POLY(IPTS,4)*POLY(IPTS,5)
 411       CONTINUE
          END IF
          IF(CALC(16))THEN
           DO 412 IPTS=1,NPX
            POLY(IPTS,16)=POLY(IPTS,4)*POLY(IPTS,6)
 412       CONTINUE
          END IF
          IF(CALC(17))THEN
           DO 413 IPTS=1,NPX
            POLY(IPTS,17)=POLY(IPTS,4)*POLY(IPTS,7)
 413       CONTINUE
          END IF
          IF(CALC(18))THEN
           DO 414 IPTS=1,NPX
            POLY(IPTS,18)=POLY(IPTS,2)*POLY(IPTS,10)
 414       CONTINUE
          END IF
          IF(CALC(19))THEN
           DO 415 IPTS=1,NPX
            POLY(IPTS,19)=POLY(IPTS,3)*POLY(IPTS,10)
 415       CONTINUE
          END IF
          IF(CALC(20))THEN
           DO 416 IPTS=1,NPX
            POLY(IPTS,20)=POLY(IPTS,4)*POLY(IPTS,10)
 416       CONTINUE
          END IF
         END IF
         IF(NP_TOT.GT.3)THEN
          IF(CALC(21))THEN
           DO 417 IPTS=1,NPX
            POLY(IPTS,21)=POLY(IPTS,5)**2
 417       CONTINUE
          END IF
          IF(CALC(22))THEN
           DO 420 IPTS=1,NPX
            POLY(IPTS,22)=POLY(IPTS,5)*POLY(IPTS,6)
 420       CONTINUE
          END IF
          IF(CALC(23))THEN
           DO 418 IPTS=1,NPX
            POLY(IPTS,23)=POLY(IPTS,7)*POLY(IPTS,5)
 418       CONTINUE
          END IF
          IF(CALC(24))THEN
           DO 421 IPTS=1,NPX
            POLY(IPTS,24)=POLY(IPTS,7)*POLY(IPTS,6)
 421       CONTINUE
          END IF
          IF(CALC(25))THEN
           DO 422 IPTS=1,NPX
            POLY(IPTS,25)=POLY(IPTS,7)**2
 422       CONTINUE
          END IF
          IF(CALC(26))THEN
           DO 423 IPTS=1,NPX
            POLY(IPTS,26)=POLY(IPTS,5)*POLY(IPTS,8)
 423       CONTINUE
          END IF
          IF(CALC(27))THEN
           DO 419 IPTS=1,NPX
            POLY(IPTS,27)=POLY(IPTS,9)*POLY(IPTS,5)
 419       CONTINUE
          END IF
          IF(CALC(28))THEN
           DO 424 IPTS=1,NPX
            POLY(IPTS,28)=POLY(IPTS,9)*POLY(IPTS,6)
 424       CONTINUE
          END IF
          IF(CALC(29))THEN
           DO 425 IPTS=1,NPX
            POLY(IPTS,29)=POLY(IPTS,7)*POLY(IPTS,9)
 425       CONTINUE
          END IF
          IF(CALC(30))THEN
           DO 426 IPTS=1,NPX
            POLY(IPTS,30)=POLY(IPTS,10)*POLY(IPTS,5)
 426       CONTINUE
          END IF
          IF(CALC(31))THEN
           DO 427 IPTS=1,NPX
            POLY(IPTS,31)=POLY(IPTS,10)*POLY(IPTS,6)
 427       CONTINUE
          END IF
          IF(CALC(32))THEN
           DO 428 IPTS=1,NPX
            POLY(IPTS,32)=POLY(IPTS,10)*POLY(IPTS,7)
 428       CONTINUE
          END IF
          IF(CALC(33))THEN
           DO 429 IPTS=1,NPX
            POLY(IPTS,33)=POLY(IPTS,8)*POLY(IPTS,10)
 429       CONTINUE
          END IF
          IF(CALC(34))THEN
           DO 430 IPTS=1,NPX
            POLY(IPTS,34)=POLY(IPTS,9)*POLY(IPTS,10)
 430       CONTINUE
          END IF
          IF(CALC(35))THEN
           DO 431 IPTS=1,NPX
            POLY(IPTS,35)=POLY(IPTS,10)**2
 431       CONTINUE
          END IF
         END IF
C
         IF((MODDEN.EQ.1).AND.(IPOT.EQ.1))THEN
          DO ISPN=1,NSPN
           NGGA=1
           IF(GGA)NGGA=10
           DO II=1,NGGA
            DO IPTS=1,NPX
             ADDR(IPTS,II)=0.0D0
            END DO
           END DO 
           DO MPM=1,35
            IF (ABS(RHOC(MPM,IP,ISPN)).GT.1.0D-14) THEN
             DO IPTS=1,NPX
              ADDR(IPTS,1)=ADDR(IPTS,1)+POLY(IPTS,MPM)*RHOC(MPM,IP,ISPN)
             END DO
            END IF
           END DO
           IF(GGA)THEN
            CALL GTTIME(TMGG1)
            DO MPM=1,20
             DO IX=2,4
              IF(ABS(RHOD(MPM,IX,IP,ISPN)).GT.1.0D-14)THEN
               DO IPTS=1,NPX
                ADDR(IPTS,IX)=ADDR(IPTS,IX)
     &                       +POLY(IPTS,MPM)*RHOD(MPM,IX,IP,ISPN)
               END DO
              END IF
             END DO
            END DO
            DO MPM=1,10
             DO IX=5,10
              IF(ABS(RHOD(MPM,IX,IP,ISPN)).GT.1.0D-14)THEN
               DO IPTS=1,NPX
                ADDR(IPTS,IX)=ADDR(IPTS,IX)
     &                       +POLY(IPTS,MPM)*RHOD(MPM,IX,IP,ISPN)
               END DO
              END IF
             END DO
            END DO
            D1X4=DLT(IP)*4.0D0
            D2X4=DLT(IP)*DLT(IP)*4.0D0 
            D1X2=DLT(IP)*2.0D0
            DO IPTS=1,NPX
             ADDR(IPTS,5)=ADDR(IPTS,5)-D1X4*POLY(IPTS,4)*ADDR(IPTS,2)
     &                   +(D2X4*POLY(IPTS,10)-D1X2)*ADDR(IPTS,1)
            END DO
            DO IPTS=1,NPX
             ADDR(IPTS,6)=ADDR(IPTS,6)-D1X4*POLY(IPTS,3)*ADDR(IPTS,3)
     &                   +(D2X4*POLY(IPTS, 7)-D1X2)*ADDR(IPTS,1)
            END DO
            DO IPTS=1,NPX
             ADDR(IPTS,7)=ADDR(IPTS,7)-D1X4*POLY(IPTS,2)*ADDR(IPTS,4)
     &                   +(D2X4*POLY(IPTS, 5)-D1X2)*ADDR(IPTS,1)
            END DO
            DO IPTS=1,NPX
             ADDR(IPTS,8)=ADDR(IPTS,8)-D1X2*POLY(IPTS,3)*ADDR(IPTS,2) !YX
     &                                -D1X2*POLY(IPTS,4)*ADDR(IPTS,3) !XY
     &                   + D2X4*POLY(IPTS,9)*ADDR(IPTS,1)             !XY
            END DO
            DO IPTS=1,NPX
             ADDR(IPTS,9)=ADDR(IPTS,9)-D1X2*POLY(IPTS,2)*ADDR(IPTS,2) !ZX
     &                                -D1X2*POLY(IPTS,4)*ADDR(IPTS,4) !XZ
     &                   + D2X4*POLY(IPTS,8)*ADDR(IPTS,1)             !XZ
            END DO
            DO IPTS=1,NPX
             ADDR(IPTS,10)=ADDR(IPTS,10)-D1X2*POLY(IPTS,3)*ADDR(IPTS,4) !YZ
     &                                  -D1X2*POLY(IPTS,2)*ADDR(IPTS,3) !ZY
     &                    + D2X4*POLY(IPTS,6)*ADDR(IPTS,1)              !YZ
            END DO
            DO IPTS=1,NPX
             ADDR(IPTS,2)=ADDR(IPTS,2)-D1X2*POLY(IPTS,4)*ADDR(IPTS,1)
            END DO
            DO IPTS=1,NPX
             ADDR(IPTS,3)=ADDR(IPTS,3)-D1X2*POLY(IPTS,3)*ADDR(IPTS,1)
            END DO
            DO IPTS=1,NPX
             ADDR(IPTS,4)=ADDR(IPTS,4)-D1X2*POLY(IPTS,2)*ADDR(IPTS,1)
            END DO
            CALL GTTIME(TMGG2)
            TIMGGA=TIMGGA+(TMGG2-TMGG1)
            IF((TIMGGA.GT.TIMGGN).AND.DEBUG)THEN
             RATGGA=TIMGGA/TMGG2
             TIMGGN=3.0D0*TIMGGA
             PRINT *,'TIMGGA, RATGGA:',TIMGGA,RATGGA
            END IF
           END IF
C
           CALL GTTIME(TMGG1)
           NDMGGA=1
           IF (GGA) NDMGGA=10
           DO II=1,NDMGGA
            DO IPTS=1,NPX
             ADDR(IPTS,II)=CHGD(IPTS)*ADDR(IPTS,II)
            END DO
           END DO
           DO II=1,NDMGGA
            DO IPTS=1,NPX
             RHOG(JPTR(LPTS_BEG+IPTS),II,ISPN)=
     &        RHOG(JPTR(LPTS_BEG+IPTS),II,ISPN)+ADDR(IPTS,II)
            END DO
           END DO
           CALL GTTIME(TMGG2)
           TIMGGA=TIMGGA+(TMGG2-TMGG1)
          END DO
         END IF
C
C POLY(1 ) 1.0D0
C POLY(2 ) Z
C POLY(3 ) Y
C POLY(4 ) X
C POLY(5 ) ZZ
C POLY(6 ) YZ
C POLY(7 ) YY
C POLY(8 ) XZ
C POLY(9 ) XY
C POLY(10) XX
C POLY(11) ZZZ
C POLY(12) YZZ
C POLY(13) YYZ
C POLY(14) YYY
C POLY(15) XZZ
C POLY(16) XYZ
C POLY(17) XYY  
C POLY(18) XXZ 
C POLY(19) XXY 
C POLY(20) XXX 
C POLY(21) ZZZZ
C POLY(22) YZZZ
C POLY(23) YYZZ
C POLY(24) YYYZ
C POLY(25) YYYY
C POLY(26) XZZZ
C POLY(27) XYZZ
C POLY(28) XYYZ
C POLY(29) XYYY
C POLY(30) XXZZ
C POLY(31) XXYZ
C POLY(32) XXYY
C POLY(33) XXXZ
C POLY(34) XXXY
C POLY(35) XXXX
C
         CALL GTTIME(TIME2)
         IF(IPOT.EQ.1)TPOLYS=TPOLYS+TIME2-TIME1
         IF(MAXFMT.EQ.5)THEN
          CALL FFFMTC(MPX,MPX,XX,CHGD,SSS)
         ELSE IF(MAXFMT.EQ.4)THEN
          CALL FFFMT4(MPX,MPX,XX,CHGD,SSS)
         ELSE IF(MAXFMT.EQ.3)THEN
          CALL FFFMT3(MPX,MPX,XX,CHGD,SSS)
         END IF
         CALL GTTIME(TIME3)
         IF(IPOT.EQ.1)TFMTTM=TFMTTM+TIME3-TIME2
         DO 433 I=1,3
         DO 433 IPTS=1,NPX
          ERP(IPTS,I)=COEFICIENT(I,IP)
  433    CONTINUE
         DO 434 I=4,5
         DO 434 IPTS=1,NPX
          ERP(IPTS,I)=0.0D0
  434    CONTINUE
         DO 45 I=2,4
         COEFTMP=COEFICIENT(I+2,IP)
         DO 45 IPTS=1,NPX
          ERP(IPTS,2)=ERP(IPTS,2)+POLY(IPTS,I)*COEFTMP
   45    CONTINUE
C
C POLYNOMIALS OF DEGREE:  1
C
         DO 94 I=2,4 
          IF(CALC(I).AND.SSCL(3))THEN
           COEFTMP=COEFICIENT(I+5,IP)
           DO 93 IPTS=1,NPX
            ERP(IPTS,3)=ERP(IPTS,3)+POLY(IPTS,I)*COEFTMP
   93      CONTINUE
          END IF
   94    CONTINUE
C
C POLYNOMIALS OF DEGREE:  2
C
         DO 96 I=5,10
          IF(CALC(I).AND.SSCL(3))THEN
           COEFTMP=COEFICIENT(I+5,IP)
           DO 95 IPTS=1,NPX
            ERP(IPTS,3)=ERP(IPTS,3)+POLY(IPTS,I)*COEFTMP
   95      CONTINUE
          END IF
   96    CONTINUE
C
         DO 101 I=5,10
          IF(CALC(I).AND.SSCL(4))THEN
           COEFTMP=COEFICIENT(I+11,IP)
           DO 100 IPTS=1,NPX
            ERP(IPTS,4)=ERP(IPTS,4)+POLY(IPTS,I)*COEFTMP
  100      CONTINUE
          END IF
  101    CONTINUE
C
C POLYNOMIALS OF DEGREE:  3
C
         IF(NP_TOT.GT.2)THEN
          DO 106 I=11,20
           IF(CALC(I).AND.SSCL(4))THEN
            COEFTMP=COEFICIENT(I+11,IP)
            DO 105 IPTS=1,NPX
             ERP(IPTS,4)=ERP(IPTS,4)+POLY(IPTS,I)*COEFTMP
  105       CONTINUE
           END IF
  106     CONTINUE
C
C POLYNOMIALS OF DEGREE:  4
C
          IF(NP_TOT.GT.3)THEN
           DO 111 I=21,35
            IF(CALC(I).AND.SSCL(5))THEN
             COEFTMP=COEFICIENT(I+11,IP)
             DO 110 IPTS=1,NPX
              ERP(IPTS,5)=ERP(IPTS,5)+POLY(IPTS,I)*COEFTMP
  110        CONTINUE
            END IF
  111      CONTINUE
          END IF
         END IF
C
         DO 497 IPTS=1,NPX
          ADDP(IPTS)=0.0D0
 497     CONTINUE
         DO 498 IFMT=1,5
          IF(SSCL(IFMT))THEN
           DO IPTS=1,NPX
            ADDP(IPTS)=ADDP(IPTS)+ERP(IPTS,IFMT)*SSS(IPTS,IFMT)
           END DO
          END IF
 498     CONTINUE
         CALL GTTIME(WASTE1)
C
         IF(IPOT.EQ.1)THEN
          DO 499 IPTS=1,NPX
           POTNL(LPTS_BEG+IPTS)=POTNL(LPTS_BEG+IPTS)+ADDP(IPTS)
C          CHGDN(LPTS_BEG+IPTS)=CHGDN(LPTS_BEG+IPTS)+ADDR(IPTS,1)
 499      CONTINUE
         ELSE
          DO 500 IPTS=1,NPX
           ASYMPTOT(LPTS_BEG+IPTS)=ASYMPTOT(LPTS_BEG+IPTS)+ADDP(IPTS)
 500      CONTINUE
         END IF
         CALL GTTIME(TIME4)
         IF(IPOT.EQ.1)TRUNIT=TRUNIT+TIME4-TIME3
 550    CONTINUE
        LPTS_BEG=LPTS_BEG+NPX
        IF(LPTS_BEG.LT.NPTS) GOTO 250
        CALL GTTIME(TPOT2)
        IF(IPOT.EQ.2)ATIME=ATIME+TPOT2-TPOT
 600   CONTINUE
C
C MOVE TO COULOMB:
C
       IF(DEBUG)THEN
        DO LPTS=1,NMSH
         COULOMB(LPTS)=COULOMB(LPTS)+POTNL(LPTS)
        END DO
       ELSE
C
C THIS LOOP CAN BE VECTORIZED!
C
CDIR$ IVDEP
C
        DO LPTS=1,MPTS_CLS
         COULOMB(JPTR(LPTS))=COULOMB(JPTR(LPTS))+POTNL(LPTS)
        END DO
       END IF
c
c Is this used for anything anymore ?
c
       VLONG=0.0D0
       DO IANG=1,NANG
         VLONG=VLONG+DOMEGA(IANG)*ASYMPTOT(IANG)*RCUT/PI4
       END DO
       ACHRG=ACHRG+VLONG
c
C
       DO IANG=1,NANG
        Q(1,IANG)=ANG(1,IANG)*RCUT
        Q(2,IANG)=ANG(2,IANG)*RCUT
        Q(3,IANG)=ANG(3,IANG)*RCUT 
       END DO
c
c Q coordinates must be normalized for harmonics routine
c
      HNORM=SQRT(Q(1,1)**2+Q(2,1)**2+Q(3,1)**2)
      RECIPR(0)=HNORM
      HNORM=1.0D0/HNORM
      DO I=1,NANG
        Q(1,I)=HNORM*Q(1,I)
        Q(2,I)=HNORM*Q(2,I)
        Q(3,I)=HNORM*Q(3,I)
      END DO
      CALL HARMONICS(MPX,NANG,LM,Q,POLY,NPOLY)
C
C INTERPOLATE ONTO CLUSTER MESH:
C
       DO MOM=1,(LM+1)**2
        RMOMENT(MOM)=0.0D0
        DO IANG=1,NANG
         RMOMENT(MOM)=RMOMENT(MOM)
     &               +DOMEGA(IANG)*POLY(IANG,MOM)*ASYMPTOT(IANG)
        END DO
       END DO
C
      DO L=1,LM
        RECIPR(L)=RECIPR(0)*RECIPR(L-1)
      END DO
      MOM=0
      DO L=0,LM
       DO M=-L,L
        MOM=MOM+1
        RMOMENT(MOM)=RMOMENT(MOM)*RECIPR(L)
       END DO
      END DO
c
       NPTS=MPTS_FAR
       IF(NPTS.EQ.0)RETURN
       CALL GTTIME(TIME1)
       NTIMES=NPTS/MPX
       IF((NTIMES*MPX).LT.NPTS)NTIMES=NTIMES+1
       LPTS_BEG=0
       DO 650 II=1,NTIMES
       NPX=MIN(MPX,NPTS-LPTS_BEG)
       KPTS_MIN=IPTR(LPTS_BEG+1)  
       KPTS_MAX=IPTR(LPTS_BEG+NPX)
       DO 700 IPTS=1,NPX
        Q(1,IPTS)=RMSH(1,IPTR(LPTS_BEG+IPTS))+CGRAVITY(1)
        Q(2,IPTS)=RMSH(2,IPTR(LPTS_BEG+IPTS))+CGRAVITY(2)
        Q(3,IPTS)=RMSH(3,IPTR(LPTS_BEG+IPTS))+CGRAVITY(3)
 700   CONTINUE
c
c Q coordinates must be normalized for harmonics routine
c locate smallest r in the process
c
      RI1=0.0D0
      DO I=1,NPX
        HNORM=Q(1,I)**2+Q(2,I)**2+Q(3,I)**2
        HNORM=1.0D0/SQRT(HNORM)
        RECIP(I,0)=HNORM
        IF(RECIP(I,0).GT.RI1)RI1=RECIP(I,0)
        Q(1,I)=HNORM*Q(1,I)
        Q(2,I)=HNORM*Q(2,I)
        Q(3,I)=HNORM*Q(3,I)
      END DO
c
c test to see if we need to do any calculations
c
      DELTAV=1.0D-12
      DO L=0,LM
        RTEST(L)=RI1**(L+1)
      END DO
      LM_MAX=0
      MOM=0
      DO L=0,LM
        DO M=-L,L
          MOM=MOM+1
          SKIPTEST=(2*L+1)*RMOMENT(MOM)*RTEST(L)
          SKIPTEST=ABS(SKIPTEST)
          IF(SKIPTEST.LT.DELTAV)THEN
            SKIP(MOM)=.TRUE.
          ELSE
            SKIP(MOM)=.FALSE.
            LM_MAX=L
          END IF
        END DO
      END DO
c
c only get harmonics up to lm_max because the higher ones won't
c be needed
c
      CALL HARMONICS(MPX,NPX,LM_MAX,Q,POLY,NPOLY)
c 
c Generalized for arbitrary L 
c
c
      DO L=1,LM_MAX
        DO IPTS=1,NPX
          RECIP(IPTS,L)=RECIP(IPTS,0)*RECIP(IPTS,L-1)
        END DO
      END DO
      MOM=0
c
c generalized for arbitrary l
c
      DO IPTS=1,NPX
        POTLR(IPTS)=0.0D0
      END DO
      MOM=0
c 
c DCP I am unrolling some of this for Mark (although it seems
c to have no effect on performance even on the IBMs)
c
c     do l=0,lm_max
c       do m=-l,l
c         mom=mom+1
c         if(.not.skip(mom))then
c           do ipts=1,npx
cc             potlr(ipts)=potlr(ipts)+rmoment(mom)*poly(ipts,mom)
c             potlr(ipts)=potlr(ipts)+rmoment(mom)*poly(ipts,mom)
c    &                    *recip(ipts,l)
c           end do
c         end if
c       end do
c     end do
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c l=0
c
      IF(LM_MAX.GE.0)THEN
        L=0
        MOM=MOM+1
        IF(.NOT.SKIP(MOM))THEN
          DO IPTS=1,NPX
            POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
          END DO
        END IF
      END IF
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c l=1
c
      IF(LM_MAX.GE.1)THEN 
        L=1
c m=-1
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=0
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=-1
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
      END IF
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c l=2
c
      IF(LM_MAX.GE.2)THEN
        L=2
c m=-2
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=-1
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=0
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=1
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=2
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
      END IF
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c l=3
c
      IF(LM_MAX.GE.3)THEN
        L=3
c m=-3
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=-2
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=-1
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=0
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=1
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=2
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=3
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
      END IF
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c l=4
c
      IF(LM_MAX.GE.4)THEN
        L=4
c m=-4
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=-3
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=-2
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=-1
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=0
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=1
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=2
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=3
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=4
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
      END IF
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c l=5
c
      IF(LM_MAX.GE.5)THEN
        L=5
c m=-5
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=-4
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=-3
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=-2
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=-1
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=0
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=1
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=2
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=3
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=4
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
c m=5
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
      END IF
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c l>5
c
      DO L=6,LM_MAX
        DO M=-L,L
          MOM=MOM+1
          IF(.NOT.SKIP(MOM))THEN
            DO IPTS=1,NPX
              POTLR(IPTS)=POTLR(IPTS)+RMOMENT(MOM)*POLY(IPTS,MOM)
     &                    *RECIP(IPTS,L)
            END DO
          END IF
        END DO
      END DO
c
       CALL GTTIME(WASTE1)
       IF(DEBUG)THEN
        DO IPTS=1,NPX
         DIFF=ABS(POTLR(IPTS)-POTNL(IPTR(LPTS_BEG+IPTS)))
         TDIFF=TDIFF+DIFF
         IF(DIFF.GT.DIFF_MAX)DIFF_MAX=DIFF
        END DO
       ELSE
        IF(KPTS_MAX-KPTS_MIN+1.EQ.NPX)THEN
         DO 720 IPTS=1,NPX
          COULOMB(KPTS_MIN+IPTS-1)=COULOMB(KPTS_MIN+IPTS-1)
     &                            +POTLR(IPTS)
  720    CONTINUE
        ELSE
C
CDIR$ IVDEP
C
         DO 725 IPTS=1,NPX
          COULOMB(IPTR(LPTS_BEG+IPTS))=COULOMB(IPTR(LPTS_BEG+IPTS))
     &                                +POTLR(IPTS)
  725    CONTINUE
        END IF
       END IF
       LPTS_BEG=LPTS_BEG+NPX
       CALL GTTIME(WASTE2)
  650  CONTINUE
       CALL GTTIME(TIME2)
       ATIME=ATIME+TIME2-TIME1
       IF(DEBUG)THEN
        DAVG=TDIFF/MPTS_FAR
        FLAG='    '
        IF(DIFF_MAX .GT. 0.0001)FLAG='<==='
        WRITE(73,900)MPTS_FAR,MPTS_CLS,DIFF_MAX,DAVG,FLAG
       END IF
  900  FORMAT(' ',2I7,2G15.6,A6) 
c
c I don't think we need this continue 950 do we ?
c
  950  CONTINUE
       RETURN
       END
C
C
       SUBROUTINE COUPOT1
C ORIGINAL VERSION BY MARK R PEDERSON (1988)
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       COMMON/FORRx/NFLO,KSPX!!,TMAT(NDH,NDH,2)
       COMMON/FLOINFO/FOD(3,MAX_OCC,2),NFOD(2),MFOD(2)
       COMMON/FLOMESH/RABCD(3,1000)
       COMMON/NEWTIMES/TMWRD,TMNRM,CLWRD,CLNRM
       COMMON/PTIME/TSETUP,TPOLYS,TFMTTM,TRUNIT,FLDNR,ASYMP,ACHRG
     &  ,ATIME,TWASTED,COSTPROJ
       COMMON/TMP4/FLOi(MAX_PTS)
       COMMON/SIC_ENERGY/SICENERGY,TOT_SIC
       PARAMETER (MXPR=MXPOISS)
       PARAMETER (MXLG=3)
       COMMON/COUPDATA/
     &  AIV(3,MXPR,MX_CNT+2,MXLG),AJV(3,MXPR,MX_CNT+2,MXLG)
     &  ,DMTV(10,10,MXPR,MX_CNT+2,MXLG),ALPIV(MXPR,MX_CNT+2,MXLG)
     &  ,ALPJV(MXPR,MX_CNT+2,MXLG),CENTER(3,MX_CNT+2)
     &  ,ADD(MAXUNSYM,MAXUNSYM,2),RVECI(3,MX_GRP),RVECJ(3,MX_GRP)
     &  ,NPAIRS(MX_CNT+2),IP(MX_CNT+2,MXLG)
       LOGICAL FIRST_ALPJ,CALLEDJ,NWRD,MWRD,FIRST
       COMMON/TMP1/POT(MAX_PTS),RHOG(MAX_PTS,NVGRAD,MXSPN)
       DIMENSION RROT(3,MAX_PTS),WROT(MAX_PTS)
       DIMENSION IBEG(3),IEND(3),MMFS(2),MMFB(2)
       DIMENSION AI(3),AJ(3),DIPMM(3),W4(10,10,4),W7(10,10,10)
       DIMENSION EMOMENT(0:10),CNTD(3),X2(3,3),XX(3,3),ABC(3),A1(3)
       DIMENSION SS(10,10),DMAT(10,10,2),C(3)
       DIMENSION VSIC(MAX_PTS*MXSPN),VL(MAX_PTS*MXSPN) !KW addedto get SIC potentials
       DIMENSION PROIDT(MAX_PTS)
       DATA IBEG,IEND/1,2,5,1,4,10/
       DATA ZED/1.0D-30/
       DATA ICALL/0.0D0/
       DATA FIRST/.TRUE./
           IF(FIRST)THEN
C GENERATE REPLICAS OF DFT MESH
          OPEN(99,FILE='VMOLD',FORM='UNFORMATTED',STATUS='UNKNOWN')
          REWIND(99)
          READ(99) NMSH,JCALC
          READ(99)((RMSH(J,I),J=1,3),I=1,NMSH)
          READ(99)(WMSH(I),I=1,NMSH)
          CLOSE(99)
          OPEN(99,FILE='REPLICAS',FORM='UNFORMATTED',STATUS='UNKNOWN')
          WRITE(99)NMSH
          WRITE(99)((RMSH(J,I),J=1,3),I=1,NMSH)
          WRITE(99)(WMSH(I)/NGRP,I=1,NMSH)
          DO IGP=2,NGRP
               DO I=1,NMSH
               DO J=1,3
               RROT(J,I)=0.0D0
                  DO K=1,3
                  RROT(J,I)=RROT(J,I)+RMAT(J,K,IGP)*RMSH(K,I)
                  END DO
               END DO
               END DO
          WRITE(99)((RROT(J,I),J=1,3),I=1,NMSH)
          WRITE(99)(WMSH(I)/NGRP,I=1,NMSH)
          END DO
          FIRST=.FALSE.
          CLOSE(99)
       OPEN(90,FILE='REPLICAS',FORM='UNFORMATTED')
       READ(90)NMSH
       PRINT*,'NMSH IN REPLICAS',NMSH
       call flush(6)
       CLOSE(90)
          END IF
       EMOMENT=0.0D0
       MMFS=NWFS 
       MMFB=1

       IF(NFLO.LT.0) THEN
         MMFS=0
         MMFB=NWFS
         MMFS(KSPX)=ABS(NFLO)
         MMFB(KSPX)=MMFS(KSPX)
       END IF
       ICALL=ICALL+1
C      GAUSS_CUT=1.0D30
       DEBUG=.FALSE.
        DIPOLE=0.0D0
C       
C MXSKIP LOOP
C MXSKIP=1:calcualte charge and moments and setup the new mesh
C MXSKIP=2: do the actual calcualtion
       DO MXSKIP=1,2
       call gttime(TKPW1)
       IF(MXSKIP.EQ.2) THEN
%ifdef MPI                   !
       CALL SENDDATA(101)    !
       CALL SENDDATA(102)    !
       CALL SENDDATA(103)    !
       CALL SENDDATA(104)    !
       CALL SENDDATA(105)    !
%endif                       !
       END IF

       PRINT '(A,I10)','NUMBER OF POINTS IN COUPOT: ',NMSH
       IF(NSPN*(MXPR/NSPN).NE.MXPR)THEN
        PRINT *,'MXPR MUST BE EVEN IN COUPOT1'
        CALL STOPIT
       END IF
       TMWRD=0.0D0
       TMNRM=0.0D0
       IF (DEBUG) THEN
        PRINT *, 'GAUSS_CUT IN COUPOT'
        PRINT 9000,(GAUSS_CUT(IX),IX=1,MAX_IDENT)
 9000   FORMAT(4(1X,G15.8))
       END IF
C
C SETUP ATOMIC LOCATIONS AND BASIS SET INFORMATION
C
       CALL GTTIME(TIME1)
       LC_LNG=0
       LC_SHT=0
       TSETUP=0.0D0
       TPOLYS=0.0D0
       TFMTTM=0.0D0
       TRUNIT=0.0D0
       FLDNR=0.0D0
       ASYMP=0.0D0
       ACHRG=0.0D0
       ATIME=0.0D0
       TWASTED=0.0D0
       TIMEP=0.0D0
       COSTPROJ=0.0D0
       NCALL=0
       MCALL=0
       MCNT=0
       ISHELLA=0
       DMIN=1.0D30
       DO IFNCT=1,NFNCT
        DO I_POS=1,N_POS(IFNCT)
         ISHELLA=ISHELLA+1
         CALL GASITES(1,RIDT(1,ISHELLA),MTOT,RVECI,MSITES)
         DO ITOT=1,MTOT
          MCNT=MCNT+1
          CENTER(1,MCNT)=RVECI(1,ITOT)
          CENTER(2,MCNT)=RVECI(2,ITOT)
          CENTER(3,MCNT)=RVECI(3,ITOT)
          DIST=CENTER(1,MCNT)**2+CENTER(2,MCNT)**2+CENTER(3,MCNT)**2
          IF(DIST.LT.DMIN)DMIN=DIST
          NPAIRS(MCNT)=0
          IF (DEBUG) THEN
           PRINT 990,MCNT,(CENTER(J,MCNT),J=1,3)
  990      FORMAT(' PCENT:',I5,3G15.6)
          END IF
         END DO
        END DO
       END DO
C
       IF(SQRT(DMIN) .GT. 0.7D0)THEN
        MCNT=MCNT+1 
        CENTER(1,MCNT)=0.0D0
        CENTER(2,MCNT)=0.0D0
        CENTER(3,MCNT)=0.0D0
        NPAIRS(MCNT)=0
        IF (DEBUG) PRINT 990,MCNT,(CENTER(J,MCNT),J=1,3)
       END IF
       IF((MCNT-1).GT.MX_CNT)THEN
        PRINT*,'COUPOT: MX_CNT MUST BE AT LEAST:',MCNT-1
        CALL STOPIT
       END IF

        IF(MXSKIP.EQ.2) THEN 
c
%ifdef MPI
c
c MPI: send general data and initialize pot and rhog for all slaves
c
       CALL SENDDATA(103)
c
%endif
       END IF 
C
C ZERO POT AND RHOG
C
       NGRAD=1
       IF ((IGGA(1).GT.0).OR.(IGGA(2).GT.0)) NGRAD=10
       DO IPTS=1,NMSH
        POT(IPTS)=0.0D0
       END DO  
       IF (MODDEN .EQ. 1) THEN
        DO ISPN=1,NSPN
         DO IRHOG=1,NGRAD
          DO IPTS=1,NMSH
           RHOG(IPTS,IRHOG,ISPN)=0.0D0
          END DO
         END DO
        END DO
       END IF
C
       CHARGE=0.0D0
       CHARGE_LONG=0.0D0
       DO LNG=1,MXLG
        DO ICNTR=1,MCNT+1
         IP(ICNTR,LNG)=0
        END DO
       END DO
       ISITE=0
       ISHELLA=0
       DO 120 IFNCT=1,NFNCT
       DO 120 I_POS=1,N_POS(IFNCT)
        JSITE_BEG=ISITE
        ISHELLA=ISHELLA+1
        CALL OBINFO(1,RIDT(1,ISHELLA),RVECI,IST,ISHDUM)
C
C  TRANSLATE SHELLS TO ATOMS; GET GAUSS CUTOFF FOR ATOM I
C
        IATOM=ISHELLA
        GAUSS_CUTI=GAUSS_CUT(IATOM)
        DO 118 K_SITEI=1,IST
         ISITE=ISITE+1
         CALL RxRAVEL(IFNCT,ISHELLA,K_SITEI,RIDT(1,ISHELLA),
     &                RVECI,LST,1)
         IF(LST.NE.IST)THEN
          PRINT *,'COUPOT: PROBLEM IN RxRAVEL'
          CALL STOPIT
         END IF
         I_LOC_BEG=0
         AI(1)=RVECI(1,K_SITEI)
         AI(2)=RVECI(2,K_SITEI)
         AI(3)=RVECI(3,K_SITEI)
         JSITE=JSITE_BEG
         JSHELLA=0
         DO 116 JFNCT=1,NFNCT
         DO 116 J_POS=1,N_POS(JFNCT)
          JSHELLA=JSHELLA+1
          IF(JSHELLA.LT.ISHELLA) GO TO 116
          CALL OBINFO(1,RIDT(1,JSHELLA),RVECJ,JST,JSHDUM)
C
C  TRANSLATE SHELLS TO ATOMS;  GET GAUSS CUT OFF  FOR ATOM J
C
          JATOM=JSHELLA
          GAUSS_CUTJ=GAUSS_CUT(JATOM)
          JJCALL=0 
          DO 114 K_SITEJ=1,JST
           CALLEDJ=.FALSE.
           JSITE=JSITE+1
           FIRST_ALPJ=.TRUE.
           IF(JSITE.LT.ISITE) GO TO 114
           J_LOC_BEG=0
           IF(JSITE.EQ.ISITE)J_LOC_BEG=I_LOC_BEG
           TIMES_SITES=1.0D0
           IF(JSITE.GT.ISITE)TIMES_SITES=2.0D0
           AJ(1)=RVECJ(1,K_SITEJ)
           AJ(2)=RVECJ(2,K_SITEJ)
           AJ(3)=RVECJ(3,K_SITEJ)
           DO 110 IALP=1,N_BARE(IFNCT)
            ALPHAI=BFALP(IALP,IFNCT)
            JALP_BEG=1
            IF(ISITE.EQ.JSITE)JALP_BEG=IALP
            DO 105 JALP=JALP_BEG,N_BARE(JFNCT)
             TIMES_ALPHA=1.0D0
             IF(ISITE.EQ.JSITE.AND.JALP.GT.IALP)TIMES_ALPHA=2.0D0
             ALPHAJ=BFALP(JALP,JFNCT)
             RCALP=1.0D0/(ALPHAI+ALPHAJ)
             ARG=ALPHAI*ALPHAJ*RCALP
     &        *((AI(1)-AJ(1))**2+(AI(2)-AJ(2))**2+(AI(3)-AJ(3))**2)
             IF(ARG .GT.CUTEXP) GO TO 105
             LC_SHT=LC_SHT+1
             IF(ALPHAI.GT.GAUSS_CUTI.OR.ALPHAJ.GT.GAUSS_CUTJ)
     &         GO TO 105
             C(1)=(ALPHAI*AI(1)+ALPHAJ*AJ(1))*RCALP
             C(2)=(ALPHAI*AI(2)+ALPHAJ*AJ(2))*RCALP
             C(3)=(ALPHAI*AI(3)+ALPHAJ*AJ(3))*RCALP
             DMIN=1.0D30
             DO ICNT=1,MCNT
              DIST=SQRT((C(1)-CENTER(1,ICNT))**2+
     &                  (C(2)-CENTER(2,ICNT))**2+
     &                  (C(3)-CENTER(3,ICNT))**2)
              IF(DIST.LT.DMIN)THEN
               DMIN=DIST
               MINC=ICNT
              END IF
             END DO
C
C BLOCK 1:
C
             RLEN=(ALPHAI+ALPHAJ)*DMIN**2
             IF(RLEN .GT. 0.5D0)MINC=MCNT+1
             IF(ALPHAI+ALPHAJ .LT. 3.0D0)MINC=MCNT+1
             LNG=1
             IF(ALPHAI+ALPHAJ.GT. 10.0D0)LNG=2
             IF(ALPHAI+ALPHAJ.GT. 40.0D0)LNG=3
C
C END OF BLOCK 2:
C
             IF(.NOT.CALLEDJ)THEN
              JJCALL=JJCALL+1
              IF(JJCALL.EQ.1.AND.K_SITEJ.NE.1)THEN
               CALL RxRAVEL(JFNCT,JSHELLA,1,RIDT(1,JSHELLA),
     &                      RVECJ,MST,2)
               IF(MST.NE.JST)THEN
                PRINT *,'COUPOT: PROBLEM IN RxRAVEL'
                CALL STOPIT
               END IF
              END IF
              CALL RxRAVEL(JFNCT,JSHELLA,K_SITEJ,RIDT(1,JSHELLA),
     &                     RVECJ,MST,2)
              IF(MST.NE.JST)THEN
               PRINT *,'COUPOT: PROBLEM IN RxRAVEL'
               CALL STOPIT
              END IF
              CALLEDJ=.TRUE.
             END IF
C
C END OF NEW SETUP...
C
C
C CALCULATE DENSITY MATRIX:
C
             DO ISPN=1,NSPN
              DO MUI=1,10
               DO MUJ=1,10
                DMAT(MUJ,MUI,ISPN)=0.0D0
               END DO
              END DO
             END DO
             MUIMAX=0
             DO LI =0,LSYMMAX(IFNCT)
              DO MUI=IBEG(LI+1),IEND(LI+1)
               DO IBASE=1,N_CON(LI+1,IFNCT)
                IF(ABS(BFCON(IALP,IBASE,LI+1,IFNCT)).GT.ZED
     &            .AND.MUI.GT.MUIMAX) MUIMAX=MUI
               END DO
              END DO
             END DO
             MUJMAX=0
             DO LJ =0,LSYMMAX(JFNCT)
              DO MUJ=IBEG(LJ+1),IEND(LJ+1)
               DO JBASE=1,N_CON(LJ+1,JFNCT)
                IF(ABS(BFCON(JALP,JBASE,LJ+1,JFNCT)).GT.ZED
     &            .AND.MUJ.GT.MUJMAX) MUJMAX=MUJ
               END DO
              END DO
             END DO
C
             IF(FIRST_ALPJ)THEN
              I_LOC    =I_LOC_BEG
              DO LI =0,LSYMMAX(IFNCT)
               DO MUI=IBEG(LI+1),IEND(LI+1)
                DO IBASE=1,N_CON(LI+1,IFNCT)
                 I_LOC=I_LOC+1
                 J_LOC=J_LOC_BEG
                 DO LJ =0,LSYMMAX(JFNCT)
                  DO MUJ=IBEG(LJ+1),IEND(LJ+1)
                   DO JBASE=1,N_CON(LJ+1,JFNCT)
                    J_LOC=J_LOC+1
                    IWF=0
                    IF(NFLO.LT.0) THEN
                      IWF=NWFS(1)*(KSPX-1)+ABS(NFLO)-1 !!! new
                    END IF
                    DO ISPN=1,NSPN
                     ADD(I_LOC,J_LOC,ISPN)=0.0D0
C!!                     DO IWFS=1,NWFS(ISPN)
                     DO IWFS=MMFB(ISPN),MMFS(ISPN)
                      IWF=IWF+1
                       ADD(I_LOC,J_LOC,ISPN)=ADD(I_LOC,J_LOC,ISPN)
     &                +PSI(I_LOC,IWF,1)*PSI(J_LOC,IWF,2)
                     END DO
                    END DO
                   END DO
                  END DO
                 END DO
                END DO
               END DO
              END DO
              FIRST_ALPJ=.FALSE.
              IF(I_LOC.GT.MAXUNSYM)THEN
               PRINT*,'COUPOT: MAXUNSYM MUST BE AT LEAST:',I_LOC
               CALL STOPIT
              END IF
              IF(J_LOC.GT.MAXUNSYM)THEN
               PRINT*,'COUPOT: MAXUNSYM MUST BE AT LEAST:',J_LOC
               CALL STOPIT
              END IF
             END IF
             I_LOC    =I_LOC_BEG
             DO LI =0,LSYMMAX(IFNCT)
              DO MUI=IBEG(LI+1),IEND(LI+1)
               DO IBASE=1,N_CON(LI+1,IFNCT)
                I_LOC=I_LOC+1
                J_LOC=J_LOC_BEG
                DO LJ =0,LSYMMAX(JFNCT)
                 DO MUJ=IBEG(LJ+1),IEND(LJ+1)
                  DO JBASE=1,N_CON(LJ+1,JFNCT)
                   J_LOC=J_LOC+1
                   PROD=BFCON(IALP,IBASE,LI+1,IFNCT)
     &                 *BFCON(JALP,JBASE,LJ+1,JFNCT)
                   DO ISPN=1,NSPN
                    DMAT(MUI,MUJ,ISPN)=DMAT(MUI,MUJ,ISPN)
     &                                +PROD*ADD(I_LOC,J_LOC,ISPN)
                   END DO
                  END DO
                 END DO
                END DO
               END DO
              END DO
             END DO
C             W7=0.0D0
C
             CALL KNMXSF(ALPHAI,ALPHAJ,AI,AJ,SS)
C             CALL OVMXSF(ALPHAI,ALPHAJ,AI,AJ,W7(1,1,1))
             CALL  GINT_NEW(10,2,2,alphai,alphaj,AI,AJ,W7) 
C              CALL GINTED(ALPHAI,ALPHAJ,AI,AJ,W7(1,1,2))
C             DIPMM=0.0D0
C             ADDON=0.0D0
            DO K=0,10
             DO ISPN=1,NSPN
              DO MUJ=1,MUJMAX
               DO MUI=1,MUIMAX
               IF(K.EQ.0) THEN
                EMOMENT(K)=EMOMENT(K)+DMAT(MUI,MUJ,ISPN)*SS(MUI,MUJ)
     &               *TIMES_SITES*TIMES_ALPHA
                ELSE 
                EMOMENT(K)=EMOMENT(K)+DMAT(MUI,MUJ,ISPN)*W7(MUI,MUJ,K)
     &               *TIMES_SITES*TIMES_ALPHA
               END IF
C                ADDON=ADDON+DMAT(MUI,MUJ,ISPN)*SS(MUI,MUJ)
C     &               *TIMES_SITES*TIMES_ALPHA
                END DO
               END DO
              END DO
             END DO

           CHARGE=EMOMENT(1)
           CHARGE_LONG=EMOMENT(1)
C             DO J=1,3
C            DIPOLE(J)=DIPOLE(J)+DIPMM(J)
C             END DO
C             CHARGE=CHARGE+ADDON
             DO ISPN=1,NSPN
              DO MUJ=1,MUJMAX
               DO MUI=1,MUIMAX
                DMAT(MUI,MUJ,ISPN)=DMAT(MUI,MUJ,ISPN)
     &                            *TIMES_SITES*TIMES_ALPHA
               END DO
              END DO
             END DO
C!            CHARGE_LONG=CHARGE_LONG+ADDON
C !           MXSKIP=1
              IF(MXSKIP.EQ.1) GOTO 104
C
             DO 10 ISPN=1,NSPN
              IP(MINC,LNG)=IP(MINC,LNG)+1
              NPAIRS(MINC)=NPAIRS(MINC)+1
              LC_LNG=LC_LNG+1
              ND=MUIMAX
              MD=MUJMAX
              ALPIV(IP(MINC,LNG),MINC,LNG)=ALPHAI
              ALPJV(IP(MINC,LNG),MINC,LNG)=ALPHAJ
              AIV(1,IP(MINC,LNG),MINC,LNG)=AI(1)
              AIV(2,IP(MINC,LNG),MINC,LNG)=AI(2)
              AIV(3,IP(MINC,LNG),MINC,LNG)=AI(3)
              AJV(1,IP(MINC,LNG),MINC,LNG)=AJ(1)
              AJV(2,IP(MINC,LNG),MINC,LNG)=AJ(2)
              AJV(3,IP(MINC,LNG),MINC,LNG)=AJ(3)
              DO MUJ=1,10
               DO MUI=1,10
                DMTV(MUI,MUJ,IP(MINC,LNG),MINC,LNG)=DMAT(MUI,MUJ,ISPN)
               END DO
              END DO
   10        CONTINUE
             MXSIZ=MXPR
c
%ifdef MPI
c
             IF (MINC.EQ.MCNT+1) MXSIZ=MAX(1,MXPR/10)
c
%endif
c
             IF (IP(MINC,LNG).EQ.MXSIZ) THEN
              IF (IP(MINC,LNG).NE.NSPN) THEN
               ND=10
               MD=10
              END IF
              NCALL=NCALL+1
              MCALL=MCALL+1
              CALL GTTIME(TP1)
   
              IF(MINC.EQ.MCNT+1)THEN
               NWRD=.TRUE.
              ELSE
               NWRD=.FALSE.
              END IF
c
%ifndef MPI
c!!!   
              CALL POISSON2(NWRD,IP(MINC,LNG),ND,MD,
     &                      ALPIV(1,MINC,LNG),AIV(1,1,MINC,LNG),
     &                      ALPJV(1,MINC,LNG),AJV(1,1,MINC,LNG),
     &                      DMTV(1,1,1,MINC,LNG))
c
%else
c
c dvp+mrp 10/98: let master do some work when all children are busy
c                first deal with single weirdos, then in larger blocks
c                with non-weirdos. The block size for non-weirdos is
c                reduced as the number of processors increases
c
              IF (NPROC .EQ. 0) THEN
               CALL POISSON2(NWRD,IP(MINC,LNG),ND,MD,
     &                       ALPIV(1,MINC,LNG),AIV(1,1,MINC,LNG),
     &                       ALPJV(1,MINC,LNG),AJV(1,1,MINC,LNG),
     &                       DMTV(1,1,1,MINC,LNG))
              ELSE
               NMAST= MXPR/(4*NPROC*NSPN)
               IF(NMAST.GT.4)NMAST= 0              
               IF (NMAST .LE. 0) THEN
                CALL CKCHILD(2,NTID)
                GOTO 20
               END IF
               DO ICNT= MCNT+1, 1, -1
                MWRD= (ICNT .EQ. MCNT+1)
                IF (MWRD) THEN
                 NBLOCK= NSPN
                ELSE
                 NBLOCK= NSPN*NMAST
                END IF
                DO ILNG= 1,3
                 NLOOP= (IP(ICNT,ILNG)+NBLOCK-1)/NBLOCK
                 DO ILOOP= 1,NLOOP
                  CALL CKCHILD(1,NTID)
                  IF (NCALLED .NE. NPROC) GOTO 20
                  NSET= MIN(IP(ICNT,ILNG),NBLOCK)
                  I= IP(ICNT,ILNG)-NSET+1
                  CALL POISSON2(MWRD,NSET,10,10,
     &                          ALPIV(I,ICNT,ILNG),AIV(1,I,ICNT,ILNG),
     &                          ALPJV(I,ICNT,ILNG),AJV(1,I,ICNT,ILNG),
     &                          DMTV(1,1,I,ICNT,ILNG))
                  IP(ICNT,ILNG)= IP(ICNT,ILNG)-NSET
                 END DO
                END DO
               END DO
   20          IF (IP(MINC,LNG) .GT. 0) THEN
                CALL PAMPOISS(1,ND,MD,MINC,LNG,NWRD,POT,RHOG)
               END IF
              END IF
c
%endif
c
              CALL GTTIME(TP2)
              TIMEP=TIMEP+TP2-TP1
              IP(MINC,LNG)=0
             END IF
  104       CONTINUE  
  105       CONTINUE
  110      CONTINUE
  114     CONTINUE
  116    CONTINUE
  118   CONTINUE
  120  CONTINUE
       IF(MXSKIP.EQ.1) GOTO 915
C
C EMPTY TABLE OF PAIRS
C
       DO 800 LNG=1,MXLG
        DO 790 MINC=1,MCNT+1
         NCALL=NCALL+IP(MINC,LNG)
         IF(IP(MINC,LNG).NE.0)THEN
          MCALL=MCALL+1
          ND=10
          MD=10
          CALL GTTIME(TP1)
          IF(MINC.EQ.MCNT+1)THEN
           NWRD=.TRUE.
          ELSE
           NWRD=.FALSE.
          END IF
c
%ifndef MPI
c
          CALL POISSON2(NWRD,IP(MINC,LNG),ND,MD,
     &                  ALPIV(1,MINC,LNG),AIV(1,1,MINC,LNG),
     &                  ALPJV(1,MINC,LNG),AJV(1,1,MINC,LNG),
     &                  DMTV(1,1,1,MINC,LNG))
c
%else
c
c dvp+mrp 10/98: let master do some work when all children are busy
c                first deal with single weirdos, then in larger blocks
c                with non-weirdos. The block size for non-weirdos is
c                reduced as the number of processors increases
c
          IF (NPROC .EQ. 0) THEN
           CALL POISSON2(NWRD,IP(MINC,LNG),ND,MD,
     &                   ALPIV(1,MINC,LNG),AIV(1,1,MINC,LNG),
     &                   ALPJV(1,MINC,LNG),AJV(1,1,MINC,LNG),
     &                   DMTV(1,1,1,MINC,LNG))
          ELSE
           NMAST= MXPR/(4*NPROC*NSPN)
           IF(NMAST.GT.4)NMAST=0
C FOR MANY PROCESSOR CALCULATIONS ELIMINATE POSSIBILITY
C OF ALLOWING MASTER TO DO WORK...
C
C
C DISCARD CKCHILD(2,NTID) MODE.....FOR NOW.  12/30/2003
C PUT CKCHILD BACK IN                        01/07/2004
C          NMAST=0
           IF (NMAST .LE. 0) THEN
            CALL CKCHILD(2,NTID)
            GOTO 30
           END IF
           DO ICNT= MCNT+1, 1, -1
            MWRD= (ICNT .EQ. MCNT+1)
            IF (MWRD) THEN
             NBLOCK= NSPN
            ELSE
             NBLOCK= NSPN*NMAST
            END IF
            DO ILNG= 1,3
             NLOOP= (IP(ICNT,ILNG)+NBLOCK-1)/NBLOCK
             DO ILOOP= 1,NLOOP
              CALL CKCHILD(1,NTID)
              IF (NCALLED .NE. NPROC) GOTO 30
              NSET= MIN(IP(ICNT,ILNG),NBLOCK)
              I= IP(ICNT,ILNG)-NSET+1
              CALL POISSON2(MWRD,NSET,10,10,
     &                      ALPIV(I,ICNT,ILNG),AIV(1,I,ICNT,ILNG),
     &                      ALPJV(I,ICNT,ILNG),AJV(1,I,ICNT,ILNG),
     &                      DMTV(1,1,I,ICNT,ILNG))
              IP(ICNT,ILNG)= IP(ICNT,ILNG)-NSET
             END DO
            END DO
           END DO
   30      IF (IP(MINC,LNG) .GT. 0) THEN
            CALL PAMPOISS(1,ND,MD,MINC,LNG,NWRD,POT,RHOG)
            IP(MINC,LNG)= 0
           END IF
          END IF
c
%endif
c
          CALL GTTIME(TP2)
          TIMEP=TIMEP+TP2-TP1
         END IF
        
  790   CONTINUE
  800  CONTINUE
c
%ifdef MPI
c
       CALL PAMPOISS(2,ND,MD,MINC,LNG,NRWRD,POT,RHOG)
c
%endif
c
  915   CONTINUE
       PRINT*,'SKIPPING FLO 1,1',CHARGE_LONG,CHARGE
       PRINT '(A,F22.12)','LONG  CHARGE IN COUPOT: ',CHARGE_LONG
       PRINT '(A,F22.12)','TOTAL CHARGE IN COUPOT_A: ',CHARGE
       CALL GTTIME(TKPW2)
       IF(MXSKIP.EQ.1) THEN 
       PRINT 950,EMOMENT   !EMOMENT(1) IS CHARGE 
 950   FORMAT('ANALY. CHARGE,MOMENTS IN COUPOT1',20G16.9)
       PRINT*,'NEW TIME FOR MOMENTS AND NMSH, ICALL '
     &  ,TKPW2-TKPW1,NMSH,ICALL
       ELSE
       PRINT*,'TIME TO GET CMB AND RHOG,NMSH,ICALL'
     &  ,TKPW2-TKPW1,NMSH,ICALL
       END IF 

C Calcualte max radiaous for each orbitial
C RDmax: radius for orbital, CNTD: centroid of the orbital
       IF(NFLO.LT.0) THEN
       call gttime(TNFLO1)
       RDmax=0.0D0
       IF(MXSKIP.EQ.1) THEN
       CNTD=0.0D0
        DO K=1,3
        CNTD(K)=EMOMENT(K+1)
        RDmax=RDmax+EMOMENT(K+4)-EMOMENT(K+1)**2
        END DO
C     Zeff x sqrt(RDmax) = 10
        Zeff=10.0D0/RDmax**0.5
        Aeff=10.0D0/RDmax
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C New way to define the size of an orbital 
C Find the coordinate system for an ellipse that covers the orbital
C and its paramaters a b c.
          XX=0.0D0
          X2=0.0D0
          A1=0.0D0
          ABC=0.0D0
          PRINT*,'R^2 Matrix for orbital: ',ABS(NFLO)
            X2(1,2)=EMOMENT(8)-EMOMENT(2)*EMOMENT(3)
            X2(2,1)=X2(1,2)
            X2(1,3)=EMOMENT(9)-EMOMENT(2)*EMOMENT(4)
            X2(3,1)=X2(1,3)
            X2(2,3)=EMOMENT(10)-EMOMENT(3)*EMOMENT(4)
            X2(3,2)=X2(2,3)
         DO K=1,3
          X2(K,K)=EMOMENT(K+4)-EMOMENT(K+1)**2
          XX(K,K)=1.0D0
C           DO J=K+1,3
C            X2(K,J)=EMOMENT(J+6)-EMOMENT(J)*EMOMENT(J+1)
C            X2(J,K)=X2(K,J)
C           END DO
          PRINT 949,(X2(K,L),L=1,3)
         END DO
         CALL DIAGGE(3,3,X2,XX,ABC,A1,1)
         PRINT *,'ABC',ABC(1),ABC(2),ABC(3),
     &           (RABCD(J,ABS(NFLO)+MFOD(1)*(NSPN-1)),J=1,2)
         PRINT *,'ABC ratio ',ABC(3)/ABC(1),ABC(3)/ABC(2)
         DO K=1,3
          IF(ABC(K).LT.0.2D0) THEN
           ABC(K)=ABC(K)*RABCD(1,ABS(NFLO)+MFOD(1)*(NSPN-1))
          ELSE
           IF(K.EQ.3) THEN
             ABC(K)=ABC(K)*RABCD(2,ABS(NFLO)+MFOD(1)*(NSPN-1))
            ELSE
             ABC(K)=ABC(K)*RABCD(2,ABS(NFLO)+MFOD(1)*(NSPN-1))*1.33D0
            END IF
          END IF
         END DO
 949     FORMAT(3F8.4)
C        if(RDmax.lt.0.2D0) then
C           RDmax=RDmax*1000.0D0
C        else
C           RDmax=RDmax*100.0D0
C        end if 
C       PRINT*,'MAX RADIUS, Zeff, Aeff:',RDmax**0.5,Zeff,Aeff
       OPEN(90,FILE='REPLICAS',FORM='UNFORMATTED')
       READ(90)NMSH
       PRINT*,'NMSH IN REPLICAS',NMSH
       call flush(6)
       MMSH=0
       DO IGP=1,NGRP
       READ(90)((RMSH(J,I),J=1,3),I=1,NMSH)
       READ(90)(WMSH(  I)       ,I=1,NMSH)
               DO I=1,NMSH
C               X=(RMSH(1,I)-CNTD(1))*X2(1,1)+
C     &           (RMSH(2,I)-CNTD(2))*X2(1,2)+ 
C     &           (RMSH(3,I)-CNTD(3))*X2(1,3)
C               Y=(RMSH(1,I)-CNTD(1))*X2(2,1)+
C     &           (RMSH(2,I)-CNTD(2))*X2(2,2)+ 
C     &           (RMSH(3,I)-CNTD(3))*X2(2,3)
C               Z=(RMSH(1,I)-CNTD(1))*X2(3,1)+
C     &           (RMSH(2,I)-CNTD(2))*X2(3,2)+ 
C     &           (RMSH(3,I)-CNTD(3))*X2(3,3)
               X=(RMSH(1,I)-CNTD(1))*X2(1,1) +
     &           (RMSH(2,I)-CNTD(2))*X2(2,1) + 
     &           (RMSH(3,I)-CNTD(3))*X2(3,1) 
               Y=(RMSH(1,I)-CNTD(1))*X2(1,2) +
     &           (RMSH(2,I)-CNTD(2))*X2(2,2) + 
     &           (RMSH(3,I)-CNTD(3))*X2(3,2) 
               Z=(RMSH(1,I)-CNTD(1))*X2(1,3) +
     &           (RMSH(2,I)-CNTD(2))*X2(2,3) + 
     &           (RMSH(3,I)-CNTD(3))*X2(3,3) 
               RR= X**2/ABC(1) + Y**2/ABC(2) + Z**2/ABC(3)
C               PRINT*,'ELLIPSOID :',RMSH(:,I),RR
C IF (X/a)^2 + (Y/b)^2 + (Z/c)^2  < 1 => inside the ellipsoid 
               IF(RR.LE.1.0D0)THEN
                MMSH=MMSH+1
                DO J=1,3
                 RROT(J,MMSH)=RMSH(J,I)
                 WROT(  MMSH)=WMSH(I)
                END DO
               END IF
               END DO
       END DO
       CLOSE(90)
       NMSH=MMSH !TOTAL NUMBER OF POINTS
       PRINT*,'NEW NUMBER OF POINTS FOR ORBITAL',NMSH 
       DO IMSH=1,NMSH
          DO J=1,3
          RMSH(J,IMSH)=RROT(J,IMSH)
          END DO
          WMSH(  IMSH)=WROT(  IMSH)
       END DO
       ELSE
        PRINT*,'ORIGINAL NUMBER POINTS AFTER UNROLLING IN COUPOT1:',NMSH
C
C Temp. calculate numerical moments for testing RDmax 
       EMOMENT=0.0D0
!       MMSH=NMSH
       MKNT=0
       ECMB=0.0D0
       DO I=1,NMSH
C numerical moments for testing 
          EMOMENT(1)=EMOMENT(1)+RHOG(I,1,KSPX)*WMSH(I)
          EMOMENT(2)=EMOMENT(2)+RHOG(I,1,KSPX)*WMSH(I)*RMSH(1,I)
          EMOMENT(3)=EMOMENT(3)+RHOG(I,1,KSPX)*WMSH(I)*RMSH(2,I)
          EMOMENT(4)=EMOMENT(4)+RHOG(I,1,KSPX)*WMSH(I)*RMSH(3,I)
          EMOMENT(5)=EMOMENT(5)+RHOG(I,1,KSPX)*WMSH(I)*RMSH(1,I)**2
          EMOMENT(6)=EMOMENT(6)+RHOG(I,1,KSPX)*WMSH(I)*RMSH(2,I)**2
          EMOMENT(7)=EMOMENT(7)+RHOG(I,1,KSPX)*WMSH(I)*RMSH(3,I)**2
          ECMB      =ECMB      +RHOG(I,1,KSPX)*WMSH(I)*POT(I)*0.5D0
       END DO
       PRINT 951,(EMOMENT(K),K=1,7)  ,MMSH,ECMB
CCC                   STOP
CCC 951   FORMAT('SAVINGS:',I10,'/',I10)
  951  FORMAT('NUMER. CHARGE,MOMENTS,NMSH,SIC_COU',7G16.9,I10,F10.6)
!      NMSH=MMSH
       CN=0.0D0
       SIC_COU=0.0D0
       POT=POT*NSPN/2.0D0
       DO I=1,NMSH    
        DO IGRAD=1,NGRAD
         RHOG(I,IGRAD,1)=RHOG(I,IGRAD,KSPX)
         RHOG(I,IGRAD,2)=0.0D0
        END DO
        CN=CN+RHOG(I,1,1)*WMSH(I)
        SIC_COU=SIC_COU+RHOG(I,1,1)*WMSH(I)*POT(I)*0.5D0
       END DO
       RABCD(3,ABS(NFLO)+MFOD(1)*(NSPN-1))=CN 
       CALL GTTIME(TKPW1)
       VSIC=0.0D0
       VL=0.0D0
       ERGXL=0.0D0
       ERGXN=0.0D0
       ERGCL=0.0D0
       ERGCN=0.0D0
       NSPN_SAV=NSPN
       NSPN=2
       CALL GETVLXC_SIC(MAX_PTS,RHOG,VSIC,VL)
       NSPN=NSPN_SAV
       CALL GTTIME(TKPW2)
       PRINT*,'TIME TO GET VSIC, CALLED FROM COUPOT1',TKPW2-TKPW1
       PRINT 952,ERGXL,ERGXN,ERGCL,ERGCN,SIC_COU,CN,NMSH
 952   FORMAT('ERGXL,ERGXN,ERGCL,ERGCN,SIC_COU,CHARGE,NMSH',
     &   6F12.7,I10)
       TOT_SIC=0.0D0
       TOT_SIC=-(SIC_COU+ERGXL+ERGXN+ERGCL+ERGCN)*2.0D0/NSPN
       PRINT*,'TOTAL SIC ENERGY:',TOT_SIC,' ORBITAL:',ABS(NFLO)
       DO I=1,NMSH    
        DO IGRAD=1,NGRAD
         RHOG(I,IGRAD,KSPX)=RHOG(I,IGRAD,1)
        END DO
       END DO
C Now total SIC potentias 
       DO I=1,NMSH
        VSIC(I)=-(VSIC(I)+POT(I))
       END DO
C CALL FLONASE 
       call gttime(TFLON1)
       PRINT*,'NMSH BEFORE FLONASE:',NMSH
CC            NFLO=-IFND(1)
       CALL IFLONASE
C
       call gttime(TFLON2)
       PRINT*,'NMSH AFTER  FLONASE and TIME:',NMSH,TFLON2-TFLON1
       PTT=0.0D0
       call gttime(TINTi)
       PSIPSI_NUM=0.0D0
       DO IPTS=1,NMSH
       PSIPSI_NUM=PSIPSI_NUM+FLOi(IPTS)*FLOi(IPTS)*WMSH(IPTS)
       END DO
       CALL GTTIME(TINTO)
       PRINT*,'PSI_NUM CAPTURE FROM FLONAS:',PSIPSI_NUM
       PRINT*,'SINIT TIME',TINTO-TINTI
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CC CALLING APATCH
        DO I=1,NMSH
        WMSH(I)=WMSH(I)!!/NGRP
        DO J=1,3
         RROT(J,I)=RMSH(J,I)
        END DO
        END DO
        DO IGP=1,1!!!!NGRP
         CALL GTTIME(ET1)
         DO I=1,NMSH
         DO J=1,3
         RMSH(J,I)=0.0D0
          DO K=1,3
           RMSH(J,I)=RMSH(J,I)+RMAT(J,K,IGP)*RROT(K,I)
          END DO
         END DO
         END DO

         MM=2
         IF (MM.EQ.2) ORB_SCI=1.0D0
         ORB_SCI=1.0D0
         DO IM=1,MM
         PROIDT=0.0D0
         DO IMSH=1,NMSH
          PROIDT(IMSH)=FLOi(IMSH)*WMSH(IMSH)*ORB_SCI !W(I)|FLO_I><FLO_I|VI|FLO_I>
         END DO
         IF(IM.EQ.2)THEN
          DO IMSH=1,NMSH
           PROIDT(IMSH)=-PROIDT(IMSH)*VSIC(IMSH) !To match sign convention in 
          END DO
         END IF
         II=IM
         CALL APATCH(II,MM,PROIDT)
         END DO
         CALL GTTIME(ET2)
         PRINT*,'TIME FOR APATCH CALLS',ET2-ET1
        END DO
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C restore mesh        
       END IF    !MXSKIP 2
       END IF    !SIC CALCULATION (NFLO.LT.0)                      
       END DO  !! END OF MXSKIP LOOP, is this the right place?
       CALL GTTIME(TIME12)
        PRINT*,'TIME12 FOR COULOMB POTENTIAL,NMSH:',TIME12-TIME1,NMSH
          RMSH=0.0D0
          WMSH=0.0D0
          OPEN(99,FILE='VMOLD',FORM='UNFORMATTED',STATUS='UNKNOWN')
          REWIND(99)
          READ(99) NMSH,JCALC
          READ(99)((RMSH(J,I),J=1,3),I=1,NMSH)
          READ(99)(WMSH(I),I=1,NMSH)
          CLOSE(99)
       CALL FLUSH(6) 
       ALCLNG=LC_LNG
       ALCSHT=LC_SHT
       ISPFAC=2/NSPN
       SAVINGS=ALCLNG/ALCSHT
       IF (DEBUG) THEN
        PRINT*,'!!!!!!!!!!! SAVINGS:',SAVINGS,' !!!!!!!!!!!!'
        PRINT*,'NSPN:',NSPN
       END IF   
       CHARGE=CHARGE*ISPFAC
       CHARGE_LONG=CHARGE_LONG*ISPFAC
       PRINT '(A,F22.12)','LONG  CHARGE IN COUPOT: ',CHARGE_LONG
       PRINT '(A,F22.12)','TOTAL CHARGE IN COUPOT_A: ',CHARGE
C
       RR_MAX=0.0D0
       CHNUM=0.0D0
       SICUM=0.0D0
       DO 150 IPTS=1,NMSH
       CHNUM=CHNUM+RHOG(IPTS,1,1)*WMSH(IPTS)
       SICUM=SICUM+RHOG(IPTS,1,1)*POT(IPTS)*WMSH(IPTS)*0.5D0
        RRR=SQRT(RMSH(1,IPTS)**2+RMSH(2,IPTS)**2+RMSH(3,IPTS)**2)
        IF(RRR.GT.RR_MAX)THEN
         RR_MAX=RRR
         CHARGE_LRa=RRR*POT(IPTS)
        END IF
 150   CONTINUE
       PRINT*,'SICUM IN COUPOT1 SHOULD BE CORRECT FOR NO SYM'
       PRINT*,'SICUM,CHNUM IN COUPOT1:',SICUM,CHNUM
       IF(ABS(CHARGE_LR-CHARGE) .GT. 0.1D0)THEN
        PRINT *,'************** WARNING ****************'
        PRINT *,'CHARGE VIA ASYMPTOTIC FORMULA: ',CHARGE_LR
       END IF
       CALL GTTIME(TIME2)
        PRINT*,'TIME FOR COULOMB POTENTIAL,NMSH:',TIME2-TIME1,NMSH
       IF (DEBUG) THEN
        PRINT*,'TIME FOR COULOMB POTENTIAL,NMSH:',TIME2-TIME1,NMSH
        PRINT*,'POISSON DIAG: PT   :',TIMEP
        PRINT*,'POISSON DIAG: CT   :',TIME2-TIME1-TIMEP
        PRINT*,'POISSON DIAG, SETUP:',TSETUP
        PRINT*,'POISSON DIAG, POLYS:',TPOLYS
        PRINT*,'POISSON DIAG, FMTTM:',TFMTTM
        PRINT*,'POISSON DIAG, RUNIT:',TRUNIT
        PRINT*,'POISSON DIAG, ATIME:',ATIME
        PRINT*,'POISSON DIAG, WASTED:',TWASTED
        PRINT*,'POISSON DIAG, FLDNR:',FLDNR,FLDNR/(FLDNR+ASYMP+0.001D0)
        PRINT*,'POISSON DIAG, ASYMP:',ASYMP,ASYMP/(FLDNR+ASYMP+0.001D0)
        PRINT*,'POISSON DIAG, ACHRG:',ACHRG,CHARGE_LONG
        PRINT*,'POISSON DIAG, PRTME:',COSTPROJ
        PRINT 997,TMWRD,TMNRM,CLWRD,CLNRM,
     &            TMWRD/(CLWRD+0.001D0),TMNRM/(CLNRM+0.001D0)
        DO ICNT=1,MCNT+1
         PRINT 998,(CENTER(J,ICNT),J=1,3),NPAIRS(ICNT),NCALL,MCALL
        END DO
       END IF
 998   FORMAT(' POISSON:',3(1X,G18.6)/9X,3(1X,I18))
 997   FORMAT(' NEW TIMES:',6G12.4)
       RETURN   
       END
C
      SUBROUTINE FFFMT3(MX,NPTS,XX,CHGD,S1)
C MODIFIED BY MARK R PEDERSON (1990)
      IMPLICIT REAL*8 (A-H,O-Z)
      LOGICAL FIRST
      DIMENSION F(10,1601),ONEOVRI(5)
      DIMENSION XX(MX),S1(MX,5),CHGD(MX)
      DIMENSION G(20)
      SAVE
      DATA FIRST/.TRUE./
      DATA F(1,1)/0.0D0/
      DATA ROOTPI/1.77245385090551602728D0/
C
C        DIFFERENCE BETWEEN DOUBLE $ SINGLE  ARE
C        REAL*8 CARD  $  FORMAT 55  $  COPOUT WORD SIZE
C
      IF(NPTS.GT.MX)THEN
       PRINT *,'FFFMT3: MX MUST BE AT LEAST: ',NPTS
       CALL STOPIT
      END IF
      IF(FIRST)THEN
       ONEOVER3=1.0D0/3.0D0
       FACT=1.0D0
       DO 5 I=1,5
        ONEOVRI(I)=1.0D0/I
        FACT=FACT*ONEOVRI(I)
    5  CONTINUE
       FIRST=.FALSE.
       EPS=1.0D-12
       DO 110 I=1,10
        F(I,1)=1.0D0/(2*I-1)
  110  CONTINUE
       T=0.0D0
       DO 200 L=2,1601
        T=(1.0D-2)*(L-1)
        X=2*T
        DEN=39.0D0
        TERM=1.0D0/DEN
        SUM=TERM
        DO 130 I=2,100
         DEN=DEN+2.0D0
         TERM=TERM*X/DEN
         SUM=SUM+TERM
         Q=TERM/SUM
         IF(Q-EPS) 140,140,130
  130   CONTINUE
  140   EX=EXP(-T)
        G(20)=EX*SUM
C
C  USE DOWNWARD RECURSION
C
        DO 150 I=1,19
         K=21-I
         KK=K-1
         G(KK)=(X*G(K)+EX)/(2*KK-1)
  150   CONTINUE
        DO 160 I=1,10
         F(I,L)=G(I)
  160   CONTINUE
  200  CONTINUE
       DO 215 L=1,1601
        F(5,L)=F(5,L)/2.0D0
        F(6,L)=F(6,L)/6.0D0
 215   CONTINUE
      END IF
C
      DO IPTS=1,NPTS
       IF(XX(IPTS) .GT. 16.0D0)THEN
C       POL1= -EXP(-XX(IPTS))
        POL1= -CHGD(IPTS)
        RT=SQRT(XX(IPTS))*ROOTPI
        RECT1=0.5D0/XX(IPTS)
        S1(IPTS,1)=RECT1*(RT+POL1)
        S1(IPTS,2)=RECT1*(S1(IPTS,1)+POL1)
        S1(IPTS,3)=RECT1*(3*S1(IPTS,2)+POL1)
       ELSE
        IT=INT(100*XX(IPTS)+1.5D0)
C       POL1=EXP(-XX(IPTS))
        POL1= CHGD(IPTS)
        RECT1=2*XX(IPTS)
        DT=(1.0D-2)*(IT-1)-XX(IPTS)
        S1(IPTS,3)=F(3,IT)+DT*(F(4,IT)+DT*(F(5,IT)+DT*F(6,IT)))
        S1(IPTS,2)=(S1(IPTS,3)*RECT1+POL1)*ONEOVER3
        S1(IPTS,1)=(S1(IPTS,2)*RECT1+POL1)
       END IF
      END DO
      RETURN
      END
C
      SUBROUTINE FFFMT4(MX,NPTS,XX,CHGD,S1)
C MODIFIED BY MARK R PEDERSON (1990)
      IMPLICIT REAL*8 (A-H,O-Z)
      LOGICAL FIRST
      DIMENSION F(10,1601),ONEOVRI(5)
      DIMENSION XX(MX),S1(MX,5),CHGD(MX)
      DIMENSION G(20)
      SAVE
      DATA FIRST/.TRUE./
      DATA F(1,1)/0.0D0/
      DATA ROOTPI/1.77245385090551602728D0/
C
C        DIFFERENCE BETWEEN DOUBLE $ SINGLE  ARE
C        REAL*8 CARD  $  FORMAT 55  $  COPOUT WORD SIZE
C
      IF(NPTS.GT.MX)THEN
       PRINT *,'FFFMT4: MX MUST BE AT LEAST: ',NPTS
       CALL STOPIT
      END IF
      IF(FIRST)THEN
       FIRST=.FALSE.
       FACT=1.0D0
       ONEOVER5=1.0D0/5.0D0
       ONEOVER3=1.0D0/3.0D0
       DO 5 I=1,5
        ONEOVRI(I)=1.0D0/I
        FACT=FACT*ONEOVRI(I)
    5  CONTINUE
       EPS=1.0D-12
       DO 110 I=1,10
        F(I,1)=1.0D0/(2*I-1)
  110  CONTINUE
       T=0.0D0
       DO 200 L=2,1601
        T=(1.0D-2)*(L-1)
        X=2*T
        DEN=39.0D0
        TERM=1.0D0/DEN
        SUM=TERM
        DO 130 I=2,100
         DEN=DEN+2.0D0
         TERM=TERM*X/DEN
         SUM=SUM+TERM
         Q=TERM/SUM
         IF(Q-EPS) 140,140,130
  130   CONTINUE
  140   EX=EXP(-T)
        G(20)=EX*SUM
C
C  USE DOWNWARD RECURSION
C
        DO 150 I=1,19
         K=21-I
         KK=K-1
         G(KK)=(X*G(K)+EX)/(2*KK-1)
  150   CONTINUE
        DO 160 I=1,10
         F(I,L)=G(I)
  160   CONTINUE
  200  CONTINUE
       DO 215 L=1,1601
        F(6,L)=F(6,L)/2.0D0
        F(7,L)=F(7,L)/6.0D0
 215   CONTINUE
      END IF
C
      DO IPTS=1,NPTS
       IF(XX(IPTS) .GT. 16.0D0)THEN
C       POL1= -EXP(-XX(IPTS))
        POL1= -CHGD(IPTS)
        RT=SQRT(XX(IPTS))*ROOTPI
        RECT1=0.5D0/XX(IPTS)
        S1(IPTS,1)=RECT1*(RT+POL1)
        S1(IPTS,2)=RECT1*(S1(IPTS,1)+POL1)
        S1(IPTS,3)=RECT1*(3*S1(IPTS,2)+POL1)
        S1(IPTS,4)=RECT1*(5*S1(IPTS,3)+POL1)
       ELSE
        IT=INT(100*XX(IPTS)+1.5D0)
C       POL1=EXP(-XX(IPTS))
        POL1= CHGD(IPTS)
        RECT1=2*XX(IPTS)
        DT=(1.0D-2)*(IT-1)-XX(IPTS)
        S1(IPTS,4)=F(4,IT)+DT*( F(5,IT)+DT*( F(6,IT)+DT*F(7,IT)))
        S1(IPTS,3)=(S1(IPTS,4)*RECT1+POL1)*ONEOVER5
        S1(IPTS,2)=(S1(IPTS,3)*RECT1+POL1)*ONEOVER3
        S1(IPTS,1)=(S1(IPTS,2)*RECT1+POL1)
       END IF
      END DO
      RETURN
      END
C
C ******************************************************
C
      SUBROUTINE FFFMTC(MX,NPTS,XX,CHGD,S1) 
C ORIGINAL VERSION BY SUNGGI CHUNG
C MODIFIED BY MARK R PEDERSON (1990)
      IMPLICIT REAL*8 (A-H,O-Z)
      LOGICAL FIRST
      DIMENSION F(10,1601),ONEOVRI(5)
      DIMENSION XX(MX),S1(MX,5),CHGD(MX)
      DIMENSION G(20)
      SAVE
      DATA FIRST/.TRUE./
      DATA F(1,1)/0.0D0/
      DATA ROOTPI/1.77245385090551602728D0/
C
C        DIFFERENCE BETWEEN DOUBLE $ SINGLE  ARE
C        REAL*8 CARD  $  FORMAT 55  $  COPOUT WORD SIZE
C
      IF(NPTS.GT.MX)THEN
       PRINT *,'FFFMTC: MX MUST BE AT LEAST: ',NPTS
       CALL STOPIT
      END IF
      IF (FIRST) THEN
       FIRST=.FALSE.
       FACT=1.0D0
       ONEOVER7=1.0D0/7.0D0
       ONEOVER5=1.0D0/5.0D0
       ONEOVER3=1.0D0/3.0D0
       DO 10 I=1,5
        AI=I
        ONEOVRI(I)=1.0D0/AI
        FACT=FACT*ONEOVRI(I)
   10  CONTINUE
       EPS=1.0D-12
       DO 20 I=1,10
        F(I,1)=1.0D0/(2*I-1)
   20  CONTINUE
       T=0.0D0
       DO 200 L=2,1601
        T=(1.0D-2)*(L-1)
        X=2*T
        DEN=39.0D0
        TERM=1.0D0/DEN
        SUM=TERM
        DO 130 I=2,100
         DEN=DEN+2.0D0
         TERM=TERM*X/DEN
         SUM=SUM+TERM
         Q=TERM/SUM
         IF(Q-EPS) 140,140,130
  130   CONTINUE
  140   EX=EXP(-T)
        G(20)=EX*SUM
C
C  USE DOWNWARD RECURSION
C
        DO 150 I=1,19
         K=21-I
         KK=K-1
         G(KK)=(X*G(K)+EX)/(2*KK-1)
  150   CONTINUE
        DO 160 I=1,10
         F(I,L)=G(I)
  160   CONTINUE
  200  CONTINUE
       DO 215 L=1,1601
        F(7,L)=F(7,L)/2.0D0
        F(8,L)=F(8,L)/6.0D0
  215  CONTINUE
      END IF
C
      DO IPTS=1,NPTS
       IF(XX(IPTS) .GT. 16.0D0)THEN
C       POL1= -EXP(-XX(IPTS))
        POL1= -CHGD(IPTS)
        RT=SQRT(XX(IPTS))*ROOTPI
        RECT1=0.5D0/XX(IPTS)
        S1(IPTS,1)=RECT1*(RT+POL1)
        S1(IPTS,2)=RECT1*(S1(IPTS,1)+POL1)
        S1(IPTS,3)=RECT1*(3*S1(IPTS,2)+POL1)
        S1(IPTS,4)=RECT1*(5*S1(IPTS,3)+POL1)
        S1(IPTS,5)=RECT1*(7*S1(IPTS,4)+POL1)
       ELSE
        IT=INT(100*XX(IPTS)+1.5D0)
C       POL1=EXP(-XX(IPTS))
        POL1=CHGD(IPTS)
        RECT1=2*XX(IPTS)
        DT=(1.0D-2)*(IT-1)-XX(IPTS)
        S1(IPTS,5)=F(5,IT)+DT*(F(6,IT)+DT*(F(7,IT)+DT*F(8,IT)))
        S1(IPTS,4)=(S1(IPTS,5)*RECT1+POL1)*ONEOVER7
        S1(IPTS,3)=(S1(IPTS,4)*RECT1+POL1)*ONEOVER5
        S1(IPTS,2)=(S1(IPTS,3)*RECT1+POL1)*ONEOVER3
        S1(IPTS,1)=(S1(IPTS,2)*RECT1+POL1)
       END IF
      END DO
      RETURN
      END 
C
      SUBROUTINE GINTED(A1,A2,A,B,W)
      IMPLICIT  REAL*8 (A-H,O-Z)
      DIMENSION A(3),B(3),W(10,10,4),L3(3,4)
      DIMENSION V(3,3,5,3)
      DIMENSION ML(10,3)
      SAVE
      DATA  L3/2,1,1,  1,2,1,  1,1,2,  1,1,1/
      DATA ML/1,2,1,1,3,1,1,2,2,1,
     1        1,1,2,1,1,3,1,2,1,2,
     2        1,1,1,2,1,1,3,1,2,2/
      AT=1.0D0/(A1+A2)
      Q1=0.5D0*AT
      Q2=Q1*Q1
      XS=0.0D0
      DO 10 IFT=1,3
      XS=XS+(A1*A2*((A(IFT)-B(IFT))**2))*AT
      D=(A1*A(IFT)+A2*B(IFT))*AT
      F1=D-A(IFT)
      F2=D-B(IFT)
      F3=D
      F001=F3
      F010=F2
      F011=F010*F3
      F020=F010*F2
      F021=F020*F3
      F100=F1
      F101=F100*F3
      F110=F100*F2
      F111=F110*F3
      F120=F110*F2
      F121=F120*F3
      F200=F100*F1
      F201=F200*F3
      F210=F200*F2
      F211=F210*F3
      F220=F210*F2
      F221=F220*F3
      V(1,1,1,IFT)=1
      V(1,2,1,IFT)=+F010
      V(1,3,1,IFT)=+F020+Q1
      V(2,1,1,IFT)=+F100
      V(2,2,1,IFT)=+F110+Q1
      V(2,3,1,IFT)=+F120+Q1*F100+2*Q1*F010
      V(3,1,1,IFT)=+F200+Q1
      V(3,2,1,IFT)=+F210+2*Q1*F100+Q1*F010
      V(3,3,1,IFT)=+F220+Q1*F200+4*Q1*F110+Q1*F020+3*Q2
      V(1,1,2,IFT)=+F001
      V(1,2,2,IFT)=+F011+Q1
      V(1,3,2,IFT)=+F021+2*Q1*F010+Q1*F001
      V(2,1,2,IFT)=+F101+Q1
      V(2,2,2,IFT)=+F111+Q1*F100+Q1*F010+Q1*F001
      V(2,3,2,IFT)=+F121+2*Q1*F110+Q1*F101+Q1*F020+2*Q1*F011+3*Q2
      V(3,1,2,IFT)=+F201+2*Q1*F100+Q1*F001
      V(3,2,2,IFT)=+F211+Q1*F200+2*Q1*F110+2*Q1*F101+Q1*F011+3*Q2
      V(3,3,2,IFT)=+F221+2*Q1*F210+Q1*F201+2*Q1*F120+4*Q1*F111
     &             +6*Q2*F100+Q1*F021+6*Q2*F010+3*Q2*F001
 10   CONTINUE
      D=EXP(-XS)*(SQRT(3.14159265358979324D0*AT)**3)
      DO 40 K=1,4 
       DO 35 J=1,10
        DO 30 I=1,10
         W(I,J,K)=V(ML(I,1),ML(J,1),L3(1,K),1)*
     &            V(ML(I,2),ML(J,2),L3(2,K),2)*
     &            V(ML(I,3),ML(J,3),L3(3,K),3)
   30   CONTINUE
   35  CONTINUE
   40 CONTINUE
      DO 50 K=1,4
       DO 48 J=1,10
        DO 46 I=1,10
         W(I,J,K)=W(I,J,K)*D
  46    CONTINUE
  48   CONTINUE
  50  CONTINUE
      END
C
C HERE STARTS THE PART WHERE ALL BEAUTIFYING IS HOPELESS - DVP
C
       SUBROUTINE GTDNCF(GGA,ALP,A,BET,B,GAM,COEF,DOEF,DLT,C)
C WRITTEN BY MARK R PEDERSON 17-SEPTEMBER 1997
       IMPLICIT REAL*8 (A-H,O-Z)
       LOGICAL GGA
       DIMENSION A(3),B(3),C(3)
       DIMENSION COEF(35),GAM(10,10),DOEF(20,10)
           DLT=ALP+BET
           ARG=0.0D0
           DO I=1,3
           C(I)=(ALP*A(I)+BET*B(I))/DLT
           ARG=ARG+(A(I)-B(I))**2
           END DO
           ARG=ARG*ALP*BET/DLT

       CXMAX1=C(1)-A(1)
       CYMAY1=C(2)-A(2)
       CZMAZ1=C(3)-A(3)
       CXMAX2=CXMAX1*CXMAX1   
       CYMAY2=CYMAY1*CYMAY1   
       CZMAZ2=CZMAZ1*CZMAZ1   
       CXMBX1=C(1)-B(1)
       CYMBY1=C(2)-B(2)
       CZMBZ1=C(3)-B(3)
       CXMBX2=CXMBX1*CXMBX1   
       CYMBY2=CYMBY1*CYMBY1   
       CZMBZ2=CZMBZ1*CZMBZ1   
C      POLY( 1)=1.0D0                      
       COEF( 1)=0.0D0
     & +                                                GAM( 1, 1)
     & +             CXMBX1*                            GAM( 1, 2)
     & +                           CYMBY1*              GAM( 1, 3)
     & +                                         CZMBZ1*GAM( 1, 4)
     & +             CXMBX2*                            GAM( 1, 5)
     & +                           CYMBY2*              GAM( 1, 6)
     & +                                         CZMBZ2*GAM( 1, 7)
     & +             CXMBX1*       CYMBY1*              GAM( 1, 8)
     & +             CXMBX1*                     CZMBZ1*GAM( 1, 9)
     & +                           CYMBY1*       CZMBZ1*GAM( 1,10)
     & +      CXMAX1*                                   GAM( 2, 1)
     & +      CXMAX1*CXMBX1*                            GAM( 2, 2)
     & +      CXMAX1*              CYMBY1*              GAM( 2, 3)
     & +      CXMAX1*                            CZMBZ1*GAM( 2, 4)
     & +      CXMAX1*CXMBX2*                            GAM( 2, 5)
     & +      CXMAX1*              CYMBY2*              GAM( 2, 6)
     & +      CXMAX1*                            CZMBZ2*GAM( 2, 7)
     & +      CXMAX1*CXMBX1*       CYMBY1*              GAM( 2, 8)
     & +      CXMAX1*CXMBX1*                     CZMBZ1*GAM( 2, 9)
       COEF( 1)=COEF( 1)
     & +      CXMAX1*              CYMBY1*       CZMBZ1*GAM( 2,10)
     & +                    CYMAY1*                     GAM( 3, 1)
     & +             CXMBX1*CYMAY1*                     GAM( 3, 2)
     & +                    CYMAY1*CYMBY1*              GAM( 3, 3)
     & +                    CYMAY1*              CZMBZ1*GAM( 3, 4)
     & +             CXMBX2*CYMAY1*                     GAM( 3, 5)
     & +                    CYMAY1*CYMBY2*              GAM( 3, 6)
     & +                    CYMAY1*              CZMBZ2*GAM( 3, 7)
     & +             CXMBX1*CYMAY1*CYMBY1*              GAM( 3, 8)
     & +             CXMBX1*CYMAY1*              CZMBZ1*GAM( 3, 9)
     & +                    CYMAY1*CYMBY1*       CZMBZ1*GAM( 3,10)
     & +                                  CZMAZ1*       GAM( 4, 1)
     & +             CXMBX1*              CZMAZ1*       GAM( 4, 2)
     & +                           CYMBY1*CZMAZ1*       GAM( 4, 3)
     & +                                  CZMAZ1*CZMBZ1*GAM( 4, 4)
     & +             CXMBX2*              CZMAZ1*       GAM( 4, 5)
     & +                           CYMBY2*CZMAZ1*       GAM( 4, 6)
     & +                                  CZMAZ1*CZMBZ2*GAM( 4, 7)
     & +             CXMBX1*       CYMBY1*CZMAZ1*       GAM( 4, 8)
       COEF( 1)=COEF( 1)
     & +             CXMBX1*              CZMAZ1*CZMBZ1*GAM( 4, 9)
     & +                           CYMBY1*CZMAZ1*CZMBZ1*GAM( 4,10)
     & +      CXMAX2*                                   GAM( 5, 1)
     & +      CXMAX2*CXMBX1*                            GAM( 5, 2)
     & +      CXMAX2*              CYMBY1*              GAM( 5, 3)
     & +      CXMAX2*                            CZMBZ1*GAM( 5, 4)
     & +      CXMAX2*CXMBX2*                            GAM( 5, 5)
     & +      CXMAX2*              CYMBY2*              GAM( 5, 6)
     & +      CXMAX2*                            CZMBZ2*GAM( 5, 7)
     & +      CXMAX2*CXMBX1*       CYMBY1*              GAM( 5, 8)
     & +      CXMAX2*CXMBX1*                     CZMBZ1*GAM( 5, 9)
     & +      CXMAX2*              CYMBY1*       CZMBZ1*GAM( 5,10)
     & +                    CYMAY2*                     GAM( 6, 1)
     & +             CXMBX1*CYMAY2*                     GAM( 6, 2)
     & +                    CYMAY2*CYMBY1*              GAM( 6, 3)
     & +                    CYMAY2*              CZMBZ1*GAM( 6, 4)
     & +             CXMBX2*CYMAY2*                     GAM( 6, 5)
     & +                    CYMAY2*CYMBY2*              GAM( 6, 6)
     & +                    CYMAY2*              CZMBZ2*GAM( 6, 7)
       COEF( 1)=COEF( 1)
     & +             CXMBX1*CYMAY2*CYMBY1*              GAM( 6, 8)
     & +             CXMBX1*CYMAY2*              CZMBZ1*GAM( 6, 9)
     & +                    CYMAY2*CYMBY1*       CZMBZ1*GAM( 6,10)
     & +                                  CZMAZ2*       GAM( 7, 1)
     & +             CXMBX1*              CZMAZ2*       GAM( 7, 2)
     & +                           CYMBY1*CZMAZ2*       GAM( 7, 3)
     & +                                  CZMAZ2*CZMBZ1*GAM( 7, 4)
     & +             CXMBX2*              CZMAZ2*       GAM( 7, 5)
     & +                           CYMBY2*CZMAZ2*       GAM( 7, 6)
     & +                                  CZMAZ2*CZMBZ2*GAM( 7, 7)
     & +             CXMBX1*       CYMBY1*CZMAZ2*       GAM( 7, 8)
     & +             CXMBX1*              CZMAZ2*CZMBZ1*GAM( 7, 9)
     & +                           CYMBY1*CZMAZ2*CZMBZ1*GAM( 7,10)
     & +      CXMAX1*       CYMAY1*                     GAM( 8, 1)
     & +      CXMAX1*CXMBX1*CYMAY1*                     GAM( 8, 2)
     & +      CXMAX1*       CYMAY1*CYMBY1*              GAM( 8, 3)
     & +      CXMAX1*       CYMAY1*              CZMBZ1*GAM( 8, 4)
     & +      CXMAX1*CXMBX2*CYMAY1*                     GAM( 8, 5)
     & +      CXMAX1*       CYMAY1*CYMBY2*              GAM( 8, 6)
       COEF( 1)=COEF( 1)
     & +      CXMAX1*       CYMAY1*              CZMBZ2*GAM( 8, 7)
     & +      CXMAX1*CXMBX1*CYMAY1*CYMBY1*              GAM( 8, 8)
     & +      CXMAX1*CXMBX1*CYMAY1*              CZMBZ1*GAM( 8, 9)
     & +      CXMAX1*       CYMAY1*CYMBY1*       CZMBZ1*GAM( 8,10)
     & +      CXMAX1*                     CZMAZ1*       GAM( 9, 1)
     & +      CXMAX1*CXMBX1*              CZMAZ1*       GAM( 9, 2)
     & +      CXMAX1*              CYMBY1*CZMAZ1*       GAM( 9, 3)
     & +      CXMAX1*                     CZMAZ1*CZMBZ1*GAM( 9, 4)
     & +      CXMAX1*CXMBX2*              CZMAZ1*       GAM( 9, 5)
     & +      CXMAX1*              CYMBY2*CZMAZ1*       GAM( 9, 6)
     & +      CXMAX1*                     CZMAZ1*CZMBZ2*GAM( 9, 7)
     & +      CXMAX1*CXMBX1*       CYMBY1*CZMAZ1*       GAM( 9, 8)
     & +      CXMAX1*CXMBX1*              CZMAZ1*CZMBZ1*GAM( 9, 9)
     & +      CXMAX1*              CYMBY1*CZMAZ1*CZMBZ1*GAM( 9,10)
     & +                    CYMAY1*       CZMAZ1*       GAM(10, 1)
     & +             CXMBX1*CYMAY1*       CZMAZ1*       GAM(10, 2)
     & +                    CYMAY1*CYMBY1*CZMAZ1*       GAM(10, 3)
     & +                    CYMAY1*       CZMAZ1*CZMBZ1*GAM(10, 4)
     & +             CXMBX2*CYMAY1*       CZMAZ1*       GAM(10, 5)
       COEF( 1)=COEF( 1)
     & +                    CYMAY1*CYMBY2*CZMAZ1*       GAM(10, 6)
     & +                    CYMAY1*       CZMAZ1*CZMBZ2*GAM(10, 7)
     & +             CXMBX1*CYMAY1*CYMBY1*CZMAZ1*       GAM(10, 8)
     & +             CXMBX1*CYMAY1*       CZMAZ1*CZMBZ1*GAM(10, 9)
     & +                    CYMAY1*CYMBY1*CZMAZ1*CZMBZ1*GAM(10,10)
  
C      POLY( 2)=1.0D0              *ZZMCZ1 
       COEF( 2)=0.0D0
     & +                                                GAM( 1, 4)
     & +2.0D0*                                   CZMBZ1*GAM( 1, 7)
     & +             CXMBX1*                            GAM( 1, 9)
     & +                           CYMBY1*              GAM( 1,10)
     & +      CXMAX1*                                   GAM( 2, 4)
     & +2.0D0*CXMAX1*                            CZMBZ1*GAM( 2, 7)
     & +      CXMAX1*CXMBX1*                            GAM( 2, 9)
     & +      CXMAX1*              CYMBY1*              GAM( 2,10)
     & +                    CYMAY1*                     GAM( 3, 4)
     & +2.0D0*              CYMAY1*              CZMBZ1*GAM( 3, 7)
     & +             CXMBX1*CYMAY1*                     GAM( 3, 9)
     & +                    CYMAY1*CYMBY1*              GAM( 3,10)
     & +                                                GAM( 4, 1)
     & +             CXMBX1*                            GAM( 4, 2)
     & +                           CYMBY1*              GAM( 4, 3)
     & +                                  CZMAZ1*       GAM( 4, 4)
     & +                                         CZMBZ1*GAM( 4, 4)
     & +             CXMBX2*                            GAM( 4, 5)
     & +                           CYMBY2*              GAM( 4, 6)
       COEF( 2)=COEF( 2)
     & +2.0D0*                            CZMAZ1*CZMBZ1*GAM( 4, 7)
     & +                                         CZMBZ2*GAM( 4, 7)
     & +             CXMBX1*       CYMBY1*              GAM( 4, 8)
     & +             CXMBX1*              CZMAZ1*       GAM( 4, 9)
     & +             CXMBX1*                     CZMBZ1*GAM( 4, 9)
     & +                           CYMBY1*CZMAZ1*       GAM( 4,10)
     & +                           CYMBY1*       CZMBZ1*GAM( 4,10)
     & +      CXMAX2*                                   GAM( 5, 4)
     & +2.0D0*CXMAX2*                            CZMBZ1*GAM( 5, 7)
     & +      CXMAX2*CXMBX1*                            GAM( 5, 9)
     & +      CXMAX2*              CYMBY1*              GAM( 5,10)
     & +                    CYMAY2*                     GAM( 6, 4)
     & +2.0D0*              CYMAY2*              CZMBZ1*GAM( 6, 7)
     & +             CXMBX1*CYMAY2*                     GAM( 6, 9)
     & +                    CYMAY2*CYMBY1*              GAM( 6,10)
     & +2.0D0*                            CZMAZ1*       GAM( 7, 1)
     & +2.0D0*       CXMBX1*              CZMAZ1*       GAM( 7, 2)
     & +2.0D0*                     CYMBY1*CZMAZ1*       GAM( 7, 3)
     & +                                  CZMAZ2*       GAM( 7, 4)
       COEF( 2)=COEF( 2)
     & +2.0D0*                            CZMAZ1*CZMBZ1*GAM( 7, 4)
     & +2.0D0*       CXMBX2*              CZMAZ1*       GAM( 7, 5)
     & +2.0D0*                     CYMBY2*CZMAZ1*       GAM( 7, 6)
     & +2.0D0*                            CZMAZ2*CZMBZ1*GAM( 7, 7)
     & +2.0D0*                            CZMAZ1*CZMBZ2*GAM( 7, 7)
     & +2.0D0*       CXMBX1*       CYMBY1*CZMAZ1*       GAM( 7, 8)
     & +             CXMBX1*              CZMAZ2*       GAM( 7, 9)
     & +2.0D0*       CXMBX1*              CZMAZ1*CZMBZ1*GAM( 7, 9)
     & +                           CYMBY1*CZMAZ2*       GAM( 7,10)
     & +2.0D0*                     CYMBY1*CZMAZ1*CZMBZ1*GAM( 7,10)
     & +      CXMAX1*       CYMAY1*                     GAM( 8, 4)
     & +2.0D0*CXMAX1*       CYMAY1*              CZMBZ1*GAM( 8, 7)
     & +      CXMAX1*CXMBX1*CYMAY1*                     GAM( 8, 9)
     & +      CXMAX1*       CYMAY1*CYMBY1*              GAM( 8,10)
     & +      CXMAX1*                                   GAM( 9, 1)
     & +      CXMAX1*CXMBX1*                            GAM( 9, 2)
     & +      CXMAX1*              CYMBY1*              GAM( 9, 3)
     & +      CXMAX1*                     CZMAZ1*       GAM( 9, 4)
     & +      CXMAX1*                            CZMBZ1*GAM( 9, 4)
       COEF( 2)=COEF( 2)
     & +      CXMAX1*CXMBX2*                            GAM( 9, 5)
     & +      CXMAX1*              CYMBY2*              GAM( 9, 6)
     & +2.0D0*CXMAX1*                     CZMAZ1*CZMBZ1*GAM( 9, 7)
     & +      CXMAX1*                            CZMBZ2*GAM( 9, 7)
     & +      CXMAX1*CXMBX1*       CYMBY1*              GAM( 9, 8)
     & +      CXMAX1*CXMBX1*              CZMAZ1*       GAM( 9, 9)
     & +      CXMAX1*CXMBX1*                     CZMBZ1*GAM( 9, 9)
     & +      CXMAX1*              CYMBY1*CZMAZ1*       GAM( 9,10)
     & +      CXMAX1*              CYMBY1*       CZMBZ1*GAM( 9,10)
     & +                    CYMAY1*                     GAM(10, 1)
     & +             CXMBX1*CYMAY1*                     GAM(10, 2)
     & +                    CYMAY1*CYMBY1*              GAM(10, 3)
     & +                    CYMAY1*       CZMAZ1*       GAM(10, 4)
     & +                    CYMAY1*              CZMBZ1*GAM(10, 4)
     & +             CXMBX2*CYMAY1*                     GAM(10, 5)
     & +                    CYMAY1*CYMBY2*              GAM(10, 6)
     & +2.0D0*              CYMAY1*       CZMAZ1*CZMBZ1*GAM(10, 7)
     & +                    CYMAY1*              CZMBZ2*GAM(10, 7)
     & +             CXMBX1*CYMAY1*CYMBY1*              GAM(10, 8)
       COEF( 2)=COEF( 2)
     & +             CXMBX1*CYMAY1*       CZMAZ1*       GAM(10, 9)
     & +             CXMBX1*CYMAY1*              CZMBZ1*GAM(10, 9)
     & +                    CYMAY1*CYMBY1*CZMAZ1*       GAM(10,10)
     & +                    CYMAY1*CYMBY1*       CZMBZ1*GAM(10,10)
  
C      POLY( 3)=1.0D0       *YYMCY1        
       COEF( 3)=0.0D0
     & +                                                GAM( 1, 3)
     & +2.0D0*                     CYMBY1*              GAM( 1, 6)
     & +             CXMBX1*                            GAM( 1, 8)
     & +                                         CZMBZ1*GAM( 1,10)
     & +      CXMAX1*                                   GAM( 2, 3)
     & +2.0D0*CXMAX1*              CYMBY1*              GAM( 2, 6)
     & +      CXMAX1*CXMBX1*                            GAM( 2, 8)
     & +      CXMAX1*                            CZMBZ1*GAM( 2,10)
     & +                                                GAM( 3, 1)
     & +             CXMBX1*                            GAM( 3, 2)
     & +                    CYMAY1*                     GAM( 3, 3)
     & +                           CYMBY1*              GAM( 3, 3)
     & +                                         CZMBZ1*GAM( 3, 4)
     & +             CXMBX2*                            GAM( 3, 5)
     & +2.0D0*              CYMAY1*CYMBY1*              GAM( 3, 6)
     & +                           CYMBY2*              GAM( 3, 6)
     & +                                         CZMBZ2*GAM( 3, 7)
     & +             CXMBX1*CYMAY1*                     GAM( 3, 8)
     & +             CXMBX1*       CYMBY1*              GAM( 3, 8)
       COEF( 3)=COEF( 3)
     & +             CXMBX1*                     CZMBZ1*GAM( 3, 9)
     & +                    CYMAY1*              CZMBZ1*GAM( 3,10)
     & +                           CYMBY1*       CZMBZ1*GAM( 3,10)
     & +                                  CZMAZ1*       GAM( 4, 3)
     & +2.0D0*                     CYMBY1*CZMAZ1*       GAM( 4, 6)
     & +             CXMBX1*              CZMAZ1*       GAM( 4, 8)
     & +                                  CZMAZ1*CZMBZ1*GAM( 4,10)
     & +      CXMAX2*                                   GAM( 5, 3)
     & +2.0D0*CXMAX2*              CYMBY1*              GAM( 5, 6)
     & +      CXMAX2*CXMBX1*                            GAM( 5, 8)
     & +      CXMAX2*                            CZMBZ1*GAM( 5,10)
     & +2.0D0*              CYMAY1*                     GAM( 6, 1)
     & +2.0D0*       CXMBX1*CYMAY1*                     GAM( 6, 2)
     & +                    CYMAY2*                     GAM( 6, 3)
     & +2.0D0*              CYMAY1*CYMBY1*              GAM( 6, 3)
     & +2.0D0*              CYMAY1*              CZMBZ1*GAM( 6, 4)
     & +2.0D0*       CXMBX2*CYMAY1*                     GAM( 6, 5)
     & +2.0D0*              CYMAY2*CYMBY1*              GAM( 6, 6)
     & +2.0D0*              CYMAY1*CYMBY2*              GAM( 6, 6)
       COEF( 3)=COEF( 3)
     & +2.0D0*              CYMAY1*              CZMBZ2*GAM( 6, 7)
     & +             CXMBX1*CYMAY2*                     GAM( 6, 8)
     & +2.0D0*       CXMBX1*CYMAY1*CYMBY1*              GAM( 6, 8)
     & +2.0D0*       CXMBX1*CYMAY1*              CZMBZ1*GAM( 6, 9)
     & +                    CYMAY2*              CZMBZ1*GAM( 6,10)
     & +2.0D0*              CYMAY1*CYMBY1*       CZMBZ1*GAM( 6,10)
     & +                                  CZMAZ2*       GAM( 7, 3)
     & +2.0D0*                     CYMBY1*CZMAZ2*       GAM( 7, 6)
     & +             CXMBX1*              CZMAZ2*       GAM( 7, 8)
     & +                                  CZMAZ2*CZMBZ1*GAM( 7,10)
     & +      CXMAX1*                                   GAM( 8, 1)
     & +      CXMAX1*CXMBX1*                            GAM( 8, 2)
     & +      CXMAX1*       CYMAY1*                     GAM( 8, 3)
     & +      CXMAX1*              CYMBY1*              GAM( 8, 3)
     & +      CXMAX1*                            CZMBZ1*GAM( 8, 4)
     & +      CXMAX1*CXMBX2*                            GAM( 8, 5)
     & +2.0D0*CXMAX1*       CYMAY1*CYMBY1*              GAM( 8, 6)
     & +      CXMAX1*              CYMBY2*              GAM( 8, 6)
     & +      CXMAX1*                            CZMBZ2*GAM( 8, 7)
       COEF( 3)=COEF( 3)
     & +      CXMAX1*CXMBX1*CYMAY1*                     GAM( 8, 8)
     & +      CXMAX1*CXMBX1*       CYMBY1*              GAM( 8, 8)
     & +      CXMAX1*CXMBX1*                     CZMBZ1*GAM( 8, 9)
     & +      CXMAX1*       CYMAY1*              CZMBZ1*GAM( 8,10)
     & +      CXMAX1*              CYMBY1*       CZMBZ1*GAM( 8,10)
     & +      CXMAX1*                     CZMAZ1*       GAM( 9, 3)
     & +2.0D0*CXMAX1*              CYMBY1*CZMAZ1*       GAM( 9, 6)
     & +      CXMAX1*CXMBX1*              CZMAZ1*       GAM( 9, 8)
     & +      CXMAX1*                     CZMAZ1*CZMBZ1*GAM( 9,10)
     & +                                  CZMAZ1*       GAM(10, 1)
     & +             CXMBX1*              CZMAZ1*       GAM(10, 2)
     & +                    CYMAY1*       CZMAZ1*       GAM(10, 3)
     & +                           CYMBY1*CZMAZ1*       GAM(10, 3)
     & +                                  CZMAZ1*CZMBZ1*GAM(10, 4)
     & +             CXMBX2*              CZMAZ1*       GAM(10, 5)
     & +2.0D0*              CYMAY1*CYMBY1*CZMAZ1*       GAM(10, 6)
     & +                           CYMBY2*CZMAZ1*       GAM(10, 6)
     & +                                  CZMAZ1*CZMBZ2*GAM(10, 7)
     & +             CXMBX1*CYMAY1*       CZMAZ1*       GAM(10, 8)
       COEF( 3)=COEF( 3)
     & +             CXMBX1*       CYMBY1*CZMAZ1*       GAM(10, 8)
     & +             CXMBX1*              CZMAZ1*CZMBZ1*GAM(10, 9)
     & +                    CYMAY1*       CZMAZ1*CZMBZ1*GAM(10,10)
     & +                           CYMBY1*CZMAZ1*CZMBZ1*GAM(10,10)
  
C      POLY( 4)=      XXMCX1               
       COEF( 4)=0.0D0
     & +                                                GAM( 1, 2)
     & +2.0D0*       CXMBX1*                            GAM( 1, 5)
     & +                           CYMBY1*              GAM( 1, 8)
     & +                                         CZMBZ1*GAM( 1, 9)
     & +                                                GAM( 2, 1)
     & +      CXMAX1*                                   GAM( 2, 2)
     & +             CXMBX1*                            GAM( 2, 2)
     & +                           CYMBY1*              GAM( 2, 3)
     & +                                         CZMBZ1*GAM( 2, 4)
     & +2.0D0*CXMAX1*CXMBX1*                            GAM( 2, 5)
     & +             CXMBX2*                            GAM( 2, 5)
     & +                           CYMBY2*              GAM( 2, 6)
     & +                                         CZMBZ2*GAM( 2, 7)
     & +      CXMAX1*              CYMBY1*              GAM( 2, 8)
     & +             CXMBX1*       CYMBY1*              GAM( 2, 8)
     & +      CXMAX1*                            CZMBZ1*GAM( 2, 9)
     & +             CXMBX1*                     CZMBZ1*GAM( 2, 9)
     & +                           CYMBY1*       CZMBZ1*GAM( 2,10)
     & +                    CYMAY1*                     GAM( 3, 2)
       COEF( 4)=COEF( 4)
     & +2.0D0*       CXMBX1*CYMAY1*                     GAM( 3, 5)
     & +                    CYMAY1*CYMBY1*              GAM( 3, 8)
     & +                    CYMAY1*              CZMBZ1*GAM( 3, 9)
     & +                                  CZMAZ1*       GAM( 4, 2)
     & +2.0D0*       CXMBX1*              CZMAZ1*       GAM( 4, 5)
     & +                           CYMBY1*CZMAZ1*       GAM( 4, 8)
     & +                                  CZMAZ1*CZMBZ1*GAM( 4, 9)
     & +2.0D0*CXMAX1*                                   GAM( 5, 1)
     & +      CXMAX2*                                   GAM( 5, 2)
     & +2.0D0*CXMAX1*CXMBX1*                            GAM( 5, 2)
     & +2.0D0*CXMAX1*              CYMBY1*              GAM( 5, 3)
     & +2.0D0*CXMAX1*                            CZMBZ1*GAM( 5, 4)
     & +2.0D0*CXMAX2*CXMBX1*                            GAM( 5, 5)
     & +2.0D0*CXMAX1*CXMBX2*                            GAM( 5, 5)
     & +2.0D0*CXMAX1*              CYMBY2*              GAM( 5, 6)
     & +2.0D0*CXMAX1*                            CZMBZ2*GAM( 5, 7)
     & +      CXMAX2*              CYMBY1*              GAM( 5, 8)
     & +2.0D0*CXMAX1*CXMBX1*       CYMBY1*              GAM( 5, 8)
     & +      CXMAX2*                            CZMBZ1*GAM( 5, 9)
       COEF( 4)=COEF( 4)
     & +2.0D0*CXMAX1*CXMBX1*                     CZMBZ1*GAM( 5, 9)
     & +2.0D0*CXMAX1*              CYMBY1*       CZMBZ1*GAM( 5,10)
     & +                    CYMAY2*                     GAM( 6, 2)
     & +2.0D0*       CXMBX1*CYMAY2*                     GAM( 6, 5)
     & +                    CYMAY2*CYMBY1*              GAM( 6, 8)
     & +                    CYMAY2*              CZMBZ1*GAM( 6, 9)
     & +                                  CZMAZ2*       GAM( 7, 2)
     & +2.0D0*       CXMBX1*              CZMAZ2*       GAM( 7, 5)
     & +                           CYMBY1*CZMAZ2*       GAM( 7, 8)
     & +                                  CZMAZ2*CZMBZ1*GAM( 7, 9)
     & +                    CYMAY1*                     GAM( 8, 1)
     & +      CXMAX1*       CYMAY1*                     GAM( 8, 2)
     & +             CXMBX1*CYMAY1*                     GAM( 8, 2)
     & +                    CYMAY1*CYMBY1*              GAM( 8, 3)
     & +                    CYMAY1*              CZMBZ1*GAM( 8, 4)
     & +2.0D0*CXMAX1*CXMBX1*CYMAY1*                     GAM( 8, 5)
     & +             CXMBX2*CYMAY1*                     GAM( 8, 5)
     & +                    CYMAY1*CYMBY2*              GAM( 8, 6)
     & +                    CYMAY1*              CZMBZ2*GAM( 8, 7)
       COEF( 4)=COEF( 4)
     & +      CXMAX1*       CYMAY1*CYMBY1*              GAM( 8, 8)
     & +             CXMBX1*CYMAY1*CYMBY1*              GAM( 8, 8)
     & +      CXMAX1*       CYMAY1*              CZMBZ1*GAM( 8, 9)
     & +             CXMBX1*CYMAY1*              CZMBZ1*GAM( 8, 9)
     & +                    CYMAY1*CYMBY1*       CZMBZ1*GAM( 8,10)
     & +                                  CZMAZ1*       GAM( 9, 1)
     & +      CXMAX1*                     CZMAZ1*       GAM( 9, 2)
     & +             CXMBX1*              CZMAZ1*       GAM( 9, 2)
     & +                           CYMBY1*CZMAZ1*       GAM( 9, 3)
     & +                                  CZMAZ1*CZMBZ1*GAM( 9, 4)
     & +2.0D0*CXMAX1*CXMBX1*              CZMAZ1*       GAM( 9, 5)
     & +             CXMBX2*              CZMAZ1*       GAM( 9, 5)
     & +                           CYMBY2*CZMAZ1*       GAM( 9, 6)
     & +                                  CZMAZ1*CZMBZ2*GAM( 9, 7)
     & +      CXMAX1*              CYMBY1*CZMAZ1*       GAM( 9, 8)
     & +             CXMBX1*       CYMBY1*CZMAZ1*       GAM( 9, 8)
     & +      CXMAX1*                     CZMAZ1*CZMBZ1*GAM( 9, 9)
     & +             CXMBX1*              CZMAZ1*CZMBZ1*GAM( 9, 9)
     & +                           CYMBY1*CZMAZ1*CZMBZ1*GAM( 9,10)
       COEF( 4)=COEF( 4)
     & +                    CYMAY1*       CZMAZ1*       GAM(10, 2)
     & +2.0D0*       CXMBX1*CYMAY1*       CZMAZ1*       GAM(10, 5)
     & +                    CYMAY1*CYMBY1*CZMAZ1*       GAM(10, 8)
     & +                    CYMAY1*       CZMAZ1*CZMBZ1*GAM(10, 9)
  
C      POLY( 5)=1.0D0              *ZZMCZ2 
       COEF( 5)=0.0D0
     & +                                                GAM( 1, 7)
     & +      CXMAX1*                                   GAM( 2, 7)
     & +                    CYMAY1*                     GAM( 3, 7)
     & +                                                GAM( 4, 4)
     & +                                  CZMAZ1*       GAM( 4, 7)
     & +2.0D0*                                   CZMBZ1*GAM( 4, 7)
     & +             CXMBX1*                            GAM( 4, 9)
     & +                           CYMBY1*              GAM( 4,10)
     & +      CXMAX2*                                   GAM( 5, 7)
     & +                    CYMAY2*                     GAM( 6, 7)
     & +                                                GAM( 7, 1)
     & +             CXMBX1*                            GAM( 7, 2)
     & +                           CYMBY1*              GAM( 7, 3)
     & +2.0D0*                            CZMAZ1*       GAM( 7, 4)
     & +                                         CZMBZ1*GAM( 7, 4)
     & +             CXMBX2*                            GAM( 7, 5)
     & +                           CYMBY2*              GAM( 7, 6)
     & +                                  CZMAZ2*       GAM( 7, 7)
     & +4.0D0*                            CZMAZ1*CZMBZ1*GAM( 7, 7)
       COEF( 5)=COEF( 5)
     & +                                         CZMBZ2*GAM( 7, 7)
     & +             CXMBX1*       CYMBY1*              GAM( 7, 8)
     & +2.0D0*       CXMBX1*              CZMAZ1*       GAM( 7, 9)
     & +             CXMBX1*                     CZMBZ1*GAM( 7, 9)
     & +2.0D0*                     CYMBY1*CZMAZ1*       GAM( 7,10)
     & +                           CYMBY1*       CZMBZ1*GAM( 7,10)
     & +      CXMAX1*       CYMAY1*                     GAM( 8, 7)
     & +      CXMAX1*                                   GAM( 9, 4)
     & +      CXMAX1*                     CZMAZ1*       GAM( 9, 7)
     & +2.0D0*CXMAX1*                            CZMBZ1*GAM( 9, 7)
     & +      CXMAX1*CXMBX1*                            GAM( 9, 9)
     & +      CXMAX1*              CYMBY1*              GAM( 9,10)
     & +                    CYMAY1*                     GAM(10, 4)
     & +                    CYMAY1*       CZMAZ1*       GAM(10, 7)
     & +2.0D0*              CYMAY1*              CZMBZ1*GAM(10, 7)
     & +             CXMBX1*CYMAY1*                     GAM(10, 9)
     & +                    CYMAY1*CYMBY1*              GAM(10,10)
  
C      POLY( 6)=1.0D0       *YYMCY1*ZZMCZ1 
       COEF( 6)=0.0D0
     & +                                                GAM( 1,10)
     & +      CXMAX1*                                   GAM( 2,10)
     & +                                                GAM( 3, 4)
     & +2.0D0*                                   CZMBZ1*GAM( 3, 7)
     & +             CXMBX1*                            GAM( 3, 9)
     & +                    CYMAY1*                     GAM( 3,10)
     & +                           CYMBY1*              GAM( 3,10)
     & +                                                GAM( 4, 3)
     & +2.0D0*                     CYMBY1*              GAM( 4, 6)
     & +             CXMBX1*                            GAM( 4, 8)
     & +                                  CZMAZ1*       GAM( 4,10)
     & +                                         CZMBZ1*GAM( 4,10)
     & +      CXMAX2*                                   GAM( 5,10)
     & +2.0D0*              CYMAY1*                     GAM( 6, 4)
     & +4.0D0*              CYMAY1*              CZMBZ1*GAM( 6, 7)
     & +2.0D0*       CXMBX1*CYMAY1*                     GAM( 6, 9)
     & +                    CYMAY2*                     GAM( 6,10)
     & +2.0D0*              CYMAY1*CYMBY1*              GAM( 6,10)
     & +2.0D0*                            CZMAZ1*       GAM( 7, 3)
       COEF( 6)=COEF( 6)
     & +4.0D0*                     CYMBY1*CZMAZ1*       GAM( 7, 6)
     & +2.0D0*       CXMBX1*              CZMAZ1*       GAM( 7, 8)
     & +                                  CZMAZ2*       GAM( 7,10)
     & +2.0D0*                            CZMAZ1*CZMBZ1*GAM( 7,10)
     & +      CXMAX1*                                   GAM( 8, 4)
     & +2.0D0*CXMAX1*                            CZMBZ1*GAM( 8, 7)
     & +      CXMAX1*CXMBX1*                            GAM( 8, 9)
     & +      CXMAX1*       CYMAY1*                     GAM( 8,10)
     & +      CXMAX1*              CYMBY1*              GAM( 8,10)
     & +      CXMAX1*                                   GAM( 9, 3)
     & +2.0D0*CXMAX1*              CYMBY1*              GAM( 9, 6)
     & +      CXMAX1*CXMBX1*                            GAM( 9, 8)
     & +      CXMAX1*                     CZMAZ1*       GAM( 9,10)
     & +      CXMAX1*                            CZMBZ1*GAM( 9,10)
     & +                                                GAM(10, 1)
     & +             CXMBX1*                            GAM(10, 2)
     & +                    CYMAY1*                     GAM(10, 3)
     & +                           CYMBY1*              GAM(10, 3)
     & +                                  CZMAZ1*       GAM(10, 4)
       COEF( 6)=COEF( 6)
     & +                                         CZMBZ1*GAM(10, 4)
     & +             CXMBX2*                            GAM(10, 5)
     & +2.0D0*              CYMAY1*CYMBY1*              GAM(10, 6)
     & +                           CYMBY2*              GAM(10, 6)
     & +2.0D0*                            CZMAZ1*CZMBZ1*GAM(10, 7)
     & +                                         CZMBZ2*GAM(10, 7)
     & +             CXMBX1*CYMAY1*                     GAM(10, 8)
     & +             CXMBX1*       CYMBY1*              GAM(10, 8)
     & +             CXMBX1*              CZMAZ1*       GAM(10, 9)
     & +             CXMBX1*                     CZMBZ1*GAM(10, 9)
     & +                    CYMAY1*       CZMAZ1*       GAM(10,10)
     & +                    CYMAY1*              CZMBZ1*GAM(10,10)
     & +                           CYMBY1*CZMAZ1*       GAM(10,10)
     & +                           CYMBY1*       CZMBZ1*GAM(10,10)
  
C      POLY( 7)=1.0D0       *YYMCY2        
       COEF( 7)=0.0D0
     & +                                                GAM( 1, 6)
     & +      CXMAX1*                                   GAM( 2, 6)
     & +                                                GAM( 3, 3)
     & +                    CYMAY1*                     GAM( 3, 6)
     & +2.0D0*                     CYMBY1*              GAM( 3, 6)
     & +             CXMBX1*                            GAM( 3, 8)
     & +                                         CZMBZ1*GAM( 3,10)
     & +                                  CZMAZ1*       GAM( 4, 6)
     & +      CXMAX2*                                   GAM( 5, 6)
     & +                                                GAM( 6, 1)
     & +             CXMBX1*                            GAM( 6, 2)
     & +2.0D0*              CYMAY1*                     GAM( 6, 3)
     & +                           CYMBY1*              GAM( 6, 3)
     & +                                         CZMBZ1*GAM( 6, 4)
     & +             CXMBX2*                            GAM( 6, 5)
     & +                    CYMAY2*                     GAM( 6, 6)
     & +4.0D0*              CYMAY1*CYMBY1*              GAM( 6, 6)
     & +                           CYMBY2*              GAM( 6, 6)
     & +                                         CZMBZ2*GAM( 6, 7)
       COEF( 7)=COEF( 7)
     & +2.0D0*       CXMBX1*CYMAY1*                     GAM( 6, 8)
     & +             CXMBX1*       CYMBY1*              GAM( 6, 8)
     & +             CXMBX1*                     CZMBZ1*GAM( 6, 9)
     & +2.0D0*              CYMAY1*              CZMBZ1*GAM( 6,10)
     & +                           CYMBY1*       CZMBZ1*GAM( 6,10)
     & +                                  CZMAZ2*       GAM( 7, 6)
     & +      CXMAX1*                                   GAM( 8, 3)
     & +      CXMAX1*       CYMAY1*                     GAM( 8, 6)
     & +2.0D0*CXMAX1*              CYMBY1*              GAM( 8, 6)
     & +      CXMAX1*CXMBX1*                            GAM( 8, 8)
     & +      CXMAX1*                            CZMBZ1*GAM( 8,10)
     & +      CXMAX1*                     CZMAZ1*       GAM( 9, 6)
     & +                                  CZMAZ1*       GAM(10, 3)
     & +                    CYMAY1*       CZMAZ1*       GAM(10, 6)
     & +2.0D0*                     CYMBY1*CZMAZ1*       GAM(10, 6)
     & +             CXMBX1*              CZMAZ1*       GAM(10, 8)
     & +                                  CZMAZ1*CZMBZ1*GAM(10,10)
  
C      POLY( 8)=      XXMCX1       *ZZMCZ1 
       COEF( 8)=0.0D0
     & +                                                GAM( 1, 9)
     & +                                                GAM( 2, 4)
     & +2.0D0*                                   CZMBZ1*GAM( 2, 7)
     & +      CXMAX1*                                   GAM( 2, 9)
     & +             CXMBX1*                            GAM( 2, 9)
     & +                           CYMBY1*              GAM( 2,10)
     & +                    CYMAY1*                     GAM( 3, 9)
     & +                                                GAM( 4, 2)
     & +2.0D0*       CXMBX1*                            GAM( 4, 5)
     & +                           CYMBY1*              GAM( 4, 8)
     & +                                  CZMAZ1*       GAM( 4, 9)
     & +                                         CZMBZ1*GAM( 4, 9)
     & +2.0D0*CXMAX1*                                   GAM( 5, 4)
     & +4.0D0*CXMAX1*                            CZMBZ1*GAM( 5, 7)
     & +      CXMAX2*                                   GAM( 5, 9)
     & +2.0D0*CXMAX1*CXMBX1*                            GAM( 5, 9)
     & +2.0D0*CXMAX1*              CYMBY1*              GAM( 5,10)
     & +                    CYMAY2*                     GAM( 6, 9)
     & +2.0D0*                            CZMAZ1*       GAM( 7, 2)
       COEF( 8)=COEF( 8)
     & +4.0D0*       CXMBX1*              CZMAZ1*       GAM( 7, 5)
     & +2.0D0*                     CYMBY1*CZMAZ1*       GAM( 7, 8)
     & +                                  CZMAZ2*       GAM( 7, 9)
     & +2.0D0*                            CZMAZ1*CZMBZ1*GAM( 7, 9)
     & +                    CYMAY1*                     GAM( 8, 4)
     & +2.0D0*              CYMAY1*              CZMBZ1*GAM( 8, 7)
     & +      CXMAX1*       CYMAY1*                     GAM( 8, 9)
     & +             CXMBX1*CYMAY1*                     GAM( 8, 9)
     & +                    CYMAY1*CYMBY1*              GAM( 8,10)
     & +                                                GAM( 9, 1)
     & +      CXMAX1*                                   GAM( 9, 2)
     & +             CXMBX1*                            GAM( 9, 2)
     & +                           CYMBY1*              GAM( 9, 3)
     & +                                  CZMAZ1*       GAM( 9, 4)
     & +                                         CZMBZ1*GAM( 9, 4)
     & +2.0D0*CXMAX1*CXMBX1*                            GAM( 9, 5)
     & +             CXMBX2*                            GAM( 9, 5)
     & +                           CYMBY2*              GAM( 9, 6)
     & +2.0D0*                            CZMAZ1*CZMBZ1*GAM( 9, 7)
       COEF( 8)=COEF( 8)
     & +                                         CZMBZ2*GAM( 9, 7)
     & +      CXMAX1*              CYMBY1*              GAM( 9, 8)
     & +             CXMBX1*       CYMBY1*              GAM( 9, 8)
     & +      CXMAX1*                     CZMAZ1*       GAM( 9, 9)
     & +      CXMAX1*                            CZMBZ1*GAM( 9, 9)
     & +             CXMBX1*              CZMAZ1*       GAM( 9, 9)
     & +             CXMBX1*                     CZMBZ1*GAM( 9, 9)
     & +                           CYMBY1*CZMAZ1*       GAM( 9,10)
     & +                           CYMBY1*       CZMBZ1*GAM( 9,10)
     & +                    CYMAY1*                     GAM(10, 2)
     & +2.0D0*       CXMBX1*CYMAY1*                     GAM(10, 5)
     & +                    CYMAY1*CYMBY1*              GAM(10, 8)
     & +                    CYMAY1*       CZMAZ1*       GAM(10, 9)
     & +                    CYMAY1*              CZMBZ1*GAM(10, 9)
  
C      POLY( 9)=      XXMCX1*YYMCY1        
       COEF( 9)=0.0D0
     & +                                                GAM( 1, 8)
     & +                                                GAM( 2, 3)
     & +2.0D0*                     CYMBY1*              GAM( 2, 6)
     & +      CXMAX1*                                   GAM( 2, 8)
     & +             CXMBX1*                            GAM( 2, 8)
     & +                                         CZMBZ1*GAM( 2,10)
     & +                                                GAM( 3, 2)
     & +2.0D0*       CXMBX1*                            GAM( 3, 5)
     & +                    CYMAY1*                     GAM( 3, 8)
     & +                           CYMBY1*              GAM( 3, 8)
     & +                                         CZMBZ1*GAM( 3, 9)
     & +                                  CZMAZ1*       GAM( 4, 8)
     & +2.0D0*CXMAX1*                                   GAM( 5, 3)
     & +4.0D0*CXMAX1*              CYMBY1*              GAM( 5, 6)
     & +      CXMAX2*                                   GAM( 5, 8)
     & +2.0D0*CXMAX1*CXMBX1*                            GAM( 5, 8)
     & +2.0D0*CXMAX1*                            CZMBZ1*GAM( 5,10)
     & +2.0D0*              CYMAY1*                     GAM( 6, 2)
     & +4.0D0*       CXMBX1*CYMAY1*                     GAM( 6, 5)
       COEF( 9)=COEF( 9)
     & +                    CYMAY2*                     GAM( 6, 8)
     & +2.0D0*              CYMAY1*CYMBY1*              GAM( 6, 8)
     & +2.0D0*              CYMAY1*              CZMBZ1*GAM( 6, 9)
     & +                                  CZMAZ2*       GAM( 7, 8)
     & +                                                GAM( 8, 1)
     & +      CXMAX1*                                   GAM( 8, 2)
     & +             CXMBX1*                            GAM( 8, 2)
     & +                    CYMAY1*                     GAM( 8, 3)
     & +                           CYMBY1*              GAM( 8, 3)
     & +                                         CZMBZ1*GAM( 8, 4)
     & +2.0D0*CXMAX1*CXMBX1*                            GAM( 8, 5)
     & +             CXMBX2*                            GAM( 8, 5)
     & +2.0D0*              CYMAY1*CYMBY1*              GAM( 8, 6)
     & +                           CYMBY2*              GAM( 8, 6)
     & +                                         CZMBZ2*GAM( 8, 7)
     & +      CXMAX1*       CYMAY1*                     GAM( 8, 8)
     & +      CXMAX1*              CYMBY1*              GAM( 8, 8)
     & +             CXMBX1*CYMAY1*                     GAM( 8, 8)
     & +             CXMBX1*       CYMBY1*              GAM( 8, 8)
       COEF( 9)=COEF( 9)
     & +      CXMAX1*                            CZMBZ1*GAM( 8, 9)
     & +             CXMBX1*                     CZMBZ1*GAM( 8, 9)
     & +                    CYMAY1*              CZMBZ1*GAM( 8,10)
     & +                           CYMBY1*       CZMBZ1*GAM( 8,10)
     & +                                  CZMAZ1*       GAM( 9, 3)
     & +2.0D0*                     CYMBY1*CZMAZ1*       GAM( 9, 6)
     & +      CXMAX1*                     CZMAZ1*       GAM( 9, 8)
     & +             CXMBX1*              CZMAZ1*       GAM( 9, 8)
     & +                                  CZMAZ1*CZMBZ1*GAM( 9,10)
     & +                                  CZMAZ1*       GAM(10, 2)
     & +2.0D0*       CXMBX1*              CZMAZ1*       GAM(10, 5)
     & +                    CYMAY1*       CZMAZ1*       GAM(10, 8)
     & +                           CYMBY1*CZMAZ1*       GAM(10, 8)
     & +                                  CZMAZ1*CZMBZ1*GAM(10, 9)
  
C      POLY(10)=      XXMCX2               
       COEF(10)=0.0D0
     & +                                                GAM( 1, 5)
     & +                                                GAM( 2, 2)
     & +      CXMAX1*                                   GAM( 2, 5)
     & +2.0D0*       CXMBX1*                            GAM( 2, 5)
     & +                           CYMBY1*              GAM( 2, 8)
     & +                                         CZMBZ1*GAM( 2, 9)
     & +                    CYMAY1*                     GAM( 3, 5)
     & +                                  CZMAZ1*       GAM( 4, 5)
     & +                                                GAM( 5, 1)
     & +2.0D0*CXMAX1*                                   GAM( 5, 2)
     & +             CXMBX1*                            GAM( 5, 2)
     & +                           CYMBY1*              GAM( 5, 3)
     & +                                         CZMBZ1*GAM( 5, 4)
     & +      CXMAX2*                                   GAM( 5, 5)
     & +4.0D0*CXMAX1*CXMBX1*                            GAM( 5, 5)
     & +             CXMBX2*                            GAM( 5, 5)
     & +                           CYMBY2*              GAM( 5, 6)
     & +                                         CZMBZ2*GAM( 5, 7)
     & +2.0D0*CXMAX1*              CYMBY1*              GAM( 5, 8)
       COEF(10)=COEF(10)
     & +             CXMBX1*       CYMBY1*              GAM( 5, 8)
     & +2.0D0*CXMAX1*                            CZMBZ1*GAM( 5, 9)
     & +             CXMBX1*                     CZMBZ1*GAM( 5, 9)
     & +                           CYMBY1*       CZMBZ1*GAM( 5,10)
     & +                    CYMAY2*                     GAM( 6, 5)
     & +                                  CZMAZ2*       GAM( 7, 5)
     & +                    CYMAY1*                     GAM( 8, 2)
     & +      CXMAX1*       CYMAY1*                     GAM( 8, 5)
     & +2.0D0*       CXMBX1*CYMAY1*                     GAM( 8, 5)
     & +                    CYMAY1*CYMBY1*              GAM( 8, 8)
     & +                    CYMAY1*              CZMBZ1*GAM( 8, 9)
     & +                                  CZMAZ1*       GAM( 9, 2)
     & +      CXMAX1*                     CZMAZ1*       GAM( 9, 5)
     & +2.0D0*       CXMBX1*              CZMAZ1*       GAM( 9, 5)
     & +                           CYMBY1*CZMAZ1*       GAM( 9, 8)
     & +                                  CZMAZ1*CZMBZ1*GAM( 9, 9)
     & +                    CYMAY1*       CZMAZ1*       GAM(10, 5)
  
C      POLY(11)=1.0D0              *ZZMCZ3 
       COEF(11)=0.0D0
     & +                                                GAM( 4, 7)
     & +                                                GAM( 7, 4)
     & +2.0D0*                            CZMAZ1*       GAM( 7, 7)
     & +2.0D0*                                   CZMBZ1*GAM( 7, 7)
     & +             CXMBX1*                            GAM( 7, 9)
     & +                           CYMBY1*              GAM( 7,10)
     & +      CXMAX1*                                   GAM( 9, 7)
     & +                    CYMAY1*                     GAM(10, 7)
  
C      POLY(12)=1.0D0       *YYMCY1*ZZMCZ2 
       COEF(12)=0.0D0
     & +                                                GAM( 3, 7)
     & +                                                GAM( 4,10)
     & +2.0D0*              CYMAY1*                     GAM( 6, 7)
     & +                                                GAM( 7, 3)
     & +2.0D0*                     CYMBY1*              GAM( 7, 6)
     & +             CXMBX1*                            GAM( 7, 8)
     & +2.0D0*                            CZMAZ1*       GAM( 7,10)
     & +                                         CZMBZ1*GAM( 7,10)
     & +      CXMAX1*                                   GAM( 8, 7)
     & +      CXMAX1*                                   GAM( 9,10)
     & +                                                GAM(10, 4)
     & +                                  CZMAZ1*       GAM(10, 7)
     & +2.0D0*                                   CZMBZ1*GAM(10, 7)
     & +             CXMBX1*                            GAM(10, 9)
     & +                    CYMAY1*                     GAM(10,10)
     & +                           CYMBY1*              GAM(10,10)
  
C      POLY(13)=1.0D0       *YYMCY2*ZZMCZ1 
       COEF(13)=0.0D0
     & +                                                GAM( 3,10)
     & +                                                GAM( 4, 6)
     & +                                                GAM( 6, 4)
     & +2.0D0*                                   CZMBZ1*GAM( 6, 7)
     & +             CXMBX1*                            GAM( 6, 9)
     & +2.0D0*              CYMAY1*                     GAM( 6,10)
     & +                           CYMBY1*              GAM( 6,10)
     & +2.0D0*                            CZMAZ1*       GAM( 7, 6)
     & +      CXMAX1*                                   GAM( 8,10)
     & +      CXMAX1*                                   GAM( 9, 6)
     & +                                                GAM(10, 3)
     & +                    CYMAY1*                     GAM(10, 6)
     & +2.0D0*                     CYMBY1*              GAM(10, 6)
     & +             CXMBX1*                            GAM(10, 8)
     & +                                  CZMAZ1*       GAM(10,10)
     & +                                         CZMBZ1*GAM(10,10)
  
C      POLY(14)=1.0D0       *YYMCY3        
       COEF(14)=0.0D0
     & +                                                GAM( 3, 6)
     & +                                                GAM( 6, 3)
     & +2.0D0*              CYMAY1*                     GAM( 6, 6)
     & +2.0D0*                     CYMBY1*              GAM( 6, 6)
     & +             CXMBX1*                            GAM( 6, 8)
     & +                                         CZMBZ1*GAM( 6,10)
     & +      CXMAX1*                                   GAM( 8, 6)
     & +                                  CZMAZ1*       GAM(10, 6)
  
C      POLY(15)=      XXMCX1       *ZZMCZ2 
       COEF(15)=0.0D0
     & +                                                GAM( 2, 7)
     & +                                                GAM( 4, 9)
     & +2.0D0*CXMAX1*                                   GAM( 5, 7)
     & +                                                GAM( 7, 2)
     & +2.0D0*       CXMBX1*                            GAM( 7, 5)
     & +                           CYMBY1*              GAM( 7, 8)
     & +2.0D0*                            CZMAZ1*       GAM( 7, 9)
     & +                                         CZMBZ1*GAM( 7, 9)
     & +                    CYMAY1*                     GAM( 8, 7)
     & +                                                GAM( 9, 4)
     & +                                  CZMAZ1*       GAM( 9, 7)
     & +2.0D0*                                   CZMBZ1*GAM( 9, 7)
     & +      CXMAX1*                                   GAM( 9, 9)
     & +             CXMBX1*                            GAM( 9, 9)
     & +                           CYMBY1*              GAM( 9,10)
     & +                    CYMAY1*                     GAM(10, 9)
  
C      POLY(16)=      XXMCX1*YYMCY1*ZZMCZ1 
       COEF(16)=0.0D0
     & +                                                GAM( 2,10)
     & +                                                GAM( 3, 9)
     & +                                                GAM( 4, 8)
     & +2.0D0*CXMAX1*                                   GAM( 5,10)
     & +2.0D0*              CYMAY1*                     GAM( 6, 9)
     & +2.0D0*                            CZMAZ1*       GAM( 7, 8)
     & +                                                GAM( 8, 4)
     & +2.0D0*                                   CZMBZ1*GAM( 8, 7)
     & +      CXMAX1*                                   GAM( 8, 9)
     & +             CXMBX1*                            GAM( 8, 9)
     & +                    CYMAY1*                     GAM( 8,10)
     & +                           CYMBY1*              GAM( 8,10)
     & +                                                GAM( 9, 3)
     & +2.0D0*                     CYMBY1*              GAM( 9, 6)
     & +      CXMAX1*                                   GAM( 9, 8)
     & +             CXMBX1*                            GAM( 9, 8)
     & +                                  CZMAZ1*       GAM( 9,10)
     & +                                         CZMBZ1*GAM( 9,10)
     & +                                                GAM(10, 2)
       COEF(16)=COEF(16)
     & +2.0D0*       CXMBX1*                            GAM(10, 5)
     & +                    CYMAY1*                     GAM(10, 8)
     & +                           CYMBY1*              GAM(10, 8)
     & +                                  CZMAZ1*       GAM(10, 9)
     & +                                         CZMBZ1*GAM(10, 9)
  
C      POLY(17)=      XXMCX1*YYMCY2        
       COEF(17)=0.0D0
     & +                                                GAM( 2, 6)
     & +                                                GAM( 3, 8)
     & +2.0D0*CXMAX1*                                   GAM( 5, 6)
     & +                                                GAM( 6, 2)
     & +2.0D0*       CXMBX1*                            GAM( 6, 5)
     & +2.0D0*              CYMAY1*                     GAM( 6, 8)
     & +                           CYMBY1*              GAM( 6, 8)
     & +                                         CZMBZ1*GAM( 6, 9)
     & +                                                GAM( 8, 3)
     & +                    CYMAY1*                     GAM( 8, 6)
     & +2.0D0*                     CYMBY1*              GAM( 8, 6)
     & +      CXMAX1*                                   GAM( 8, 8)
     & +             CXMBX1*                            GAM( 8, 8)
     & +                                         CZMBZ1*GAM( 8,10)
     & +                                  CZMAZ1*       GAM( 9, 6)
     & +                                  CZMAZ1*       GAM(10, 8)
  
C      POLY(18)=      XXMCX2       *ZZMCZ1 
       COEF(18)=0.0D0
     & +                                                GAM( 2, 9)
     & +                                                GAM( 4, 5)
     & +                                                GAM( 5, 4)
     & +2.0D0*                                   CZMBZ1*GAM( 5, 7)
     & +2.0D0*CXMAX1*                                   GAM( 5, 9)
     & +             CXMBX1*                            GAM( 5, 9)
     & +                           CYMBY1*              GAM( 5,10)
     & +2.0D0*                            CZMAZ1*       GAM( 7, 5)
     & +                    CYMAY1*                     GAM( 8, 9)
     & +                                                GAM( 9, 2)
     & +      CXMAX1*                                   GAM( 9, 5)
     & +2.0D0*       CXMBX1*                            GAM( 9, 5)
     & +                           CYMBY1*              GAM( 9, 8)
     & +                                  CZMAZ1*       GAM( 9, 9)
     & +                                         CZMBZ1*GAM( 9, 9)
     & +                    CYMAY1*                     GAM(10, 5)
  
C      POLY(19)=      XXMCX2*YYMCY1        
       COEF(19)=0.0D0
     & +                                                GAM( 2, 8)
     & +                                                GAM( 3, 5)
     & +                                                GAM( 5, 3)
     & +2.0D0*                     CYMBY1*              GAM( 5, 6)
     & +2.0D0*CXMAX1*                                   GAM( 5, 8)
     & +             CXMBX1*                            GAM( 5, 8)
     & +                                         CZMBZ1*GAM( 5,10)
     & +2.0D0*              CYMAY1*                     GAM( 6, 5)
     & +                                                GAM( 8, 2)
     & +      CXMAX1*                                   GAM( 8, 5)
     & +2.0D0*       CXMBX1*                            GAM( 8, 5)
     & +                    CYMAY1*                     GAM( 8, 8)
     & +                           CYMBY1*              GAM( 8, 8)
     & +                                         CZMBZ1*GAM( 8, 9)
     & +                                  CZMAZ1*       GAM( 9, 8)
     & +                                  CZMAZ1*       GAM(10, 5)
  
C      POLY(20)=      XXMCX3               
       COEF(20)=0.0D0
     & +                                                GAM( 2, 5)
     & +                                                GAM( 5, 2)
     & +2.0D0*CXMAX1*                                   GAM( 5, 5)
     & +2.0D0*       CXMBX1*                            GAM( 5, 5)
     & +                           CYMBY1*              GAM( 5, 8)
     & +                                         CZMBZ1*GAM( 5, 9)
     & +                    CYMAY1*                     GAM( 8, 5)
     & +                                  CZMAZ1*       GAM( 9, 5)
  
C      POLY(21)=1.0D0              *ZZMCZ4 
       COEF(21)=0.0D0
     & +                                                GAM( 7, 7)
  
C      POLY(22)=1.0D0       *YYMCY1*ZZMCZ3 
       COEF(22)=0.0D0
     & +                                                GAM( 7,10)
     & +                                                GAM(10, 7)
  
C      POLY(23)=1.0D0       *YYMCY2*ZZMCZ2 
       COEF(23)=0.0D0
     & +                                                GAM( 6, 7)
     & +                                                GAM( 7, 6)
     & +                                                GAM(10,10)
  
C      POLY(24)=1.0D0       *YYMCY3*ZZMCZ1 
       COEF(24)=0.0D0
     & +                                                GAM( 6,10)
     & +                                                GAM(10, 6)
  
C      POLY(25)=1.0D0       *YYMCY4        
       COEF(25)=0.0D0
     & +                                                GAM( 6, 6)
  
C      POLY(26)=      XXMCX1       *ZZMCZ3 
       COEF(26)=0.0D0
     & +                                                GAM( 7, 9)
     & +                                                GAM( 9, 7)
  
C      POLY(27)=      XXMCX1*YYMCY1*ZZMCZ2 
       COEF(27)=0.0D0
     & +                                                GAM( 7, 8)
     & +                                                GAM( 8, 7)
     & +                                                GAM( 9,10)
     & +                                                GAM(10, 9)
  
C      POLY(28)=      XXMCX1*YYMCY2*ZZMCZ1 
       COEF(28)=0.0D0
     & +                                                GAM( 6, 9)
     & +                                                GAM( 8,10)
     & +                                                GAM( 9, 6)
     & +                                                GAM(10, 8)
  
C      POLY(29)=      XXMCX1*YYMCY3        
       COEF(29)=0.0D0
     & +                                                GAM( 6, 8)
     & +                                                GAM( 8, 6)
  
C      POLY(30)=      XXMCX2       *ZZMCZ2 
       COEF(30)=0.0D0
     & +                                                GAM( 5, 7)
     & +                                                GAM( 7, 5)
     & +                                                GAM( 9, 9)
  
C      POLY(31)=      XXMCX2*YYMCY1*ZZMCZ1 
       COEF(31)=0.0D0
     & +                                                GAM( 5,10)
     & +                                                GAM( 8, 9)
     & +                                                GAM( 9, 8)
     & +                                                GAM(10, 5)
  
C      POLY(32)=      XXMCX2*YYMCY2        
       COEF(32)=0.0D0
     & +                                                GAM( 5, 6)
     & +                                                GAM( 6, 5)
     & +                                                GAM( 8, 8)
  
C      POLY(33)=      XXMCX3       *ZZMCZ1 
       COEF(33)=0.0D0
     & +                                                GAM( 5, 9)
     & +                                                GAM( 9, 5)
  
C      POLY(34)=      XXMCX3*YYMCY1        
       COEF(34)=0.0D0
     & +                                                GAM( 5, 8)
     & +                                                GAM( 8, 5)
  
C      POLY(35)=      XXMCX4               
       COEF(35)=0.0D0
     & +                                                GAM( 5, 5)
           ARG=EXP(-ARG)
           DO I=1,35
           COEF(I)=COEF(I)*ARG
           END DO
C POLY(1 ) 1.0D0
C POLY(2 ) Z
C POLY(3 ) Y
C POLY(4 ) X
C POLY(5 ) ZZ
C POLY(6 ) YZ
C POLY(7 ) YY
C POLY(8 ) XZ
C POLY(9 ) XY
C POLY(10) XX
C POLY(11) ZZZ
C POLY(12) YZZ
C POLY(13) YYZ
C POLY(14) YYY
C POLY(15) XZZ
C POLY(16) XYZ
C POLY(17) XYY  
C POLY(18) XXZ 
C POLY(19) XXY 
C POLY(20) XXX 
C POLY(21) ZZZZ
C POLY(22) YZZZ
C POLY(23) YYZZ
C POLY(24) YYYZ
C POLY(25) YYYY
C POLY(26) XZZZ
C POLY(27) XYZZ
C POLY(28) XYYZ
C POLY(29) XYYY
C POLY(30) XXZZ
C POLY(31) XXYZ
C POLY(32) XXYY
C POLY(33) XXXZ
C POLY(34) XXXY
C POLY(35) XXXX
C DENSITY= COEF(I)*POLY(I)*EXP(-DLT*(R-C)**2) SUMMED OVER I
       IF(GGA)THEN 
             DO I=2,10
             DO J=1,20
             DOEF(J,I)=0.0D0
             END DO
             END DO
       DOEF( 1, 2)=       COEF( 4)!x  X                 
       DOEF( 2, 2)=       COEF( 8)!x  XZ        Z       
       DOEF( 3, 2)=       COEF( 9)!x  XY        Y       
       DOEF( 4, 2)= 2.0D0*COEF(10)!x  XX        X       
       DOEF( 5, 2)=       COEF(15)!x  XZZ       ZZ      
       DOEF( 6, 2)=       COEF(16)!x  XYZ       YZ      
       DOEF( 7, 2)=       COEF(17)!x  XYY       YY      
       DOEF( 8, 2)= 2.0D0*COEF(18)!x  XXZ       XZ      
       DOEF( 9, 2)= 2.0D0*COEF(19)!x  XXY       XY      
       DOEF(10, 2)= 3.0D0*COEF(20)!x  XXX       XX      
       DOEF(11, 2)=       COEF(26)!x  XZZZ      ZZZ     
       DOEF(12, 2)=       COEF(27)!x  XYZZ      YZZ     
       DOEF(13, 2)=       COEF(28)!x  XYYZ      YYZ     
       DOEF(14, 2)=       COEF(29)!x  XYYY      YYY     
       DOEF(15, 2)= 2.0D0*COEF(30)!x  XXZZ      XZZ     
       DOEF(16, 2)= 2.0D0*COEF(31)!x  XXYZ      XYZ     
       DOEF(17, 2)= 2.0D0*COEF(32)!x  XXYY      XYY     
       DOEF(18, 2)= 3.0D0*COEF(33)!x  XXXZ      XXZ     
       DOEF(19, 2)= 3.0D0*COEF(34)!x  XXXY      XXY     
       DOEF(20, 2)= 4.0D0*COEF(35)!x  XXXX      XXX     
       DOEF( 1, 3)=       COEF( 3)!y  Y                 
       DOEF( 2, 3)=       COEF( 6)!y  YZ        Z       
       DOEF( 3, 3)= 2.0D0*COEF( 7)!y  YY        Y       
       DOEF( 4, 3)=       COEF( 9)!y  XY        X       
       DOEF( 5, 3)=       COEF(12)!y  YZZ       ZZ      
       DOEF( 6, 3)= 2.0D0*COEF(13)!y  YYZ       YZ      
       DOEF( 7, 3)= 3.0D0*COEF(14)!y  YYY       YY      
       DOEF( 8, 3)=       COEF(16)!y  XYZ       XZ      
       DOEF( 9, 3)= 2.0D0*COEF(17)!y  XYY       XY      
       DOEF(10, 3)=       COEF(19)!y  XXY       XX      
       DOEF(11, 3)=       COEF(22)!y  YZZZ      ZZZ     
       DOEF(12, 3)= 2.0D0*COEF(23)!y  YYZZ      YZZ     
       DOEF(13, 3)= 3.0D0*COEF(24)!y  YYYZ      YYZ     
       DOEF(14, 3)= 4.0D0*COEF(25)!y  YYYY      YYY     
       DOEF(15, 3)=       COEF(27)!y  XYZZ      XZZ     
       DOEF(16, 3)= 2.0D0*COEF(28)!y  XYYZ      XYZ     
       DOEF(17, 3)= 3.0D0*COEF(29)!y  XYYY      XYY     
       DOEF(18, 3)=       COEF(31)!y  XXYZ      XXZ     
       DOEF(19, 3)= 2.0D0*COEF(32)!y  XXYY      XXY     
       DOEF(20, 3)=       COEF(34)!y  XXXY      XXX     
       DOEF( 1, 4)=       COEF( 2)!z  Z                 
       DOEF( 2, 4)= 2.0D0*COEF( 5)!z  ZZ        Z       
       DOEF( 3, 4)=       COEF( 6)!z  YZ        Y       
       DOEF( 4, 4)=       COEF( 8)!z  XZ        X       
       DOEF( 5, 4)= 3.0D0*COEF(11)!z  ZZZ       ZZ      
       DOEF( 6, 4)= 2.0D0*COEF(12)!z  YZZ       YZ      
       DOEF( 7, 4)=       COEF(13)!z  YYZ       YY      
       DOEF( 8, 4)= 2.0D0*COEF(15)!z  XZZ       XZ      
       DOEF( 9, 4)=       COEF(16)!z  XYZ       XY      
       DOEF(10, 4)=       COEF(18)!z  XXZ       XX      
       DOEF(11, 4)= 4.0D0*COEF(21)!z  ZZZZ      ZZZ     
       DOEF(12, 4)= 3.0D0*COEF(22)!z  YZZZ      YZZ     
       DOEF(13, 4)= 2.0D0*COEF(23)!z  YYZZ      YYZ     
       DOEF(14, 4)=       COEF(24)!z  YYYZ      YYY     
       DOEF(15, 4)= 3.0D0*COEF(26)!z  XZZZ      XZZ     
       DOEF(16, 4)= 2.0D0*COEF(27)!z  XYZZ      XYZ     
       DOEF(17, 4)=       COEF(28)!z  XYYZ      XYY     
       DOEF(18, 4)= 2.0D0*COEF(30)!z  XXZZ      XXZ     
       DOEF(19, 4)=       COEF(31)!z  XXYZ      XXY     
       DOEF(20, 4)=       COEF(33)!z  XXXZ      XXX     
       DOEF( 1, 5)= 2.0D0*COEF(10)!xx  XX                
       DOEF( 2, 5)= 2.0D0*COEF(18)!xx  XXZ       Z       
       DOEF( 3, 5)= 2.0D0*COEF(19)!xx  XXY       Y       
       DOEF( 4, 5)= 6.0D0*COEF(20)!xx  XXX       X       
       DOEF( 5, 5)= 2.0D0*COEF(30)!xx  XXZZ      ZZ      
       DOEF( 6, 5)= 2.0D0*COEF(31)!xx  XXYZ      YZ      
       DOEF( 7, 5)= 2.0D0*COEF(32)!xx  XXYY      YY      
       DOEF( 8, 5)= 6.0D0*COEF(33)!xx  XXXZ      XZ      
       DOEF( 9, 5)= 6.0D0*COEF(34)!xx  XXXY      XY      
       DOEF(10, 5)=12.0D0*COEF(35)!xx  XXXX      XX      
       DOEF( 1, 6)= 2.0D0*COEF( 7)!yy  YY                
       DOEF( 2, 6)= 2.0D0*COEF(13)!yy  YYZ       Z       
       DOEF( 3, 6)= 6.0D0*COEF(14)!yy  YYY       Y       
       DOEF( 4, 6)= 2.0D0*COEF(17)!yy  XYY       X       
       DOEF( 5, 6)= 2.0D0*COEF(23)!yy  YYZZ      ZZ      
       DOEF( 6, 6)= 6.0D0*COEF(24)!yy  YYYZ      YZ      
       DOEF( 7, 6)=12.0D0*COEF(25)!yy  YYYY      YY      
       DOEF( 8, 6)= 2.0D0*COEF(28)!yy  XYYZ      XZ      
       DOEF( 9, 6)= 6.0D0*COEF(29)!yy  XYYY      XY      
       DOEF(10, 6)= 2.0D0*COEF(32)!yy  XXYY      XX      
       DOEF( 1, 7)= 2.0D0*COEF( 5)!zz  ZZ                
       DOEF( 2, 7)= 6.0D0*COEF(11)!zz  ZZZ       Z       
       DOEF( 3, 7)= 2.0D0*COEF(12)!zz  YZZ       Y       
       DOEF( 4, 7)= 2.0D0*COEF(15)!zz  XZZ       X       
       DOEF( 5, 7)=12.0D0*COEF(21)!zz  ZZZZ      ZZ      
       DOEF( 6, 7)= 6.0D0*COEF(22)!zz  YZZZ      YZ      
       DOEF( 7, 7)= 2.0D0*COEF(23)!zz  YYZZ      YY      
       DOEF( 8, 7)= 6.0D0*COEF(26)!zz  XZZZ      XZ      
       DOEF( 9, 7)= 2.0D0*COEF(27)!zz  XYZZ      XY      
       DOEF(10, 7)= 2.0D0*COEF(30)!zz  XXZZ      XX      
       DOEF( 1, 8)=       COEF( 9)!xy  XY                
       DOEF( 2, 8)=       COEF(16)!xy  XYZ       Z       
       DOEF( 3, 8)= 2.0D0*COEF(17)!xy  XYY       Y       
       DOEF( 4, 8)= 2.0D0*COEF(19)!xy  XXY       X       
       DOEF( 5, 8)=       COEF(27)!xy  XYZZ      ZZ      
       DOEF( 6, 8)= 2.0D0*COEF(28)!xy  XYYZ      YZ      
       DOEF( 7, 8)= 3.0D0*COEF(29)!xy  XYYY      YY      
       DOEF( 8, 8)= 2.0D0*COEF(31)!xy  XXYZ      XZ      
       DOEF( 9, 8)= 4.0D0*COEF(32)!xy  XXYY      XY      
       DOEF(10, 8)= 3.0D0*COEF(34)!xy  XXXY      XX      
       DOEF( 1, 9)= 1.0D0*COEF( 8)!xz  XZ                
       DOEF( 2, 9)= 2.0D0*COEF(15)!xz  XZZ       Z       
       DOEF( 3, 9)= 1.0D0*COEF(16)!xz  XYZ       Y       
       DOEF( 4, 9)= 2.0D0*COEF(18)!xz  XXZ       X       
       DOEF( 5, 9)= 3.0D0*COEF(26)!xz  XZZZ      ZZ      
       DOEF( 6, 9)= 2.0D0*COEF(27)!xz  XYZZ      YZ      
       DOEF( 7, 9)= 1.0D0*COEF(28)!xz  XYYZ      YY      
       DOEF( 8, 9)= 4.0D0*COEF(30)!xz  XXZZ      XZ      
       DOEF( 9, 9)= 2.0D0*COEF(31)!xz  XXYZ      XY      
       DOEF(10, 9)= 3.0D0*COEF(33)!xz  XXXZ      XX      
       DOEF( 1,10)=       COEF( 6)!yz  YZ                
       DOEF( 2,10)= 2.0D0*COEF(12)!yz  YZZ       Z       
       DOEF( 3,10)= 2.0D0*COEF(13)!yz  YYZ       Y       
       DOEF( 4,10)=       COEF(16)!yz  XYZ       X       
       DOEF( 5,10)= 3.0D0*COEF(22)!yz  YZZZ      ZZ      
       DOEF( 6,10)= 4.0D0*COEF(23)!yz  YYZZ      YZ      
       DOEF( 7,10)= 3.0D0*COEF(24)!yz  YYYZ      YY      
       DOEF( 8,10)= 2.0D0*COEF(27)!yz  XYZZ      XZ      
       DOEF( 9,10)= 2.0D0*COEF(28)!yz  XYYZ      XY      
       DOEF(10,10)=       COEF(31)!yz  XXYZ      XX      
       END IF
       RETURN
       END
C
C ***************************************************************
C
       SUBROUTINE POLYX(A0,B0,DELTA,A)
C ORIGINAL VERSION BY MARK R PEDERSON (1988)
       IMPLICIT REAL*8 (A-H,O-Z)
       DIMENSION A(5,5,3,3)
       SAVE
C
C POREZAG 9/94
C CHANGE OF POLY IN SUCH A WAY THAT ONLY THOSE ARRAY ELEMENTS ARE
C SET WHICH REALLY DEPEND ON THE INPUT PARAMETERS
C
C WE WISH TO DO THE INTEGRAL:
C
C   I(N,M,A,ALPHA,B,BETA,R')
C
C   I:DXDYDZ 1/| R-R'|
C      [(X-AX)**NX (Y-AY)**NY (Z-AZ)**NZ] EXP(-ALPHA*(R-A)**2)
C      [(X-BX)**MX (Y-BY)**MY (Z-BZ)**MZ] EXP(-BETA *(R-B)**2)
C
C DEFINE:
C
C   DELTA=ALPHA+BETA
C   ARG=ALPHA*BETA*(A-B)**2/DELTA
C   C=(ALPHA*A+BETA*B)/DELTA  (VECTORS)
C   RO=R' - C                 (VECTORS)
C   AO=A  - C                 (VECTORS)
C   BO=B  - C                 (VECTORS)
C
C WITH SOME ALGEBRA:
C
C   I=(2.0*PI/DELTA)*EXP(-ARG)*
C   I(0,1):DU EXP(-DELTA*RO*RO*U*U)
C   *SUM(N,M) A(N,M,NX,MX)* (ROX**(N-1))*(U*U)**(M-1)
C   *SUM(N,M) A(N,M,NY,MY)* (ROY**(N-1))*(U*U)**(M-1)
C   *SUM(N,M) A(N,M,NZ,MZ)* (ROZ**(N-1))*(U*U)**(M-1)
C
C THIS SUBROUITINE ACCEPTS AOX AND BOX AND CALCULATES THE MATRIX A
C
       TWODELINV=0.5D0/DELTA
       A0B0=A0*B0
       A02=A0*A0
       B02=B0*B0
       ABSUM=A0+B0
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  BLOCK FOR N,M= 0 0  (ONLY CONSTANTS)
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  BLOCK FOR N,M= 0 1
C
       A(1,1,1,2)= -B0
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  BLOCK FOR N,M= 0 2
C
       A(1,1,1,3)=  TWODELINV+B02
       A(1,2,1,3)= -TWODELINV
       A(2,2,1,3)= -2*B0
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  BLOCK FOR N,M= 1 0
C
       A(1,1,2,1)= -A0
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  BLOCK FOR N,M= 1 1
C
       A(1,1,2,2)=  TWODELINV+A0B0
       A(1,2,2,2)= -TWODELINV
       A(2,2,2,2)= -ABSUM
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  BLOCK FOR N,M= 1 2
C
       DTMP1=TWODELINV*(ABSUM+B0)
       DTMP2=TWODELINV*3
       A(1,1,2,3)= -DTMP1-A0*B02
       A(1,2,2,3)=  DTMP1
       A(2,2,2,3)=  DTMP2+B02+2*A0B0
       A(2,3,2,3)= -DTMP2
       A(3,3,2,3)= -ABSUM-B0
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  BLOCK FOR N,M= 2 0
C
       A(1,1,3,1)=  TWODELINV+A02
       A(1,2,3,1)= -TWODELINV
       A(2,2,3,1)= -2*A0
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  BLOCK FOR N,M= 2 1
C
       DTMP1=TWODELINV*(ABSUM+A0)
       A(1,1,3,2)= -DTMP1-A02*B0
       A(1,2,3,2)=  DTMP1
       A(2,2,3,2)=  DTMP2+2*A0B0+A02
       A(2,3,3,2)= -DTMP2
       A(3,3,3,2)= -ABSUM-A0
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  BLOCK FOR N,M= 2 2
C
       DTMP1= TWODELINV*(3*TWODELINV+B02+4*A0B0+A02)
       DTMP2= TWODELINV*TWODELINV*3
       DTMP3= TWODELINV*6
       A(1,1,3,3)=  DTMP1+A02*B02
       A(1,2,3,3)= -DTMP1-DTMP2
       A(1,3,3,3)=  DTMP2
       A(2,2,3,3)= -ABSUM*(DTMP3+2*A0B0)
       A(2,3,3,3)=  DTMP3*ABSUM
       A(3,3,3,3)=  DTMP3+B02+A02+4*A0B0
       A(3,4,3,3)= -DTMP3
       A(4,4,3,3)= -2*ABSUM
       RETURN
       END



C *****************************************************************
C
       SUBROUTINE FLONASE(LPTS,MPTS,CV,TV)
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       PARAMETER (NMAX=MPBLOCK)
C
C RETURN:
C RHOG(IPTS,1, 1)= rho_up   
C RHOG(IPTS,2, 1)= d rho_up/dx
C RHOG(IPTS,3, 1)= d rho_up/dy
C RHOG(IPTS,4, 1)= d rho_up/dz
C RHOG(IPTS,5, 1)= d^2 rho_up/dx^2
C RHOG(IPTS,6, 1)= d^2 rho_up/dy^2
C RHOG(IPTS,7, 1)= d^2 rho_up/dz^2
C RHOG(IPTS,8, 1)= d^2 rho_up/dxdy
C RHOG(IPTS,9, 1)= d^2 rho_up/dxdz
C RHOG(IPTS,10,1)= d^2 rho_up/dydz
C RHOG(IPTS,1, 2)= rho_dn   
C RHOG(IPTS,2, 2)= d rho_dn/dx
C RHOG(IPTS,3, 2)= d rho_dn/dy
C RHOG(IPTS,4, 2)= d rho_dn/dz
C RHOG(IPTS,5, 2)= d^2 rho_dn/dx^2
C RHOG(IPTS,6, 2)= d^2 rho_dn/dy^2
C RHOG(IPTS,7, 2)= d^2 rho_dn/dz^2
C RHOG(IPTS,8, 2)= d^2 rho_dn/dxdy
C RHOG(IPTS,9, 2)= d^2 rho_dn/dxdz
C RHOG(IPTS,10,2)= d^2 rho_dn/dydz
C
       LOGICAL ICOUNT
       COMMON/FORRx/NFLO,KSPX!!,TMAT(NDH,NDH,2)
       COMMON/TMP1/POT    (MAX_PTS),RHOG(MAX_PTS,NVGRAD,MXSPN)
       DIMENSION COULOMB(MAX_PTS)!,RHOG(MAX_PTS,NVGRAD,MXSPN)
       DIMENSION PSIG(NMAX,10,MAX_OCC)
     &  ,PTS(NSPEED,3),GRAD(NSPEED,10,6,MAX_CON,3)
     &  ,RVECA(3,MX_GRP),ICOUNT(MAX_CON,3)
       DIMENSION XMSH(3),CV(NMAX),TV(NDH       )
C
C SCRATCH COMMON BLOCK FOR LOCAL ARRAYS
C
       LOGICAL LGGA,IUPDAT
       DIMENSION ISIZE(3)
       DATA ISIZE/1,3,6/
C              print*,'NFLO in FLONASE',NFLO
       TRx=0.0D0
       TIMEGORB=0.0D0
       IR=0
       IG=0
C       TMAT=0.0D0
       DO I=1,NWFS(KSPX)
        TMAT(I,ABS(NFLO),KSPX)=TV(I)
       END DO 
C        PRINT*,'HELLO FROM FLONASE',NWFS,NWF,TV(1),LPTS,MPTS,NMSH,NFLO!KSPX,NSPN
       IF(NMSH.GT.MAX_PTS)THEN
         PRINT*,'MAX_PTS IS TO SMALL IN FLONASE',NMSH
         CALL STOPIT
       END IF
C
       IF(NFLO.EQ.1)HAM=0.0D0
       TIMEGORB=0.0D0
       CALL GTTIME(APT1)
       LGGA= .FALSE.
       NGRAD=1
       IF ((IGGA(1).GT.0).OR.(IGGA(2).GT.0)) THEN
        LGGA= .TRUE.
        NGRAD=10
       END IF
C
C LOOP OVER ALL POINTS
C
      
       DO IGP=1,1!NGRP
C       LPTS=0
 10    CONTINUE
       call gttime(ti10)
CC        IF(LPTS+NMAX.LT.NMSH)THEN
CC         MPTS=NMAX
CC        ELSE
CC         MPTS=NMSH-LPTS
CC        END IF
C
C INITIALIZE PSIG AND RHOB
C
        DO IWF=1,NWF
         DO IGR=1,NGRAD
          DO IPTS=1,MPTS
           PSIG(IPTS,IGR,IWF)=0.0D0
          END DO
         END DO  
        END DO  
        DO ISPN=1,NSPN
         DO IGR=1,NGRAD
          DO IPTS=1,MPTS
           RHOG(LPTS+IPTS,IGR,ISPN)=0.0D0
          END DO
         END DO  
        END DO  
        ISHELLA=0
C
C FOR ALL CENTER TYPES
C
        DO 86 IFNCT=1,NFNCT
         LMAX1=LSYMMAX(IFNCT)+1
C
C FOR ALL POSITIONS OF THIS CENTER
C
         DO 84 I_POS=1,N_POS(IFNCT)
          ISHELLA=ISHELLA+1
C
C GET SYMMETRY INFO
C
          CALL OBINFO(1,RIDT(1,ISHELLA),RVECA,M_NUC,ISHDUM)
          IF(NWF.GT.MAX_OCC)THEN
           PRINT *,'APTSLV: MAX_OCC MUST BE AT LEAST:',NWF
           CALL STOPIT
          END IF
C
C FOR ALL EQUIVALENT POSITIONS OF THIS ATOM
C
            DO 82 J_POS=1,M_NUC
C
C UNSYMMETRIZE 
C          
         call gttime(TRx1)
         CALL RxRAVEL(IFNCT,ISHELLA,J_POS,RIDT(1,ISHELLA),
     &                  RVECA,L_NUC,1)
         call gttime(TRx2)
         TRx=TRx+TRx2-TRx1
         IR=IR+1
           IF(L_NUC.NE.M_NUC)THEN
            PRINT *,'APTSLV: PROBLEM IN RxRAVEL'
            CALL STOPIT
           END IF
C
C FOR ALL MESHPOINTS IN BLOCK DO A SMALLER BLOCK
C
           KPTS=0
           DO 80 JPTS=1,MPTS,NSPEED
            NPV=MIN(NSPEED,MPTS-JPTS+1)
            DO LPV=1,NPV
             KPTS=KPTS+1
C                     DO L=1,3
C                       XMSH(L)=0.0D0
C                       DO J=1,3
C                       XMSH(L)=XMSH(L)+RMAT(L,J,IGP)*RMSH(J,LPTS+KPTS)
C                       END DO
C                     END DO
C            PTS(LPV,1)=XMSH(1          )-RVECA(1,J_POS)
C            PTS(LPV,2)=XMSH(2          )-RVECA(2,J_POS)
C            PTS(LPV,3)=XMSH(3          )-RVECA(3,J_POS)
             PTS(LPV,1)=RMSH(1,LPTS+KPTS)-RVECA(1,J_POS)
             PTS(LPV,2)=RMSH(2,LPTS+KPTS)-RVECA(2,J_POS)
             PTS(LPV,3)=RMSH(3,LPTS+KPTS)-RVECA(3,J_POS)
            END DO
C
C GET ORBITS AND DERIVATIVES
C
            NDERV=0
            IF (LGGA) NDERV=2
            CALL GTTIME(TIME3)
            CALL GORBDRV(NDERV,IUPDAT,ICOUNT,NPV,PTS,IFNCT,GRAD)
            CALL GTTIME(TIME4)
            TIMEGORB=TIMEGORB+TIME4-TIME3
            IG=IG+1
C
C UPDATING ARRAY PSIG
C
            IF (IUPDAT) THEN
             IPTS=JPTS-1
             ILOC=0
             DO 78 LI=1,LMAX1
              DO MU=1,ISIZE(LI)
               DO ICON=1,N_CON(LI,IFNCT)
                ILOC=ILOC+1
                IF (ICOUNT(ICON,LI)) THEN
                 IWAVE=(KSPX-1)*NWFS(1)+ABS(NFLO)
                 DO IWF=IWAVE,IWAVE !!!!1,NWF !!!ABS(NFLO),ABS(NFLO) !!1,NWF
                  FACTOR=PSI(ILOC,IWF,1)
                  DO IGR=1,NGRAD
                   DO LPV=1,NPV
                    PSIG(IPTS+LPV,IGR,IWF)=PSIG(IPTS+LPV,IGR,IWF)
     &              +GRAD(LPV,IGR,MU,ICON,LI)*FACTOR
                   END DO
                  END DO  
                 END DO  
                END IF
               END DO  
              END DO  
   78        CONTINUE
            END IF
   80      CONTINUE
   82     CONTINUE
   84    CONTINUE
   86   CONTINUE
C
C UPDATING RHOG, START WITH DENSITY 
C
        tst=0.0D0
        DO ISPN=1,NSPN
         JBEG= (ISPN-1)*NWFS(1) 
         DO JWF=ABS(NFLO),ABS(NFLO) !!!1,NWFS(ISPN)
          JLOC=JWF+JBEG
          DO IPTS=1,MPTS
           RHOG(LPTS+IPTS,1,ISPN)=RHOG(LPTS+IPTS,1,ISPN)
     &     +PSIG(IPTS,1,JLOC)**2
            tst=tst+RHOG(LPTS+IPTS,1,ISPN)*WMSH(LPTS+IPTS)
          END DO
         END DO
        END DO
CHECK FOR ORTHOGONALITY OF FLOS
CC              DO KFLO=1,NWFS(1)
CC              DO LFLO=1,NWFS(1)
CC               DO IPTS=1,MPTS
CC               HAM(KFLO,LFLO)=HAM(KFLO,LFLO)+
CC     &           PSIG(IPTS,1,KFLO)*PSIG(IPTS,1,LFLO)*WMSH(LPTS+IPTS)
CC               END DO
CC              END DO
CC              END DO
          IF(NFLO.LT.0.AND.IGP.EQ.1)THEN
C          IF(NFLO.LT.0)             THEN
           LLOC=(KSPX-1)*NWFS(1)+ABS(NFLO)
           IF(LPTS.EQ.0)THEN
C           PRINT*,'CAPTURING CHARGE FOR IFLO:',NFLO,LLOC,KSPX,NMSH,NWF
          END IF

           
           
       DO IPTS=1,MPTS
       !    COULOMB(IPTS+LPTS)=PSIG(IPTS,1,LLOC) !FLO_I
           CV(IPTS)=PSIG(IPTS,1,LLOC)
       END DO
        END IF
C
C UPDATE DERIVATIVES IF GGA CALCULATION
        IF (LGGA) THEN
         DO 96 ISPN=1,NSPN
          JBEG= (ISPN-1)*NWFS(1)
          DO 94 JWF=ABS(NFLO),ABS(NFLO)!!1,NWFS(ISPN)
           JLOC=JWF+JBEG
C
C GRADIENT 
C
           DO IGR=2,4
            DO IPTS=1,MPTS
             RHOG(LPTS+IPTS,IGR,ISPN)=RHOG(LPTS+IPTS,IGR,ISPN)
     &       +2*PSIG(IPTS,1,JLOC)*PSIG(IPTS,IGR,JLOC)
            END DO
           END DO
C
C SECOND DERIVATIVES (XX,YY,ZZ)
C
           DO IGR=5,7
            JGR=IGR-3
            DO IPTS=1,MPTS
             RHOG(LPTS+IPTS,IGR,ISPN)=RHOG(LPTS+IPTS,IGR,ISPN)
     &       +2*(PSIG(IPTS,JGR,JLOC)**2
     &          +PSIG(IPTS,IGR,JLOC)*PSIG(IPTS,1,JLOC))
            END DO
           END DO
C
C SECOND DERIVATIVES (XY,XZ,YZ)
C
           DO IGR=2,3
            DO JGR=IGR+1,4
             KGR=IGR+JGR+3
             DO IPTS=1,MPTS
              RHOG(LPTS+IPTS,KGR,ISPN)=RHOG(LPTS+IPTS,KGR,ISPN)
     &        +2*(PSIG(IPTS,IGR,JLOC)*PSIG(IPTS,JGR,JLOC)
     &           +PSIG(IPTS,KGR,JLOC)*PSIG(IPTS,1,JLOC))
             END DO
            END DO
           END DO
   94     CONTINUE
   96    CONTINUE
        END IF
C CHECK CHARGE
       CHARGE=0.0D0
           DO ISPN=1,NSPN
           DO IPTS=1,MPTS 
           CHARGE=CHARGE+CV(IPTS)*CV(IPTS)*WMSH(LPTS+IPTS)!!RHOG(LPTS+IPTS,1,ISPN)!!*WMSH(LPTS+IPTS)!/NGRP
           END DO
           END DO
CX          PRINT*,'CHARGE IN FLONASE:',CHARGE,LPTS,MPTS,NMSH
CCC       IF(CHARGE.LT.1.0D-5)STOP'CHARGE IN FLONASE'
          END DO
CCC       IF(NFLO.EQ.1)THEN
CCC       PRINT*,'FLONASE ORTHONORMALITY CHECK'
CCC         ERROR=0.0D0
CCC         DO KFLO=1,NWFS(1)                 
CCC               DO LFLO=1,NWFS(1)   
CCC               ERROR=ERROR+ABS(HAM(KFLO,LFOW))
CCC               END DO
CCC         IF(LFLO.LT.10)THEN
CCC         PRINT 55,(HAM(KFLO,LFLO),LFLO=1,MIN(NWFS(1),10))               
CCC         END IF
CCC         END DO
CCC         PRINT*,'ORTHOGONALITY ERROR:',ERROR
CCCC NOTE THAT SOME DIAGONAL ELEMENTS WILL BE ZERO IN REDREP MODE
CCC       END IF
CCC 55    FORMAT(' ',10F12.6)
CCC       print*,'MADE IT TO END IN FLONASE'
CCC       print*,'TOTAL TIME FOR RxRAVEL CALLS',TRx,IR
CCC       print*,'TOTAL TIME FOR GORBDRV CALLS',TIMEGORB,IG
CCC       call flush(6)
       RETURN
       END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc
C Dr. Pederson's FLONASE turned into a MPI version 
       SUBROUTINE IFLONASE
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc' 
       PARAMETER (NMAX=MPBLOCK)
       COMMON/TMP4/COULOMB(MAX_PTS)
       COMMON/FORRx/NFLO,KSPX!!,TMAT(NDH,NDH,2)
       COMMON/TMP1/POT    (MAX_PTS),RHOG(MAX_PTS,NVGRAD,MXSPN)
       DIMENSION PSIG(NMAX,10,MAX_OCC)
     &  ,PTS(NSPEED,3),GRAD(NSPEED,10,6,MAX_CON,3)
     &  ,RVECA(3,MX_GRP),ICOUNT(MAX_CON,3),TV(NDH),CV(NMAX)
        charge=0.0D0
C        RHOG=0.0D0
        COULOMB=0.0D0
%ifdef MPI 
       CALL PAMFLONASE(COULOMB)
%else
       DO LPTS=0,NMSH-1,NMAX
        MPTS=MIN(NMAX,NMSH-LPTS)
        DO I=1,NDH 
         TV(I)=TMAT(I,ABS(NFLO),KSPX)
        END DO
        CALL FLONASE(LPTS,MPTS,CV,TV)
        DO I=1,MPTS
         COULOMB(I+LPTS)=CV(I)
        END DO
       END DO
%endif
      CALL GTTIME(APT2)
       call flush(6)
C CHECK CHARGE
           DO ISPN=1,NSPN
           DO IPTS=1,NMSH
C          CHARGE=CHARGE+RHOG(IPTS,1,ISPN)*WMSH(IPTS)!/NGRP
           CHARGE=CHARGE+COULOMB(IPTS)*COULOMB(IPTS)*WMSH(IPTS)
           END DO
           END DO
          PRINT*,'CHARGE IN FLONASE:',CHARGE,NWFS,NMSH 
       IF(CHARGE.LT.1.0D-5)STOP'CHARGE IN FLONASE'
       IF(NFLO.EQ.1)THEN
       PRINT*,'FLONASE ORTHONORMALITY CHECK'
         ERROR=0.0D0
         DO KFLO=1,NWFS(1)
               DO LFLO=1,NWFS(1)
               ERROR=ERROR+ABS(HAM(KFLO,LFOW))
               END DO
         END DO
         PRINT*,'ORTHOGONALITY ERROR:',ERROR
C NOTE THAT SOME DIAGONAL ELEMENTS WILL BE ZERO IN REDREP MODE
       END IF
 55    FORMAT(' ',10F12.6)
       print*,'MADE IT TO END IN FLONASE'
       call flush(6)
       RETURN 
       END
C
C *******************************************************************
c
C CONSTRUCT MATRIX ELEMENTS OF POTENTIAL
C MARK PEDERSON AUG 1995
C
       SUBROUTINE APATCH(IM,MM,POTDV)
C
C WRITTEN BY MARK R PEDERSON
C 02/12/97 David Clay Patton
C
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       PARAMETER (NMAX=MPBLOCK)
       DIMENSION POTDV(MAX_PTS)
C
C SCRATCH COMMON BLOCK FOR LOCAL ARRAYS
C
       COMMON/TMP2/PSIBR(MPBLOCK,5*NDH),PSIB(MPBLOCK)
     &  ,VOL(MPBLOCK),QR(3,MPBLOCK)
       COMMON/WTSFOD/WTFOD
       COMMON/FORRX2/MEQV
       DIMENSION IBEG(3),IEND(3),NDEG(3)
       DIMENSION BASPHI(NDH*ISMAX,2)  
       DIMENSION PV(MPBLOCK)
       LOGICAL LSETUP
       DATA MDCL/2/
       MDCL=2 
C JUn 12 2022 -- USE MDCL=2 
       IF(IM.EQ.1)BASPHI=0.0D0
C GAM=   REPRESENATION INDEX, L=ROW OF REPRESENATION
C MDCL=1 CALCULATE MATRIX ELEMENTS BY ROTATING EACH MESH POINT TO
C        EQUIVALENT POINTS AND FIND <PSI(I,GAM,L)|V(I)|PSI(I,GAM,L)>
C        SUMMED OVER I WITH L=1
C MDCL=2 CALCULATE MATRIX ELEMENTS BY USING ONLY INEQUVIALENT POINTS
C        AND FIND <PSI(I,GAM,L)|V(I)|PSI(I,GAM,L)> SUMMED OVER I AND L
C
       IF (NMSH.GT.MAX_PTS) THEN
        PRINT *,'PATCH: MAX_PTS MUST BE AT LEAST', NMSH
        CALL STOPIT
       END IF
C
C      INITIALIZE ARRAY INDEX IN GETBAS
C
CC       LSETUP=.TRUE.
CC       call gttime(t1)
CC       CALL AGETBAS(LSETUP,0,0,QR,PSIBR,0,NBAS)
CC       call gttime(t2)
CC       print*,'TIME FOR 0 0 ',t2-t1
C
%ifdef MPI 
C call mpi version 
       CALL PAMNEWWAY(MCDL,POTDV,BASPHI(1,IM))
%else
       DO LPTS=0,NMSH-1,NMAX
        MPTS=MIN(NMAX,NMSH-LPTS)
        DO I=1,MPTS
        PV(I)=POTDV(I+LPTS)
        END DO
        CALL NEWWAY(LPTS,MPTS,MDCL,PV,BASPHI(1,IM),IBT)
       END DO
%endif 
C      DO I=1,13  
C      PRINT 555,I,BASPHI(I)   ! <B^GAMMA^ROW_N | PHI_I>
C      END DO
       IF(IM.EQ.MM)THEN
C CHECK FOR ZEROS
              IND=0
              DO KREP=1,N_REP
              DO KROW=1,NDMREP(KREP)
                ADD1=0.0D0
                ADD2=0.0D0
                DO IBAS=1,NS_TOT(KREP)
                IND=IND+1
                ADD1=ADD1+ABS(BASPHI(IND,1 ))
                ADD2=ADD2+ABS(BASPHI(IND,MM))
                END DO
               IF(NS_TOT(KREP).NE.0)THEN
                PRINT*,'KREP,ADD1,ADD2:',KREP,KROW,ADD1,ADD2,IND
               END IF
               END DO
             
               END DO
       IST=0
       INDX=0
C       IF(ABS(MEQV).NE.1.AND.ABS(MEQV).NE.4) STOP  'MEQV ....'
       DO KREP=1,N_REP
          HAM=0.0D0
       DO KROW=1,NDMREP(KREP)!/LDMREP(KREP)    !!!1
          DO IBAS=1,NS_TOT(KREP)
          IND=IST+IBAS
                 IF(IND.GT.NDH*ISMAX)THEN
                 PRINT*,'NDH*ISMAX MUST BE >',IND
                 CALL STOPIT
                 END IF
          DO JBAS=1,NS_TOT(KREP)
          JND=IST+JBAS
CC          IF(KROW.EQ.1) THEN 
          HAM(JBAS,IBAS)=HAM(JBAS,IBAS)+BASPHI(IND,MM)*BASPHI(JND,1)
CC          END IF 
C FIND SUM_FLO <IBAS|FLO><FLO|JBAS> (SUMMED OVER ALL FLOS)
          END DO
          END DO
          IST=IST+NS_TOT(KREP)
       END DO
CC        print*,'MEQV',MEQV
          FF=DBLE(MEQV)/NDMREP(KREP)  !MEQV*NGRP  !!!1.0D0!!/NDMREP(KREP)/4.0D0
          DO IBAS=1    ,NS_TOT(KREP)
          DO JBAS=IBAS,NS_TOT(KREP)
          INDX=INDX+1
          HSTOR(INDX,2)=HSTOR(INDX,2)+
     &        FF*(HAM(JBAS,IBAS)+HAM(IBAS,JBAS))/2.0D0
          END DO
          END DO
       END DO
       END IF 
           PRINT*,'NREC:',INDX,IST
        ERROR=0.0D0
C       DO I=1,INDX 
C       PRINT 555,HSTOR(I,1), HSTOR(I,2),HSTOR(I,2)/HSTOR(I,1)
C       ERROR=ERROR+ABS(HSTOR(I,1)-HSTOR(I,2))/(ABS(HSTOR(I,1)+1.0D-10))
C       END DO
 555   FORMAT(I5,3F16.8)
 556   FORMAT(8F16.8)
       END
C
C ********************************************************************
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc

C
      SUBROUTINE NEWWAY(LPTS,MPTS,MDCL,PV,BASPHI,IBT)
      INCLUDE 'PARAMS'
      INCLUDE 'commons.inc'
      LOGICAL LSETUP
      DIMENSION POTDV(MAX_PTS),BASPHI(*)
      COMMON/TMP2/PSIBR(MPBLOCK,5*NDH),PSIB(MPBLOCK)
     & ,VOL(MPBLOCK),QR(3,MPBLOCK)
      COMMON/TMP6/ORBT(MPBLOCK,10,MAX_CON,3)
     &  ,PSIBS(MPBLOCK,MAXSLC*MAX_IDENT)
     &  ,CONORB(MPBLOCK,MAX_CON,3),ANGLE(MPBLOCK,10),DTS(3,MPBLOCK)
     &  ,RVEC(3),RVECA(3,MX_GRP),NSALC(MAX_REP)
     &  ,INDEX(ISMAX,MAX_CON,3,MAX_IDENT,MAXSYMSALC)
       DIMENSION IBEG(3),IEND(3),NDEG(3)
       DIMENSION PV(MPBLOCK)
       DATA TOT_TIME,TIME_LST/0.0D0,0.0D0/
      LSETUP=.FALSE.
      DO IPTS=1,MPTS
C       VOL( IPTS)=POTDV(LPTS+IPTS)       
       VOL( IPTS)=PV(IPTS)       
       QR(1,IPTS)=RMSH(1,LPTS+IPTS)
       QR(2,IPTS)=RMSH(2,LPTS+IPTS)
       QR(3,IPTS)=RMSH(3,LPTS+IPTS)
      END DO
      ICNT=0
      IBT=0
      DO  KREP=1,N_REP
      call gttime(AGIN)
      CALL AGETBAS(MPTS,1,QR,PSIBR,KREP,NBAS)
      call gttime(AGOUT)
      TOT_TIME=TOT_TIME+ AGOUT-AGIN
      IF(TOT_TIME.GT.TIME_LST) THEN
      TIME_LST=2.0D0*TOT_TIME
      PCT_TIME=TOT_TIME/AGOUT
      PRINT*,'NEW WAY TIME',TOT_TIME,PCT_TIME
      END IF
C     PRINT*,'KREP:',KREP,' NBAS:',NBAS,' DEG:',NDMREP(KREP)
      DO   KROW=1,NDMREP(KREP)!!!! was 1 
        IBG=(KROW-1)*NDMREP(KREP)
        DO  ISS=1,NBAS
        IBT=IBT+1
        DO IPTS=1,MPTS
CC        BASPHI(IBT)=BASPHI(IBT)+VOL(IPTS)*PSIBR(IPTS,ISS+IBG)
        BASPHI(IBT)=BASPHI(IBT)+VOL(IPTS)*PSIBS(IPTS,IBT)
        END DO
        END DO
      END DO
      ICNT=IBT
      END DO
      END
C
C ******************************************************************\
C
C       SUBROUTINE AGETBAS(LSETUP,MPTS,IGP,R,PSIBR,JREP,NBAS)
       SUBROUTINE AGETBAS(MPTS,IGP,R,PSIBR,JREP,NBAS)
C
C CALCULATES THE VALUE OF ALL SALC BASIS FUNCTIONS FOR A
C BUNCH OF MESH POINTS AND STORES THEM IN PSIBR
C WRITTEN BY MARK R PEDERSON
C DVP: THIS ROUTINE MAY NOT BE CALLED WITH ARBITRARY MPTS/R/IGP/JREP
C ARGUMENTS. FOR A PARTICULAR SET MPTS/R OF POINTS, IT MUST BE CALLED
C WITH JREP=IGP=1 FIRST AND CAN ONLY BE CALLED WITH OTHER JREP/IGP
C ARGUMENTS IF MPTS/R DOES NOT CHANGE.
C
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       LOGICAL LSETUP
       DATA LSETUP/.TRUE./ 
       DIMENSION PSIBR(MPBLOCK,5*NDH),R(3,MPBLOCK)
       COMMON/TMP6/ORBT(MPBLOCK,10,MAX_CON,3)
     &  ,PSIBS(MPBLOCK,MAXSLC*MAX_IDENT)
     &  ,CONORB(MPBLOCK,MAX_CON,3),ANGLE(MPBLOCK,10),DTS(3,MPBLOCK)
     &  ,RVEC(3),RVECA(3,MX_GRP),NSALC(MAX_REP)
     &  ,INDEX(ISMAX,MAX_CON,3,MAX_IDENT,MAXSYMSALC)
       DIMENSION IBEG(3),IEND(3),NDEG(3)
       DATA IBEG,IEND,NDEG/1,2,5,1,4,10,1,3,6/
C
C IF (LSETUP), SET UP INDEX ARRAY FOR SALCS
C
       IF (LSETUP) THEN
       print*,'ONE TIME INDEX CALCULATION...'
        INS=0
        ISALC=0
        DO IREP=1,N_REP
         DO IROW=1,NDMREP(IREP)
          ISALC=ISALC+1
          ISHELLA=0
          NSC=0
          DO IFNCT=1,NFNCT
           DO I_POS=1,N_POS(IFNCT)
            ISHELLA=ISHELLA+1
            RVEC(1)=RIDT(1,ISHELLA)
            RVEC(2)=RIDT(2,ISHELLA)
            RVEC(3)=RIDT(3,ISHELLA)
            CALL OBINFO(1,RVEC,RVECA,M_NUC,KSHELL)
            CALL GSMAT(KSHELL,1)
            DO LI=1,LSYMMAX(IFNCT)+1
             DO IC=1,N_CON(LI,IFNCT)
              DO IQ=1,N_SALC(ISALC,LI,KSHELL)
               INS=INS+1
               NSC=NSC+1
               INDEX(IQ,IC,LI,ISHELLA,ISALC)=INS
              END DO
             END DO
            END DO
           END DO
          END DO
         END DO
         IF (DEBUG) PRINT *,'IREP,IROW-1,NSC',IREP,IROW-1,NSC
         NSALC(IREP)=NSC
        END DO
        IF (DEBUG) THEN
         PRINT *,'GETBAS: TOTAL NUMBER OF BASIS FUNCTIONS:',INS
        END IF
CC        open(21,file='INDEX',form='unformatted')
CC        write(21)INDEX
CC        write(21)NSALC
CC        close(21)
CCx        RETURN
       END IF
C
       LSETUP=.FALSE.
       IF (MPTS.GT.MPBLOCK) THEN
        PRINT *,'MPTS MUST BE:',MPBLOCK
        CALL STOPIT
       END IF
C
CC        open(21,file='INDEX',form='unformatted')
CC        read(21)INDEX
CC        read(21)NSALC 
CC        close(21)
C INIT PSIBS
C
       IF ((IGP.EQ.1).AND.(JREP.EQ.1)) THEN
        DO IS=1,INS
         DO IPTS=1,MPTS
          PSIBS(IPTS,IS)=0.0D0
         END DO
        END DO
        ISHELLA=0
        CALL GTTIME(T1)
        DO 250 IFNCT=1,NFNCT
         DO 240 I_POS=1,N_POS(IFNCT)
          ISHELLA=ISHELLA+1
          RVEC(1)=RIDT(1,ISHELLA)
          RVEC(2)=RIDT(2,ISHELLA)
          RVEC(3)=RIDT(3,ISHELLA)
          CALL OBINFO(1,RVEC,RVECA,M_NUC,KSHELL)
          CALL GSMAT(KSHELL,1)
          DO 230 K_POS=1,M_NUC
           DO IPTS=1,MPTS
            DTS(1,IPTS)=R(1,IPTS)-RVECA(1,K_POS)
            DTS(2,IPTS)=R(2,IPTS)-RVECA(2,K_POS)
            DTS(3,IPTS)=R(3,IPTS)-RVECA(3,K_POS)
           END DO
           CALL GTORBNH(MPTS,DTS,IFNCT,ANGLE,CONORB)
           DO  LI=1,LSYMMAX(IFNCT)+1
            DO  IC=1,N_CON(LI,IFNCT)
             DO  MU=IBEG(LI),IEND(LI)
              DO  IPTS=1,MPTS
               ORBT(IPTS,MU,IC,LI)=CONORB(IPTS,IC,LI)*ANGLE(IPTS,MU)
              END DO
             END DO
            END DO
           END DO
C
           ISALC=0
           NBI_BEG=0
           DO IREP=1,N_REP
            DO IROW=1,NDMREP(IREP)
             ISALC=ISALC+1
             DO LI=1,LSYMMAX(IFNCT)+1
              ILOC=NDEG(LI)*(K_POS-1)-IBEG(LI)+1
              DO MU=IBEG(LI),IEND(LI)
               NBI=NBI_BEG
               DO IC=1,N_CON(LI,IFNCT)
                DO IQ=1,N_SALC(ISALC,LI,KSHELL)
                 INS=INDEX(IQ,IC,LI,ISHELLA,ISALC)
                 FAC= U_MAT(ILOC+MU,IQ,ISALC,LI,1)
                 NBI=NBI+1
                 DO IPTS=1,MPTS
                  PSIBS(IPTS,INS)=PSIBS(IPTS,INS)
     &            +FAC*ORBT(IPTS,MU,IC,LI)
                 END DO
                END DO
               END DO
              END DO
              NBI_BEG=NBI
             END DO
            END DO
           END DO
           IF (NBI.GT.MAXSLC) THEN
            PRINT *,'NUMHAM: MAXSLC MUST BE AT LEAST: ',NBI
            CALL STOPIT
           END IF
 230      CONTINUE
 240     CONTINUE
 250    CONTINUE
       END IF
C
       INS=0
       DO IREP=1,N_REP
        IF (IREP.EQ.JREP) THEN
         NBAS=NSALC(IREP)
         DO ISS=1,NSALC(IREP)
          INS=INS+1
          DO IR=1,NDMREP(IREP)
           DO IPTS=1,MPTS
            PSIBR(IPTS,ISS+(IR-1)*NSALC(IREP))=0.0D0
           END DO
           DO JR=1,NDMREP(IREP)
            DO IPTS=1,MPTS
             PSIBR(IPTS,ISS+(IR-1)*NSALC(IREP))=
     &       PSIBR(IPTS,ISS+(IR-1)*NSALC(IREP))+
     &       PSIBS(IPTS,INS+(JR-1)*NSALC(IREP))*REP(JR,IR,IGP,IREP)
            END DO
           END DO
          END DO
         END DO
         INS=INS+(NDMREP(IREP)-1)*NSALC(IREP)
        ELSE
         INS=INS+ NDMREP(IREP)   *NSALC(IREP)
        END IF
       END DO
       RETURN
       END
C
