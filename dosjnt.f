       SUBROUTINE DOSJNT 
C
C DOSJNT BY MRP/DVP NOV 1996
C CALCULATES THE JOINT DENSITY OF STATES WITH AND WITHOUT DIPOLE WEIGHTS
C
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       PARAMETER (MXSPEC=10000)
       PARAMETER (NMAX=MPBLOCK)
C
C FOOL THE COMPILER FOR MXSPN=1 TO SUPRESS WARNING MESSAGES
C THAT ARE REALLY IRRELEVANT
C
       LOGICAL IUPDAT,ICOUNT,EXIST,LMKFIL,USEMPI,DMOM
       COMMON/TMP2/PSIG(NMAX,MAX_OCC)
C
C SCRATCH COMMON BLOCK FOR LOCAL ARRAYS
C
       COMMON/TMP1/H(MAX_OCC,MAX_OCC,3)
     &  ,SPDIP(MXSPEC),SPTOT(MXSPEC),RVECA(3,MX_GRP)
     &  ,PTS(NSPEED,3),GRAD(NSPEED,10,6,MAX_CON,3)
     &  ,ICOUNT(MAX_CON,3)
       DIMENSION ISIZE(3)
       DIMENSION P(NMAX,3),Q(NMAX,3),V(NMAX)
       DATA USEMPI/.TRUE./
       DATA ISIZE/1,3,6/
       DATA HA2EV/27.2116D0/
       DATA TEMP/1.0D-4/
       DATA EMIN,EMAX/-10000.,1.0D0/
       DATA ENJD,EXJD/ 0.0,1.0D0/
       DATA FWHM/0.05D0/
C
C RETURN IF INPUT FILE DOES NOT EXIST
C
       PRINT '(A)','CALCULATING JOINT DENSITY OF STATES'
       INQUIRE(FILE='DOSJNT',EXIST=EXIST)
       IF (.NOT.EXIST) THEN
        PRINT '(2A)','DOSJNT: FILE DOSJNT DOES NOT EXIST ',
     &               '--> NOTHING TO DO'
        RETURN
       END IF
C
C CREATE A STANDARD INPUT FILE IF THE CURRENT INPUT FILE IS EMPTY
C
       CALL GTTIME(TIME1)
       LMKFIL=.TRUE.
       OPEN(74,FILE='DOSJNT',FORM='FORMATTED',STATUS='OLD')
       REWIND(74)
       READ(74,*,END=5,ERR=5) ISWITCH
       IF (ISWITCH .NE. 0) LMKFIL=.FALSE.
    5  CLOSE(74)
C
       IF (LMKFIL) THEN
        OPEN(74,FILE='DOSJNT',FORM='FORMATTED',STATUS='OLD')
        REWIND(74)
        WRITE(74,*) '0  auto=0, otherwise user-defined'
        WRITE(74,99) EMIN,EMAX,FWHM,'EMIN, EMAX, FWHM IN HARTREES'
        WRITE(74,98) ENJD,EXJD,'PLOTTED ENERGY WINDOW IN HARTREES'
        CLOSE(74)
   98  FORMAT(2F14.5,16X,A)
   99  FORMAT(3F14.5,2X,A)
       END IF
C
C READ IN TEMPERATURE
C
       OPEN(39,FILE='TMPTRE',FORM='FORMATTED',STATUS='UNKNOWN')
       REWIND(39)
       READ(39,*,END=10) TEMP
   10  CLOSE(39)
C
C READ IN NECESSARY INPUT DATA
C
       OPEN(74,FILE='DOSJNT',FORM='FORMATTED',STATUS='OLD')
       REWIND(74)
       READ(74,*,END=20) ISWITCH
       READ(74,*,END=20) EMIN,EMAX,FWHM
       READ(74,*,END=20) ENJD,EXJD
       GOTO 25
   20  CLOSE(74)
       PRINT *,'DOSJNT: FILE DOSJNT IS BROKEN'
       GOTO 900
C
   25  CLOSE(74)
       EWIND=(EXJD-ENJD)
       IF ((EWIND .LE. 0.0D0) .OR. (FWHM .LE. 0.0D0)) THEN
        PRINT '(A)','CALCULATION OF JDOS HAS BEEN SKIPPED'
        GOTO 900
       END IF
       NSPEC=INT(10*EWIND/FWHM)+2
       EALP=4*LOG(2.0D0)/FWHM**2
       PI=4*ATAN(1.0D0)
       VFAC=SQRT(EALP/PI)/HA2EV
       IF (NSPEC.GT.MXSPEC) THEN
        PRINT *,'DOSJNT: MXSPEC MUST BE AT LEAST: ',NSPEC
        CALL STOPIT
       END IF
      IF(.NOT.USEMPI)THEN
C
C CALL WFWIND TO GET THE CORRECT PSI_COEF
C WFWIND DEFINES NWF AND NWFS
C
       CALL GTTIME(TIME1)
       EFMIN=MIN(EFERMI(1),EFERMI(NSPN))
       EFMAX=MAX(EFERMI(1),EFERMI(NSPN))
C      EMIN=EFMIN-EWIND-(4*FWHM+20*TEMP)
C      EMAX=EFMAX+EWIND+(4*FWHM+20*TEMP)
       CALL WFWIND(EMIN,EMAX,.TRUE.,.TRUE.,IFAIL)
       IF (IFAIL .EQ. 1) THEN
        PRINT *,'DOSJNT: WFWIND FAILED, ABORTING JDOS CALCULATION'
        RETURN
       END IF
C
C ZERO H (CONTAINS THE DIPOLE MATRIX ELEMENTS)
C
       DO IX=1,3
        DO IWF=1,NWF
         DO JWF=1,NWF
          H(JWF,IWF,IX)=0.0D0
         END DO
        END DO
       END DO
C
C CALCULATE DIPOLE MATRIX ELEMENTS BY MESH INTEGRATION
C
       CHARGE=0.0D0
       NPILE=NMSH/NMAX
       FCGRP=1.0D0/NGRP
       DO 850 IPILE=0,NPILE
        NOFS=IPILE*NMAX
        MPTS=MIN(NMAX,NMSH-NOFS)
        DO IPTS=1,MPTS
         Q(IPTS,1)=RMSH(1,IPTS+NOFS)
         Q(IPTS,2)=RMSH(2,IPTS+NOFS)
         Q(IPTS,3)=RMSH(3,IPTS+NOFS)
         V(  IPTS)=WMSH(IPTS+NOFS)*FCGRP
        END DO
        DO 800 IGP=1,NGRP
         DO J=1,3
          DO IPTS=1,MPTS
           P(IPTS,J)=0.0D0
          END DO
          DO K=1,3
           DO IPTS=1,MPTS
            P(IPTS,J)=P(IPTS,J)+RMAT(K,J,IGP)*Q(IPTS,K)
           END DO
          END DO
         END DO
C
C INITIALIZE PSIG 
C
         DO IWF=1,NWF
          DO IPTS=1,MPTS
           PSIG(IPTS,IWF)=0.0D0
          END DO
         END DO  
         ISHELLA=0
         DO 86 IFNCT=1,NFNCT
          LMAX1=LSYMMAX(IFNCT)+1
          DO 84 I_POS=1,N_POS(IFNCT)
           ISHELLA=ISHELLA+1
           CALL OBINFO(1,RIDT(1,ISHELLA),RVECA,M_NUC,ISHDUMMY)
           DO 82 J_POS=1,M_NUC
            CALL UNRAVEL(IFNCT,ISHELLA,J_POS,RIDT(1,ISHELLA),
     &                   RVECA,L_NUC,1)
            IF(L_NUC.NE.M_NUC)THEN
             PRINT *,'DOSJNT: PROBLEM IN UNRAVEL'
             CALL STOPIT
            END IF
            DO 80 JPTS=1,MPTS,NSPEED
             NPV=MIN(NSPEED,MPTS-JPTS+1)
             IPTS=JPTS-1
             DO LPV=1,NPV
              PTS(LPV,1)=P(IPTS+LPV,1)-RVECA(1,J_POS)
              PTS(LPV,2)=P(IPTS+LPV,2)-RVECA(2,J_POS)
              PTS(LPV,3)=P(IPTS+LPV,3)-RVECA(3,J_POS)
             END DO
             CALL GORBDRV(0,IUPDAT,ICOUNT,NPV,PTS,IFNCT,GRAD)
             IF (IUPDAT) THEN
              ILOC=0
              DO 78 LI=1,LMAX1
               DO MU=1,ISIZE(LI)
                DO ICON=1,N_CON(LI,IFNCT)
                 ILOC=ILOC+1
                 IF (ICOUNT(ICON,LI)) THEN
                  DO IWF=1,NWF
                   FACTOR=PSI(ILOC,IWF,1)
                   DO LPV=1,NPV
                    PSIG(IPTS+LPV,IWF)=PSIG(IPTS+LPV,IWF)
     &              +FACTOR*GRAD(LPV,1,MU,ICON,LI)
                   END DO  
                  END DO  
                 END IF
                END DO  
               END DO  
   78         CONTINUE
             END IF
   80       CONTINUE
   82      CONTINUE
   84     CONTINUE
   86    CONTINUE
C
C UPDATE CHARGE AND DIPOLE MATRICES
C
         DO IWF=1,NWF
          DO IPTS=1,MPTS
           CHARGE=CHARGE+V(IPTS)*PSIG(IPTS,IWF)**2
          END DO
         END DO
         DO IX=1,3
          DO IWF=1,NWF
           JWMAX=NWFS(1)
           IF (IWF.GT.NWFS(1)) JWMAX=NWF
           DO JWF=IWF,JWMAX
            DO IPTS=1,MPTS
             H(JWF,IWF,IX)=H(JWF,IWF,IX)
     &       +PSIG(IPTS,IWF)*PSIG(IPTS,JWF)*V(IPTS)*P(IPTS,IX)
            END DO
           END DO
          END DO
         END DO
  800   CONTINUE
  850  CONTINUE
       ELSE
       PRINT*,'READING DIPOLE MATRIX ELEMENTS FROM SPNDAT'
           INQUIRE(FILE='SPNDAT',EXIST=EXIST)
           IF(EXIST)THEN
           OPEN(74,FILE='SPNDAT',FORM='UNFORMATTED')
           READ (74)NWF,NWFS,NSPN,DMOM,LMOM
           READ (74)EVLOCC
           READ (74)TEMP
           READ (74)EFRMI 
                        EFERMI(1)   =EFRMI
                        EFERMI(NSPN)=EFRMI
           READ (74)(((H(JWF,IWF,IX),JWF=1,NWF),IWF=1,NWF),IX=1,3)
           READ (74)CHARGE
           READ (74)E_UP,E_DN
           CLOSE(74)
           ELSE
           IF(.NOT.DMOM.OR..NOT.EXIST)THEN
           PRINT*,'DIPOLE MATRIX ELEMENTS UNAVAILABLE'
           PRINT*,'CHANGE DMOM=.TRUE. IN SPNORB'
           PRINT*,'ABANDONING JOINT DOS CALCULATION'
           RETURN
           END IF
       END IF
                   DO IX=1,3
                   DO IWF=1,NWF
                   DO JWF=IWF+1,NWF
                    H(JWF,IWF,IX)=H(IWF,JWF,IX)
                   END DO
                   END DO
                   END DO
       END IF
C
C JOINT DOS CALCULATION
C CALCULATE <PSI-I | DIPOL | PSI-J>**2 AND SPECTRUM
C
       ESTEP=EWIND/(NSPEC-1)
       DO IPTS=1,NSPEC
        SPTOT(IPTS)=0.0D0
        SPDIP(IPTS)=0.0D0
       END DO
       DO IWF=1,NWF
        ISPN=1
        IF (IWF.GT.NWFS(1)) ISPN=2
        OCCI=FFERMI(EVLOCC(IWF),EFERMI(ISPN),TEMP)
        DO JWF=IWF,NWF
         JSPN=1
         IF (JWF.GT.NWFS(1)) JSPN=2
         OCCJ=FFERMI(EVLOCC(JWF),EFERMI(JSPN),TEMP)
         DIP=H(JWF,IWF,1)**2
     &      +H(JWF,IWF,2)**2
     &      +H(JWF,IWF,3)**2
             IF(ISPN.NE.JSPN)DIP=0.0D0
         EDIFF=EVLOCC(JWF)-EVLOCC(IWF)
         EDIFF27=EDIFF*27.2118
         FCT=MAX(OCCI*(1.-OCCJ),OCCJ*(1.-OCCI))
         IF(FCT*DIP.GT.0.00001)THEN
             EV1=MIN(EVLOCC(IWF),EVLOCC(JWF))
             EV2=MAX(EVLOCC(IWF),EVLOCC(JWF))
             EDIFF=EV1-EV2
         PRINT 203,IWF,JWF,EV1,EV2,EDIFF,FCT,DIP
         END IF
 203     FORMAT(' ',2i5,6g15.6)
C
C LOOP OVER ENERGY GRID TO GET INTENSITIES
C
         BACKW= 1.0D0
         IF (IWF.EQ.JWF) BACKW= 0.0D0
         DO IPTS=1,NSPEC
          ERG=(IPTS-1)*ESTEP+ENJD
          FUNC=VFAC*EXP(-EALP*(ERG+EDIFF)**2)
          SPTOT(IPTS)=SPTOT(IPTS)+OCCI*(1.0D0-OCCJ)*FUNC
          SPDIP(IPTS)=SPDIP(IPTS)+OCCI*(1.0D0-OCCJ)*FUNC*DIP
          FUNC=BACKW*VFAC*EXP(-EALP*(ERG+EDIFF)**2)
          SPTOT(IPTS)=SPTOT(IPTS)+OCCJ*(1.0D0-OCCI)*FUNC
          SPDIP(IPTS)=SPDIP(IPTS)+OCCJ*(1.0D0-OCCI)*FUNC*DIP
         END DO
        END DO
       END DO
C
C CORRECT FOR SPIN EFFECTS AND PRINT SPECTRA
C
              DO IPTS=1,NSPEC
              SDMAX=MAX(SDMAX,SPDIP(IPTS))
              STMAX=MAX(STMAX,SPTOT(IPTS))
              END DO 
              DO IPTS=1,NSPEC
              SPDIP(IPTS)=SPDIP(IPTS)/SDMAX
              SPTOT(IPTS)=SPTOT(IPTS)/STMAX
              END DO
       OPEN(73,FILE='JNTOUT',STATUS='UNKNOWN')
       REWIND(73)
       DO IPTS=1,NSPEC
        ERG=((IPTS-1)*ESTEP+ENJD)
        WRITE(73,1010)-ERG*HA2EV,SPDIP(IPTS),SPTOT(IPTS)
 1010   FORMAT(3(1X,F15.6))
       END DO
       CLOSE(73)
  900  CONTINUE
       CALL GTTIME(TIME2)
       CALL TIMOUT('JOINT DENSITY OF STATES:           ',TIME2-TIME1)
       RETURN
       END
C
C ********************************************************************

       FUNCTION FFERMI(E,EFRM,TEMP)
        INCLUDE 'PARAMS'
        INCLUDE 'commons.inc'
        EDIFF=E-EFRM
        IF (ABS(EDIFF) .GT. 50*ABS(TEMP)) THEN
         IF (EDIFF*TEMP .LT. 0.0D0) THEN
          FFERMI=1.0D0
         ELSE
          FFERMI=0.0D0
         END IF
        ELSE
         FFERMI=1.0D0/(EXP(EDIFF/TEMP)+1.0D0)
        END IF
        RETURN
       END
C
C **************************************************************
C
C WFWIND VERSION DIRK POREZAG NOVEMBER 1996 
C
       SUBROUTINE WFWIND(EMIN,EMAX,SPN1,SPN2,IFAIL)
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       LOGICAL SPN1,SPN2,DOIT
       CHARACTER*10 EVAL_REP
C
C CHECKING AND SETTING UP SOME STUFF
C
       IFAIL=0
       CALL GTTIME(TIME1)
       IF (DEBUG) PRINT '(A,2(1X,F15.5))',
     &            ' IN WFWIND: EMIN, EMAX:',EMIN,EMAX
       IF(N_REP.GT.MAX_REP)THEN
        PRINT *,'WFWIND: MAX_REP MUST BE AT LEAST: ',N_REP
        CALL STOPIT
       END IF
C
C LOOP OVER SPIN
C
       NSYMM=0
       NUSYM=0
                     ISPBEG=NSPN
                     ISPEND=1
             IF(SPN1)ISPBEG=1
             IF(SPN2)ISPEND=NSPN
        NWF=0
        NWFS   (1)=0
        NWFS(NSPN)=0
                    DO JSPN=1,NSPN
                    DO IREP=1,N_REP
                    N_OCC(IREP,JSPN)=0
                    END DO
                    END DO
       DO 240 ISPN=ISPBEG,ISPEND
        DOIT=.FALSE.
        IF(ISPN.EQ.1.AND.SPN1)DOIT=.TRUE.
        IF(ISPN.EQ.2.AND.SPN2)DOIT=.TRUE.
       IF(DOIT)THEN
        IF (DEBUG) PRINT *,'WFWIND CALLS OVERLAP MODE: 1'
        CALL OVERLAP(1)
        IF (DEBUG) PRINT *,'WFWIND CALLS OVERLAP MODE: 2'
        CALL OVERLAP(2)
C       OPEN(81,FILE='HAMBST',FORM='UNFORMATTED',STATUS='UNKNOWN')
C       READ(81)NREC,NSPN,ETOTAL
C       DO JSPN=1,ISPN
C        READ(81)(HSTOR(IREC,2),IREC=1,NREC)
C       END DO     
C       CLOSE(81)
C  
C
C LOOP OVER REPRESENTATIONS
C GET MATRIX ELEMENTS
C
        KBAS=0
        DO 130 IREP=1,N_REP
         NBAS=NS_TOT(IREP)
         IF(NBAS.GT.NDH)THEN
          PRINT *,'WFWIND: NDH MUST BE AT LEAST: ',NBAS
          CALL STOPIT
         END IF
         DO 80 IBAS=1,NBAS
          DO 70 JBAS=IBAS,NBAS
           KBAS=KBAS+1
           OVER(JBAS,IBAS)=HSTOR(KBAS,1)
           HAM (JBAS,IBAS)=HSTOR(KBAS,2)
   70     CONTINUE
   80    CONTINUE
CJK01/2001
CC         CALL SCISSOR(IREP)
CJK01/2001       
C
C GET EIGENVECTORS AND EIGENVALUES (WILL BE RETURNED IN HAM AND EVAL)
C
         WRITE(EVAL_REP,'(A,2I2.2)')'EVEREP',I_REP,ISPN
         OPEN(2,FILE=EVAL_REP,FORM='UNFORMATTED')
         READ(2)NBAS
         READ(2)(EVAL(I),I=1,NBAS)
         READ(2)((HAM(J,I),J=1,NBAS),I=1,NBAS)
         CLOSE(2)
CC         CALL DIAGGE(NDH,NBAS,HAM,OVER,EVAL,SC1,1)
         print*,'wfwind:',(eval(i),i=1,nbas)
C
C DETERMINE WHICH EIGENSTATES ARE NEEDED
C
         IND1=0
         IND2=0
         DO I=1,NBAS
          IF (IND1.EQ.0) THEN
           IF (EVAL(I) .GE. EMIN) IND1=I
          END IF
          IF (IND2.EQ.0) THEN
           IF (EVAL(I) .GT. EMAX) IND2=I
          END IF
         END DO
         IF (IND1.EQ.0) THEN
          IOFS=0
          NEIG=0
         ELSE IF (IND2.EQ.0) THEN
          IOFS=IND1-1
          NEIG=NBAS-IOFS
         ELSE
          IOFS=IND1-1
          NEIG=IND2-IND1
         END IF
         IF (NEIG.GT.MAX_VIRT_PER_SYM) THEN
          PRINT *,'WFWIND: MAX_VIRT_PER_SYM MUST BE AT LEAST: ',NEIG
          IFAIL=1
          RETURN
         END IF
C
C STORE WAVEFUNCTIONS AND EIGENVALUES
C
         N_OCC(IREP,ISPN)=NEIG
         NWFS(ISPN)=NWFS(ISPN)+NEIG*NDMREP(IREP)
         NWF=NWF+NEIG*NDMREP(IREP)
         DO IEIG=1,NEIG
          NSYMM=NSYMM+1
          OCCUPANCY(NSYMM)=1.0D0
          DO IB=1,NBAS
           PSI_COEF(IB,IEIG,IREP,ISPN)=HAM(IB,IEIG+IOFS)
          END DO
          DO IDEG=1,NDMREP(IREP)
           NUSYM=NUSYM+1
           IF (NUSYM.GT.MAX_OCC) THEN
            PRINT *,'WFWIND: MAX_OCC MUST BE AT LEAST ',NUSYM
            IFAIL=1
            RETURN
           END IF
           EVLOCC(NUSYM)=EVAL(IEIG+IOFS)
          END DO
         END DO
  130   CONTINUE
       END IF
  240  CONTINUE
       CALL GTTIME(TIME2)
       CALL TIMOUT('WAVEFUNCTIONS IN ENERGY WINDOW:    ',TIME2-TIME1)
       RETURN
       END
C
