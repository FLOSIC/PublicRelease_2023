       SUBROUTINE VMESH(ITBEG,ICALC)
C ORIGINAL VERSION BY MARK R PEDERSON JULY 1989
        INCLUDE 'PARAMS'
        INCLUDE 'commons.inc'
C
C MXRZON: MAX. NUMBER OF RADIAL ZONES FOR ATOMIC SPERES
C MXTYP:  MAX. NUMBER OF DIFFERENT ATOM TYPES
C MXCUBE: MAX. NUMBER OF CUBES
C MXRAD:  MAX. NUMBER OF POINTS FOR A RADIAL MESH
C MXCPTS: MAX. NUMBER OF INEQIV. POINTS FOR AN ATOMIC CUBE
C MXANG:  MAX. NUMBER OF ANGULAR POINTS FOR AN ATOMIC SPHERE
C MSHSLV: MINIMUM NUMBER OF SLAVES FOR WHICH MASTER DOES ONLY SETUP
C
        PARAMETER (MXZCHG=100)
        PARAMETER (MXRZON=6)
        PARAMETER (MXTYP=5)
        PARAMETER (MXCUBE=100*MX_CNT)
        PARAMETER (MXRAD=200)
        PARAMETER (MXCPTS=400)
        PARAMETER (MXANG=400)
        PARAMETER (MSHSLV=4)
        LOGICAL INBOX,CATOM,EXIST,FIXIT,OK,LSYWT
        COMMON/ISTITL/RNUC(3,MX_CNT),ZALP(2,MX_CNT),AFUDIS,ALONG
     &  ,IFNU(MX_CNT),NPOW(MX_CNT),NNUC,MX1D

C
C SCRATCH COMMON BLOCK FOR LOCAL ARRAYS
C
        COMMON/TMP2/BCUT(3,MX_CNT+8),PLANE(2,3,MXCUBE)
     &   ,SIDE(2,3,MXCUBE),XSLICE(3*MX_CNT)
     &   ,XSEP(MX_CNT+2),RRAD(MXRAD),WRAD(MXRAD)
     &   ,RSQVOL(2,MXCUBE),BOXMOL(3,2)
     &   ,ALMIN(MAX_IDENT),ALMAX(MAX_IDENT)
     &   ,NXPT(3),ISLICE(3*MX_CNT),NUMBOX(MXCUBE)
     &   ,NFBUF(8),NSYMOP(MX_GRP),NORIG(MXCUBE)
     &   ,CATOM(MXCUBE),IFSPL(MX_CNT+2)
C
        DIMENSION RBUF(3,MXCPTS),WBUF(MXCPTS)
     &   ,ZZON(MXTYP),RZON(MXRZON)
     &   ,BOX(2,3),ANGLE(3,MXANG),DOMEGA(MXANG)
     &   ,RIDENT(3,MX_GRP),RNEWIDT(3,MX_CNT),CUBE(3,MXCUBE)
     &   ,NPATS(MXTYP),NPIST(MXTYP)
     &   ,LMXA(MXRZON,MXTYP),NPHI(MXTYP),NTHET(MXTYP),MSITES(1)
C
        DATA LSYWT/.FALSE./
        DATA ERRAT,AFUDAT/1.0D-7, 1.2D0/
        DATA NRZONE/6/
        DATA RZON/ 0.2D0, 0.4D0, 0.6D0, 1.0D0, 1.6D0, 1000.0D0/
        DATA NTYP/ 4/
        DATA ZZON/ 2.1D0, 10.1D0, 18.1D0, 0.0D0, 0.0D0/
        DATA NPATS/2,  4,  4,  6,  0/
        DATA NPIST/1,  1,  1,  1,  0/
        DATA NTHET/3,  3,  3,  3,  0/
        DATA NPHI/ 5,  5,  6,  6,  0/
        DATA LMXA/ 5,7,9,11,21,21, 5,7,9,11,21,21,
     &             5,7,9,11,21,21, 7,7,9,11,21,21,  6*0/
        DATA ERRIS,RAFUDIS/1.0D-7, 1.2D0/
        DATA CUTFAC,MXP1D/2.0D0, 8/
        DATA SPLRAT/2.0D0/
        DATA AU2ANG/0.529177D0/
C
C TOLER IS A GENERAL ACCURACY MARGIN.
C VOLTL IS THE VOLUME ACCURACY MARGIN.
C
        DATA TOLER/1.0D-8/
        DATA VOLTL/1.0D-10/
C
C CHECK IF VMOLD EXISTS AND READ OLD MESH IF DESIRED
C
        PRINT '(A)',' '
        PRINT '(A)','CREATING VARIATIONAL INTEGRATION MESH'
        CALL GTTIME(TIME1)
        TIME2=TIME1
        TIME3=TIME1
        IF (ITBEG.NE.0) THEN
         IF (ITBEG.LT.0) ITBEG=0
         INQUIRE(FILE='VMOLD',EXIST=EXIST)
         IF (EXIST) THEN
          PRINT '(A)','TRYING TO READ OLD MESH'
          OPEN(99,FILE='VMOLD',FORM='UNFORMATTED',STATUS='UNKNOWN')
          REWIND(99)
          READ(99) NMSH,JCALC
          PRINT '(A,I10)','TOTAL NUMBER OF MESH POINTS: ',NMSH
          IF (NMSH.GT.MAX_PTS) THEN
           PRINT *,'VMESH: MAX_PTS MUST BE AT LEAST: ',NMSH
           CALL STOPIT
          END IF
          READ(99)((RMSH(J,I),J=1,3),I=1,NMSH)
          READ(99)(WMSH(I),I=1,NMSH)
          CLOSE(99)
          IF (JCALC.EQ.ICALC) THEN
           CALL GTTIME(TIME2)
           CALL REORMSH
           CALL GTTIME(TIME3)
c
c mpi: send mesh to all nodes
c
%ifdef MPI
c
        CALL SENDDATA(102)
c
%endif
c
           GOTO 900
          END IF
          PRINT *,'VMESH: VMOLD IS INCOMPATIBLE WITH CURRENT GEOMETRY'
          PRINT *,'       A NEW MESH WILL BE CREATED'
          PRINT *,'       OLD MESH WILL BE STORED IN FILE VMSAV'
          OPEN(99,FILE='VMSAV',FORM='UNFORMATTED',STATUS='UNKNOWN')
          WRITE(99) NMSH,JCALC
          WRITE(99)((RMSH(J,I),J=1,3),I=1,NMSH)
          WRITE(99)(WMSH(I),I=1,NMSH)
          CLOSE(99)
         END IF
        END IF
        PI=4*ATAN(1.0D0)
C
C READ MESHDAT
C
        OPEN(99,FILE='MESHDAT',FORM='FORMATTED',STATUS='UNKNOWN')
        REWIND(99)
        READ(99,*,END=10) LSYWT
        READ(99,*,END=10) ERRAT,AFUDAT
        READ(99,*,END=10) NRZONE
        IF (NRZONE.GT.MXRZON) THEN
         PRINT *,'VMESH: MXRZON MUST BE AT LEAST: ',NRZONE
         CALL STOPIT
        END IF
        READ(99,*,END=10)(RZON(IRZ),IRZ=1,NRZONE-1)
        RZON(NRZONE)=1000.0D0
        READ(99,*,END=10) NTYP
        IF (NTYP.GT.MXTYP) THEN
         PRINT *,'VMESH: MXTYP MUST BE AT LEAST: ',NTYP
         CALL STOPIT
        ELSE IF (NTYP.LT.1) THEN
         PRINT *,'VMESH: NTYP IS < 1'
         CALL STOPIT
        END IF
        IF (NTYP.GT.1) THEN
         READ(99,*,END=10)(ZZON(ITYP),ITYP=1,NTYP-1)
        END IF
        DO ITYP=1,NTYP
         READ(99,*,END=10) NPATS(ITYP),NPIST(ITYP),NTHET(ITYP),
     &                     NPHI(ITYP),(LMXA(IRZ,ITYP),IRZ=1,NRZONE)          
        END DO
        READ(99,*,END=10) ERRIS,RAFUDIS
        READ(99,*,END=10) CUTFAC,MXP1D
        READ(99,*,END=10) SPLRAT 
   10   CONTINUE
        AFUDIS=RAFUDIS
        MX1D=MXP1D
        RZON(NRZONE)=1000.0D0
        IF (MX1D   .LT. 1)     MX1D=1
        IF (AFUDAT .LT. 1.1D0) AFUDAT=1.1D0
        IF (AFUDIS .LT. 1.1D0) AFUDIS=1.1D0
        IF (SPLRAT .LE. 1.0D0) SPLRAT=1.0D0
C
C WRITE MESHDAT
C
        REWIND(99)
        WRITE(99,'(1X,L5)') LSYWT
        WRITE(99,'(2(1X,G12.5))') ERRAT,AFUDAT
        WRITE(99,'(1X,I3)') NRZONE
        WRITE(99,'(5(1X,G12.5))')(RZON(IRZ),IRZ=1,NRZONE-1)
        WRITE(99,'(1X,I3)') NTYP
        IF (NTYP.GT.1) THEN
         WRITE(99,'(5(1X,G12.5))')(ZZON(ITYP),ITYP=1,NTYP-1)
        END IF
        DO ITYP=1,NTYP
         WRITE(99,'(20(1X,I3))') NPATS(ITYP),NPIST(ITYP),NTHET(ITYP),
     &                           NPHI(ITYP),
     &                           (LMXA(IRZ,ITYP),IRZ=1,NRZONE) 
        END DO
        WRITE(99,'(2(1X,G12.5))') ERRIS,AFUDIS
        WRITE(99,'(1X,G12.5,1X,I3)') CUTFAC,MX1D
        WRITE(99,'(1X,G12.5)') SPLRAT
        WRITE(99,*) '------------------------------------------------'
        WRITE(99,*) '* LSYWT'
        WRITE(99,*) '* ERRMAX, ALFUDGE FOR ATOMIC CUBES'
        WRITE(99,*) '* NUMBER OF RADIAL ZONES INSIDE ATOM SPHERES'
        WRITE(99,*) '* OUTER RADII OF SPHERE ZONES'
        WRITE(99,*) '* NUMBER OF ATOM TYPES (NTYP)'
        WRITE(99,*) '* UPPER NUCLEAR CHARGE LIMIT FOR EACH ATOM TYPE'
        WRITE(99,*) '* NPATS, NPIST, NTHET, NPHI, LMAX FOR'
        WRITE(99,*) '  EACH RADIAL ZONE (NTYP LINES)'
        WRITE(99,*) '* INTERSTITIALS: ERRMAX, ALFUDGE'
        WRITE(99,*) '* CUTFAC: IF A BOX TRANSFORMS INTO ITSELF DUE TO'
        WRITE(99,*) '  SYMMETRY, IT WILL BE SPLIT IF IT IS LARGER THAN'
        WRITE(99,*) '  CUTFAC TIMES THE DISTANCE TO THE CLOSEST ATOM'
        WRITE(99,*) '  MX1D: MAX. NUMBER OF POINTS IN A'
        WRITE(99,*) '  ONE-DIMENSIONAL INTERSTITIAL PARTITION'
        WRITE(99,*) '* SPLRAT: LARGEST ALLOWED RATIO FOR: THE SIZE OF'
        WRITE(99,*) '  AN ATOMIC BOX DEVIDED BY THE DISTANCE OF ANOTHER'
        WRITE(99,*) '  ATOM TO THE BOX BOUNDARY'
        CLOSE(99)
C
C CHECK ORDERING OF RZON AND ZZON
C
        DO IRZ=2,NRZONE-1
         IF (RZON(IRZ).LT.RZON(IRZ-1)) THEN
          PRINT *,'VMESH: ORDER RZON IN MESHDAT SMALL -> BIG'
          CALL STOPIT
         END IF
        END DO
        DO ITYP=2,NTYP-1
         IF (ZZON(ITYP).LT.ZZON(ITYP-1)) THEN
          PRINT *,'VMESH: ORDER ZZON IN MESHDAT SMALL -> BIG'
          CALL STOPIT
         END IF
        END DO
C
C PRINT IDENTITY MEMBERS
C INITIALIZE RNEWIDT,NORIG,ALMIN,ALMAX
C DETERMINE MINIMUM AND MAXIMUM EXPONENTS
C
        IF (NIDENT .GT. MX_CNT) THEN
         PRINT *,'VMESH: MX_CNT MUST BE AT LEAST: ',NIDENT
         CALL STOPIT
        END IF
        ALONG=1.0D30
        PRINT '(A)','ORIGINAL IDENTITY MEMBERS:'
        DO IID=1,NIDENT
         PRINT 1010,IID,(RIDT(I,IID),I=1,3),ZNUC(IFUIDT(IID))
 1010    FORMAT('ATOM ',I3,':',3(1X,F12.6),', Z= ',F10.5)
         NZ=NINT(ZNUC(IFUIDT(IID)))
         IF (NZ .GT. MXZCHG) THEN
          PRINT *,'VMESH: MXZCHG MUST BE AT LEAST: ',NZ
          CALL STOPIT
         END IF
         IF (NZ .LT. 0) THEN
          PRINT *,'VMESH: NUCLEAR CHARGE LESS THAN ZERO'
          CALL STOPIT
         END IF
         DO I=1,3
          RNEWIDT(I,IID)=RIDT(I,IID)
         END DO
         NORIG(IID)=IID
         IFNCT=IFUIDT(IID)
         IF (N_BARE(IFNCT) .LE. 0) THEN
          PRINT *,'VMESH: FOUND REAL ATOM WITHOUT ANY BASIS FUNCTIONS'
          CALL STOPIT
         END IF
         AMIN=BFALP(1,IFNCT)
         AMAX=BFALP(1,IFNCT)
         DO I=1,N_BARE(IFNCT)
          AMIN=MIN(AMIN,ABS(BFALP(I,IFNCT)))
          AMAX=MAX(AMAX,ABS(BFALP(I,IFNCT)))
         END DO
         ALONG=MIN(ALONG,AMIN)
         AMAX=2*AMAX+MAX(2*AMAX,ALPCOR(IFNCT))
         ALMIN(IID)=AMIN
         ALMAX(IID)=AMAX
        END DO
        IF (ALONG .LT. 1.0D-3) THEN
         PRINT *,'VMESH: SMALLEST EXPONENT IS TOO SMALL: ',ALONG
         CALL STOPIT
        END IF
C
C IF PERMUTATION MATRICES DO NOT APPEAR FIRST IN GRPMAT THEN STOP
C
        OK=.TRUE.
        NGPERM=0
        DO 20 IGRP=1,NGRP
         ADD=0.0D0
         DO I=1,3
          DO J=1,3
           ADD=ADD+ABS(RMAT(J,I,IGRP))
          END DO
         END DO
         IF (ADD.LT.(3.0D0+TOLER)) THEN
          NGPERM=NGPERM+1
          IF (.NOT.OK) THEN
           PRINT *,'VMESH: X/Y/Z PERMUTATION MATRICES MUST APPEAR'
           PRINT *,'FIRST IN GRPMAT. PLEASE REORDER.'
           CALL STOPIT
          END IF
         ELSE
          OK=.FALSE.
         END IF
   20   CONTINUE
C
C CHECK IF WE HAVE TO ADD MORE IDENTITY MEMBERS 
C
        NGFULL=NGRP
        FIXIT=.FALSE.
        IF (NGPERM.LT.NGRP) FIXIT=.TRUE.
C
C CHECK TO SEE IF ANY MORE 'IDENTITIES' NEED TO BE ADDED IF
C USING A SMALLER GROUP 
C
        IF ((NGFULL+NGPERM).GT.MXCUBE) THEN
         PRINT *,'VMESH: MXCUBE MUST BE AT LEAST: ',NGFULL+NGPERM
         CALL STOPIT
        END IF
        NUNIQUE=NIDENT
        IF (FIXIT) THEN
         DO 60 ICUBE=1,NIDENT
          NGRP=NGFULL
          CALL GASITES(1,RNEWIDT(1,ICUBE),KFULL,CUBE,MSITES)
          NGRP=NGPERM
          CALL GASITES(1,RNEWIDT(1,ICUBE),KPERM,CUBE(1,KFULL+1),MSITES)
C
C ADD IDENTITY MEMBERS
C
          IF (KPERM.LT.KFULL) THEN
           DO 40 JCUBE=1,KFULL
            EMIN=1.0D30
            DO KCUBE=1,KPERM
             ERROR=ABS(CUBE(1,KCUBE+KFULL)-CUBE(1,JCUBE))+
     &             ABS(CUBE(2,KCUBE+KFULL)-CUBE(2,JCUBE))+
     &             ABS(CUBE(3,KCUBE+KFULL)-CUBE(3,JCUBE))
             IF (ERROR.LT.EMIN) EMIN=ERROR
            END DO
            IF (EMIN.GT.TOLER) THEN
             NUNIQUE=NUNIQUE+1
             IF (NUNIQUE.GT.MX_CNT) THEN
              PRINT *,'VMESH: MX_CNT MUST BE AT LEAST: ',NUNIQUE
              CALL STOPIT
             END IF
             RNEWIDT(1,NUNIQUE)=CUBE(1,JCUBE)
             RNEWIDT(2,NUNIQUE)=CUBE(2,JCUBE)
             RNEWIDT(3,NUNIQUE)=CUBE(3,JCUBE)
             NORIG(NUNIQUE)=NORIG(ICUBE)
             IF (DEBUG) THEN
              PRINT 8010,'ADDED IDENT:',(RNEWIDT(J,NUNIQUE),J=1,3)
             END IF
             CALL GASITES
     &        (1,RNEWIDT(1,NUNIQUE),KADD,CUBE(1,KFULL+KPERM+1),MSITES)
             KPERM=KPERM+KADD
             IF (KPERM.EQ.KFULL) GOTO 50
            END IF
   40      CONTINUE
           PRINT *,'VMESH: LOGICAL ERROR, BUG SUSPECTED'
           CALL STOPIT
   50      CONTINUE
          END IF
   60    CONTINUE
        END IF
C
C SETUP NPMAX, NGRP, NNUC, CUBE, NORIG, AND NPOW FOR SPACE PARTITIONING
C 
        NGRP=NGPERM
        NNUC=0
        NPMAX=0
        DO 70 ICUBE=1,NUNIQUE
         NSPC=NNUC+NGPERM+NUNIQUE-ICUBE
         IF (NSPC.GT.MXCUBE) THEN
          PRINT *,'VMESH: MXCUBE MUST BE AT LEAST: ',NSPC
          CALL STOPIT
         END IF
         Z=ABS(ZNUC(IFUIDT(NORIG(NNUC+1))))
         ITYP=NTYP
         DO JTYP=NTYP-1, 1, -1
          IF (Z.LE.ZZON(JTYP)) ITYP=JTYP
         END DO
         NPMAX=MAX(NPMAX,NPATS(ITYP))
         NPMAX=MAX(NPMAX,NPIST(ITYP))
C
C GET ALL EQUIVALENT ATOMS, UPDATE NORIG AND CUBE
C
         CALL GASITES
     &    (1,RNEWIDT(1,ICUBE),KCUBE,CUBE(1,NNUC+1),MSITES)
         DO JCUBE=NUNIQUE-ICUBE,1,-1
          NORIG(NNUC+KCUBE+JCUBE)=NORIG(NNUC+1+JCUBE)
         END DO
         DO JCUBE=NNUC+1,NNUC+KCUBE
          NPOW(JCUBE)=MAX(NPIST(ITYP),0) 
          NORIG(JCUBE)=NORIG(NNUC+1)
         END DO
         NNUC=NNUC+KCUBE
   70   CONTINUE
C
C WRITE XYZ STRUCTURE FILE WHICH IS XMOL READABLE
C
        OPEN(99,FILE='XMOL.DAT',FORM='FORMATTED',STATUS='UNKNOWN')
        REWIND(99)
        WRITE(99,'(I5)') NNUC
        WRITE(99,'(A)') 'Cluster output'
        DO INUC=1,NNUC
         WRITE(99,'(1X,I4,3(1X,F22.15))') 
     &    NINT(ZNUC(IFUIDT(NORIG(INUC)))),(AU2ANG*CUBE(I,INUC), I=1,3)
        END DO
        CLOSE(99)
C
C DETERMINE INFINITY RADIUS
C
        RINFTY= 0.1D0*ERRIS
        RINFTY= RCUTOFF(NPMAX+2,2*ALONG,RINFTY)
        PRINT '(A,F11.2)','INFINITY RADIUS IS: ',RINFTY
C 
C PRINT ATOM COORDINATES AND DEFINE BOUNDING BOX
C
        PRINT '(A)',' '
        PRINT '(A,I5)','NUMBER OF UNIQUE ATOMS: ',NUNIQUE
        PRINT '(A)',   'COORDINATES OF ATOMIC CUBES:'
        DO I=1,3
         BOXMOL(I,1)=  1.0D30
         BOXMOL(I,2)= -1.0D30
        END DO
        DO 80 ICUBE=1,NNUC
         PRINT 1020,(CUBE(I,ICUBE),I=1,3)
 1020    FORMAT(3(1X,F15.6))
         DO I=1,3
          RNUC(I,ICUBE)=CUBE(I,ICUBE)
          IF (CUBE(I,ICUBE).LT.BOXMOL(I,1)) BOXMOL(I,1)=CUBE(I,ICUBE)
          IF (CUBE(I,ICUBE).GT.BOXMOL(I,2)) BOXMOL(I,2)=CUBE(I,ICUBE)
         END DO  
         IFNU(ICUBE)=IFUIDT(NORIG(ICUBE))
         ZALP(1,ICUBE)=ABS(ALMIN(NORIG(ICUBE)))
         ZALP(2,ICUBE)=ABS(ALMAX(NORIG(ICUBE)))
   80   CONTINUE
C
C ADD RINFTY TO THE BOUNDING BOX LIMITS AND GET EXPECTED VOLUME
C
        EXPECTED=1.0D0
        DO I=1,3
         BOXMOL(I,1)=BOXMOL(I,1)-RINFTY
         BOXMOL(I,2)=BOXMOL(I,2)+RINFTY
         EXPECTED=EXPECTED*(BOXMOL(I,2)-BOXMOL(I,1))
        END DO
C
C ASSIGN EACH ATOM TO THE FIRST BOX. SET UP THE FIRST TWO PLANES IN 
C X/Y/Z DIRECTION TO BE IDENTICAL TO THE BOUNDING BOX LIMITS.
C INDEXING: PLANE(1/2 FOR LEFT/RIGHT, 1/2/3 FOR X/Y/Z, BOXINDEX)
C CATOM(IBOX) IS TRUE IF BOX IBOX CONTAINS AN ATOM
C 
        DO ICUBE=1,NNUC
         NUMBOX(ICUBE)=1
        END DO  
        DO IC=1,3
         DO J=1,2
          PLANE(J,IC,1)=BOXMOL(IC,J)
         END DO  
        END DO  
        CATOM(1)=.TRUE.
C
C START ADDBOX: CHECK EACH BOX FOR THE NUMBER OF ATOMS CONTAINED AND
C SLICE IT IF MORE THAN ONE ATOM IS IN THE BOX
C
        PRINT '(A)',' '
        PRINT '(A)','THE CAKE WILL BE SLICED RIGHT NOW !'
        MBOX=1
C
C BEGIN OF BOX LOOP
C
  110   CONTINUE
         NBOX=MBOX
         IADD=0
         DO 260 IBOX=1,MBOX
C
C GET NUMBER OF ATOMS THAT ARE IN BOX IBOX 
C
          NATOMS=0
          DO ICUBE=1,NNUC
           IF (NUMBOX(ICUBE).EQ.IBOX) NATOMS=NATOMS+1
          END DO
C
C SLICE BOX IBOX IF IT CONTAINS MORE THAN ONE ATOM
C
          IF (CATOM(IBOX).AND.(NATOMS.GT.1)) THEN
           IADD=IADD+1
C
C FIND BEST PLACE TO SLICE BOX IN EITHER X,Y AND Z DIRECTIONS.
C FOR EACH DIRECTION X/Y/Z WRITE COORDINATES OF BOX ATOMS TO XSEP.
C
           NDEG=0
           DMAX=0.0D0
           DO 150 IC=1,3
            NCUBE=0
            DO 120 ICUBE=1,NNUC
             IF (NUMBOX(ICUBE).EQ.IBOX) THEN
              NCUBE=NCUBE+1
              XSEP(NCUBE)=CUBE(IC,ICUBE)
              IFSPL(NCUBE)=IFUIDT(NORIG(ICUBE))
             END IF
  120       CONTINUE
C
C SORT XSEP SMALL -> BIG
C
            DO 130 ICUBE=1,NCUBE
             DO JCUBE=ICUBE+1,NCUBE
              IF (XSEP(JCUBE).LT.XSEP(ICUBE)) THEN
               CALL SWAP (XSEP (ICUBE),XSEP (JCUBE))
               CALL ISWAP(IFSPL(ICUBE),IFSPL(JCUBE))
              END IF
             END DO   
  130       CONTINUE
C
C SEEK FOR THE MAXIMUM DISTANCE OF ATOMS THAT ARE NEIGHBORS WITH RESPECT
C TO THEIR X/Y/Z COORDINATES (THAT'S WHY WE DID THE SORTING). -> DMAX
C NDEG IS THE DEGENERACY OF DMAX (NUMBER OF DIFFERENT POSSIBILITIES TO
C SLICE THE BOX WITH THE SAME DMAX). XSLICE IS THE COORDINATE FOR THE
C CUT, ISLICE IS 1/2/3 IF THE CUT IS A X/Y/Z PLANE, RESPECTIVELY
C
            DO 140 ISAV=1,NCUBE-1
             DIST=XSEP(ISAV+1)-XSEP(ISAV)
             IF (DIST.GT.(DMAX+TOLER)) NDEG=0
             IF ((DIST.GE.(DMAX-TOLER)) .AND. (DIST.GE.TOLER)) THEN
              DMAX=DIST
              NDEG=NDEG+1
              N1=ISAV
              DO ICUBE=ISAV-1,1,-1
               IF (XSEP(ISAV)-XSEP(ICUBE) .LT. TOLER) N1=ICUBE
              END DO
              N2=ISAV+1
              DO ICUBE=ISAV+2,NCUBE
               IF (XSEP(ICUBE)-XSEP(ISAV+1) .LT. TOLER) N2=ICUBE
              END DO
              SUM=0.0D0
              DO ICUBE=N1,ISAV
               DO JCUBE=ISAV+1,N2
                DIST=XSEP(JCUBE)-XSEP(ICUBE)
                IF (DIST .LT. TOLER) THEN
                 SUM=SUM+0.5D0*(XSEP(ICUBE)+XSEP(JCUBE))
                ELSE
                 X=SPLITHERE(IFSPL(ICUBE),IFSPL(JCUBE),DIST)
                 RATIO=X/DIST
                 RALLOW=SPLRAT/(SPLRAT+1.0D0)
                 IF (RATIO .GT.       RALLOW) X=DIST*RALLOW
                 IF (RATIO .LT. 1.0D0-RALLOW) X=DIST*(1.0D0-RALLOW)
                 SUM=SUM+XSEP(ICUBE)+X
                END IF
               END DO
              END DO
              XSLICE(NDEG)=SUM/((ISAV-N1+1)*(N2-ISAV))
              ISLICE(NDEG)=IC
             END IF
  140       CONTINUE
  150      CONTINUE
           IF (NDEG .EQ. 0) THEN
            PRINT *,'VMESH: THERE MUST BE IDENTICAL ATOMS HERE'
            CALL STOPIT
           END IF
C
C FOR EACH DIRECTION X/Y/Z, PUT OLD BOX BOUNDARIES AND POSSIBLE NEW
C BOX BOUNDARIES INTO XSEP. NXPT(IC) STORES THE NUMBER OF OLD AND 
C POSSIBLE NEW PLANES IN DIRECTION IC.
C
           DO 180 IC=1,3
            XSEP(1)=PLANE(1,IC,IBOX)
            XSEP(2)=PLANE(2,IC,IBOX)
            NXPT(IC)=2
            DO 160 IDEG=1,NDEG
             IF (ISLICE(IDEG).EQ.IC) THEN
              NXPT(IC)=NXPT(IC)+1
              XSEP(NXPT(IC))=XSLICE(IDEG)
             END IF
  160       CONTINUE
C
C SORT COORDINATES OF SLICE PLANES AND COPY THEM ALL TO BX
C
            DO 170 IX=1,NXPT(IC)
             DO JX=IX+1,NXPT(IC)
              IF (XSEP(JX).LT.XSEP(IX)) CALL SWAP(XSEP(IX),XSEP(JX))
             END DO
             BCUT(IC,IX)=XSEP(IX)
  170       CONTINUE
  180      CONTINUE
C
C ADD NEW BOXES. ALL DEGENARATE BOXES MUST BE ADDED TO PREVENT
C THE SYMMETRY FROM GETTING SCREWED UP. THE NEW PLANES ARE ADDED 
C FOR X/Y/Z WHILE THE BOX INDEX IS UPDATED
C NNBOX IS SET UP SO THAT THE OLD BOX SLOT IS FILLED WITH A NEW BOX
C
           NNEW=NBOX+NXPT(1)*NXPT(2)*NXPT(3)
           IF (NNEW.GT.MXCUBE) THEN
            PRINT *,'VMESH: MXCUBE MUST BE AT LEST: ',NNEW
            CALL STOPIT
           END IF
           VTOT=
     &      (PLANE(2,1,IBOX)-PLANE(1,1,IBOX))*
     &      (PLANE(2,2,IBOX)-PLANE(1,2,IBOX))*
     &      (PLANE(2,3,IBOX)-PLANE(1,3,IBOX))
           NBOX=NBOX-1
           DO 230 IB=1,NXPT(1)-1
            DO 220 JB=1,NXPT(2)-1
             DO 210 KB=1,NXPT(3)-1
              NBOX=NBOX+1
              NNBOX=NBOX
              IF (IB*JB*KB.EQ.1) NNBOX=IBOX
              PLANE(1,1,NNBOX)=BCUT(1,IB  )
              PLANE(2,1,NNBOX)=BCUT(1,IB+1)
              PLANE(1,2,NNBOX)=BCUT(2,JB  )
              PLANE(2,2,NNBOX)=BCUT(2,JB+1)
              PLANE(1,3,NNBOX)=BCUT(3,KB  )
              PLANE(2,3,NNBOX)=BCUT(3,KB+1)
              VTOT=VTOT-
     &         (PLANE(2,1,NNBOX)-PLANE(1,1,NNBOX))*
     &         (PLANE(2,2,NNBOX)-PLANE(1,2,NNBOX))*
     &         (PLANE(2,3,NNBOX)-PLANE(1,3,NNBOX))
  210        CONTINUE
  220       CONTINUE
  230      CONTINUE
C
C REASSIGN ATOMS TO THE APPROPRIATE BOX AND UPDATE CATOM
C
           DO JBOX=1,NBOX
            CATOM(JBOX)=.FALSE.
           END DO  
           DO 250 JBOX=1,NBOX
            DO 240 ICUBE=1,NNUC
             INBOX=.TRUE.
             DO IC=1,3
              IF (CUBE(IC,ICUBE).LT.PLANE(1,IC,JBOX)) INBOX=.FALSE.
              IF (CUBE(IC,ICUBE).GT.PLANE(2,IC,JBOX)) INBOX=.FALSE.
             END DO  
             IF (INBOX) THEN
              NUMBOX(ICUBE)=JBOX
              CATOM(JBOX)=.TRUE.
             END IF
  240       CONTINUE
  250      CONTINUE
          END IF
  260    CONTINUE
C
C CALCULATE THE TOTAL VOLUME OF OUR NEW BOX COLLECTION. UPDATE 
C MBOX AND GO BACK TO LABEL 10 IF THERE IS STILL SOMETHING TO DO
C
         VOLUM=0.0D0
         DO IBOX=1,NBOX
          VOLUM=VOLUM+
     &     (PLANE(2,1,IBOX)-PLANE(1,1,IBOX))*
     &     (PLANE(2,2,IBOX)-PLANE(1,2,IBOX))*
     &     (PLANE(2,3,IBOX)-PLANE(1,3,IBOX))
         END DO
         MBOX=NBOX
         IF (DEBUG) THEN
          PRINT 8030,'NBOX, VOLUME, EXPECTED:',NBOX,VOLUM,EXPECTED
         END IF
         IF (IADD.NE.0) GOTO 110
        CONTINUE
C
C END OF BOX LOOP
C
C SETUP OF SIDE FOR ALL BOXES CONTAINING ATOMS. SIDE IS THE DISTANCE 
C BETWEEN AN ATOM AND THE CORRESPONDING BOUNDARY BOX. 
C
        DO 270 ICUBE=1,NNUC
         DO IBOX=1,NBOX
          IF (NUMBOX(ICUBE).EQ.IBOX) THEN
           DO IC=1,3
            DO J=1,2
             SIDE(J,IC,ICUBE)=PLANE(J,IC,IBOX)-CUBE(IC,ICUBE)
            END DO  
           END DO  
          END IF
         END DO  
  270   CONTINUE
C
C FILL ARRAYS CUBE AND SIDE WITH BOXES THAT DO NOT CONTAIN ATOMS
C
        NCUBE=NNUC
        DO 280 IBOX=1,NBOX
         IF (.NOT.CATOM(IBOX)) THEN
          NCUBE=NCUBE+1
          DO IC=1,3
           CUBE(IC,NCUBE)=0.5D0*(PLANE(2,IC,IBOX)+PLANE(1,IC,IBOX)) 
          END DO  
          DO IC=1,3
           DO J=1,2
            SIDE(J,IC,NCUBE)=PLANE(J,IC,IBOX)-CUBE(IC,NCUBE)
           END DO  
          END DO  
         END IF
  280   CONTINUE
        IF (DEBUG) THEN
         PRINT *,' '
         PRINT *,'CURRENT BOX PARAMETERS(1):'
         DO ICUBE=1,NCUBE
          PRINT 8050,'BOX',ICUBE
          PRINT 8010,'CENTER',(CUBE(I,ICUBE), I=1,3)
          PRINT 8010,'LEFT  ',(SIDE(1,I,ICUBE), I=1,3)
          PRINT 8010,'RIGHT ',(SIDE(2,I,ICUBE), I=1,3)
         END DO
        END IF
C
C REPLACE EACH PARALLELPIPED BY A CUBE SURROUNDING EACH ATOM PLUS OTHER
C PARALLELPIPEDS SURROUNDING VOIDS. 
C
        DO 340 ICUBE=1,NNUC
C
C CALCULATE VOLUME OF BOX. GET THE SMALLEST DISTANCE FROM THE CENTER
C TO THE BOX BOUNDARY. 
C  
         RMIN=1.0D30
         VTOT=1.0D0
         DO 290 IC=1,3
          VTOT=VTOT+(SIDE(2,IC,ICUBE)-SIDE(1,IC,ICUBE))
          DO J=1,2
           ATMP=ABS(SIDE(J,IC,ICUBE))
           IF (ATMP.LT.RMIN) RMIN=ATMP
          END DO  
  290    CONTINUE
C
C SUBTRACT VOLUME OF ATOMIC CUBE FROM THE TOTAL BOX VOLUME.
C PUT NEW BOX BOUNDARIES INTO BX. UPDATE BOUNDARIES FOR ATOMIC CUBE.
C
         VTOT=VTOT-(2*RMIN)**3
         DO 300 IC=1,3
          BCUT(IC,1)=  SIDE(1,IC,ICUBE)
          BCUT(IC,2)= -RMIN
          BCUT(IC,3)=  RMIN
          BCUT(IC,4)=  SIDE(2,IC,ICUBE)
          SIDE(1,IC,ICUBE)= -RMIN
          SIDE(2,IC,ICUBE)=  RMIN
  300    CONTINUE
C
C WITH THE HELP OF BX, WE HAVE TO UPDATE THE ARRAYS SIDE AND CUBE AS IF 
C WE WERE SLICING THE OLD BOX INTO 3 PIECES FOR EACH DIRECTION. WHILE
C DOING THIS, UPDATE NCUBE EXCEPT FOR THE CASE OF THE ATOMIC CUBE.
C IGNORE BOXES WITH ZERO VOLUME
C
         DO 330 IB=1,3
          DO 320 JB=1,3
           DO 310 KB=1,3
            IF (IB*JB*KB.NE.8) THEN
             NCUBE=NCUBE+1
             SIDE(1,1,NCUBE)=BCUT(1,IB  )
             SIDE(2,1,NCUBE)=BCUT(1,IB+1)
             SIDE(1,2,NCUBE)=BCUT(2,JB  )
             SIDE(2,2,NCUBE)=BCUT(2,JB+1)
             SIDE(1,3,NCUBE)=BCUT(3,KB  )
             SIDE(2,3,NCUBE)=BCUT(3,KB+1)
             VOLUM=1.0D0
             DO IC=1,3
              AVG=0.5D0*(SIDE(2,IC,NCUBE)+SIDE(1,IC,NCUBE))
              DIF=0.5D0*(SIDE(2,IC,NCUBE)-SIDE(1,IC,NCUBE))
              VOLUM=VOLUM*DIF*2
              CUBE(IC,NCUBE)=CUBE(IC,ICUBE)+AVG
              SIDE(2,IC,NCUBE)=  DIF
              SIDE(1,IC,NCUBE)= -DIF
             END DO
             VTOT=VTOT-VOLUM
             IF (VOLUM. EQ. 0.0D0) NCUBE=NCUBE-1
            END IF
  310      CONTINUE
  320     CONTINUE
  330    CONTINUE
  340   CONTINUE
C
C CHECK TOTAL VOLUME / PRINT BOX PARAMETERS
C
        VOLUM=0.0D0
        DO ICUBE=1,NCUBE
         VOLUM=VOLUM
     &        +8*SIDE(2,1,ICUBE)*SIDE(2,2,ICUBE)*SIDE(2,3,ICUBE)
        END DO
        IF (DEBUG) THEN
         PRINT *,' '
         PRINT *,'CURRENT BOX PARAMETERS(2):'
         DO ICUBE=1,NCUBE
          PRINT 8050,'BOX',ICUBE
          PRINT 8010,'CENTER',(CUBE(I,ICUBE), I=1,3)
          PRINT 8010,'LEFT  ',(SIDE(1,I,ICUBE), I=1,3)
          PRINT 8010,'RIGHT ',(SIDE(2,I,ICUBE), I=1,3)
         END DO
         PRINT 8040,'TOTAL VOLUME:',VOLUM,'EXPECTED:',EXPECTED
        END IF
C
C CHECK TO SEE IF THERE ARE ADJACENT ATOMS IN CLOSE PROXIMITY TO 
C LARGE ATOMIC CUBES
C IF THIS IS THE CASE, MAKE THE LARGE CUBES SMALLER
C (MR Pederson 1997 / DV Porezag 1998)
C
        PRINT '(2A)','CHECKING IF ADJACENT ATOMS ARE TOO CLOSE TO ',
     &               'ATOMIC CUBES'
        SPLRAT2= SPLRAT**2
        DO 350 IC=1,NNUC
         BOXD2= SIDE(2,1,IC)**2
         ICHANGE= 0
         DO JC=1,NNUC
          IF (IC .NE. JC) THEN    
           RCOMP2= 0.0D0
           DO I=1,3
            IF (CUBE(I,JC) .LT. CUBE(I,IC)-SIDE(2,1,IC)) THEN
             RCOMP2= RCOMP2+(CUBE(I,JC)-(CUBE(I,IC)-SIDE(2,1,IC)))**2
            END IF
            IF (CUBE(I,JC) .GT. CUBE(I,IC)+SIDE(2,1,IC)) THEN
             RCOMP2= RCOMP2+(CUBE(I,JC)-(CUBE(I,IC)+SIDE(2,1,IC)))**2
            END IF
           END DO
           RCOMP2= RCOMP2*SPLRAT2
           IF (RCOMP2 .LT. BOXD2) THEN
            BOXD2= RCOMP2
            ICHANGE= 1
           END IF
          END IF
         END DO
C
C IF NECESSARY, REPLACE CUBE BY SMALLER CUBE AND INTERSTITIAL BOXES
C
         IF (ICHANGE .NE. 0) THEN
          JC=0
          DO KC=1,NUNIQUE
           BOXDM=ABS(CUBE(1,IC)-RNEWIDT(1,KC))
     &          +ABS(CUBE(2,IC)-RNEWIDT(2,KC))
     &          +ABS(CUBE(3,IC)-RNEWIDT(3,KC))
           IF (BOXDM .LE. TOLER) JC=KC
          END DO
          BOXDM=SQRT(BOXD2)
          IF (JC.NE.0) THEN
           PRINT '(A,I5,2(A,F12.6))','UNIQUE ATOM ',JC,
     &           ': OLD BOX: ',2*SIDE(2,1,IC),', NEW BOX: ',2*BOXDM
          END IF
          IF (NCUBE+26 .GT. MXCUBE) THEN
           PRINT *,'MXCUBE MUST BE AT LEAST: ',NCUBE+26
           CALL STOPIT
          ENDIF
          XSEP(1)=  SIDE(1,1,IC)
          XSEP(2)= -BOXDM
          XSEP(3)=  BOXDM
          XSEP(4)=  SIDE(2,1,IC)
          DO IX= -1,1
           DO IY= -1,1
            DO IZ= -1,1 
             IF ((IX .EQ. 0) .AND. (IY .EQ. 0) .AND. (IZ .EQ. 0)) THEN
              JC=IC
             ELSE
              NCUBE=NCUBE+1
              JC=NCUBE
              NORIG(JC)=0
             END IF
             SIDE(1,1,JC)= -(XSEP(IX+3)-XSEP(IX+2))*0.5D0
             SIDE(2,1,JC)=  (XSEP(IX+3)-XSEP(IX+2))*0.5D0
             SIDE(1,2,JC)= -(XSEP(IY+3)-XSEP(IY+2))*0.5D0
             SIDE(2,2,JC)=  (XSEP(IY+3)-XSEP(IY+2))*0.5D0
             SIDE(1,3,JC)= -(XSEP(IZ+3)-XSEP(IZ+2))*0.5D0
             SIDE(2,3,JC)=  (XSEP(IZ+3)-XSEP(IZ+2))*0.5D0
             IF (JC .NE. IC) THEN
              CUBE(1,JC)=CUBE(1,IC)+(XSEP(IX+2)+XSEP(IX+3))*0.5D0
              CUBE(2,JC)=CUBE(2,IC)+(XSEP(IY+2)+XSEP(IY+3))*0.5D0
              CUBE(3,JC)=CUBE(3,IC)+(XSEP(IZ+2)+XSEP(IZ+3))*0.5D0
             END IF
            END DO
           END DO
          END DO
         END IF
  350   CONTINUE
C
C CHECK VOLUME AGAIN
C
        VOL=0.0D0
        DO IC=1,NCUBE
         VOL=VOL+8*SIDE(2,1,IC)*SIDE(2,2,IC)*SIDE(2,3,IC)
         IF (DEBUG) THEN
          PRINT 5010,NORIG(IC),(CUBE(J,IC),J=1,3),
     &               ((SIDE(K,J,IC),K=1,2),J=1,3) 
 5010     FORMAT(' ',I5,3F10.3,4X,3(2F10.3,2X))
         END IF
        END DO
        IF (ABS(VOL-VOLUM) .GT. VOLTL*VOLUM) THEN
         PRINT *,'VMESH: ERROR IN SUBDIVISION'
         CALL STOPIT
        END IF
C
C LETS GET RID OF THOSE REALLY TINY CUBES FIRST 
C
        VOLUM=0.0D0
        KCUBE=0
        DO 370 ICUBE=1,NCUBE
         VCUB=8*SIDE(2,1,ICUBE)*SIDE(2,2,ICUBE)*SIDE(2,3,ICUBE)
         IF (VCUB.GT.VOLTL) THEN
          KCUBE=KCUBE+1
          DO I=1,3
           CUBE(I,KCUBE)=CUBE(I,ICUBE)
           SIDE(1,I,KCUBE)=SIDE(1,I,ICUBE)
           SIDE(2,I,KCUBE)=SIDE(2,I,ICUBE)
          END DO
          RSQVOL(1,KCUBE)=
     &     CUBE(1,KCUBE)**2+CUBE(2,KCUBE)**2+CUBE(3,KCUBE)**2
          RSQVOL(2,KCUBE)=VCUB
          VOLUM=VOLUM+VCUB
         END IF
  370   CONTINUE
        NCUBE=KCUBE
C
C PRINT PARAMETERS OF CURRENT BOX SET
C
        IF (DEBUG) THEN
         PRINT *,' '
         PRINT *,'CURRENT BOX PARAMETERS(3):'
         DO ICUBE=1,NCUBE
          PRINT 8050,'BOX',ICUBE
          PRINT 8010,'CENTER',(CUBE(I,ICUBE), I=1,3)
          PRINT 8010,'LEFT  ',(SIDE(1,I,ICUBE), I=1,3)
          PRINT 8010,'RIGHT ',(SIDE(2,I,ICUBE), I=1,3)
         END DO  
         PRINT 8040,'TOTAL VOLUME:',VOLUM,'EXPECTED:',EXPECTED
        END IF
C
C NOW PURGE OUT THE REDUNDANCIES AND KEEP TRACK OF MULTIPLICITIES FOR 
C EACH IDENTITY CUBE. ASSIGN MULTIPLICITIES TO NUMBOX.
C
        PRINT '(A)','REMOVING SYMMETRY-EQUIVALENT BOXES'
        DO ICUBE=1,NCUBE
         NUMBOX(ICUBE)=0
        END DO
        DO 400 ICUBE=1,NCUBE
         IF (RSQVOL(2,ICUBE) .GE. 0.0D0) THEN
          CALL GASITES
     &     (1,CUBE(1,ICUBE),NUMBOX(ICUBE),RIDENT,MSITES)
          IFOUND=1
          DO 390 JCUBE=ICUBE+1,NCUBE
           IF ((ABS(RSQVOL(1,ICUBE)-RSQVOL(1,JCUBE)).LE.TOLER) .AND.
     &         (ABS(RSQVOL(2,ICUBE)-RSQVOL(2,JCUBE)).LE.TOLER)) THEN
C
C CHECK IF THIS CUBE IS EQUAL TO ONE OF THOSE GENERATED
C
            DO 380 KCUBE=1,NUMBOX(ICUBE)
             ERROR=ABS(CUBE(1,JCUBE)-RIDENT(1,KCUBE))+
     &             ABS(CUBE(2,JCUBE)-RIDENT(2,KCUBE))+
     &             ABS(CUBE(3,JCUBE)-RIDENT(3,KCUBE))
             IF (ERROR.LE.TOLER) THEN
              IFOUND=IFOUND+1
              RSQVOL(2,JCUBE)= -1.0D30
             END IF
  380       CONTINUE
           END IF
  390     CONTINUE
          IF (DEBUG) PRINT *,'ANTICIPATED NUMBER OF CUBES:'
     &                      ,NUMBOX(ICUBE),' FOUND: ',IFOUND
C
C IF WE DID NOT FIND ALL CUBES, PRINT OUT THE MESS AND STOP
C
          IF (IFOUND.NE.NUMBOX(ICUBE)) THEN
           PRINT *,'ERROR IN VMESH'
           PRINT *,'IFOUND= ',IFOUND,' EXPECTED ',NUMBOX(ICUBE)
           PRINT *,'ICUBE=  ',ICUBE,' NCUBE= ',NCUBE
           PRINT *,'VMESH: IFOUND AND NUMBOX ARE NOT EQUAL'
           CALL STOPIT
          END IF
         END IF
  400   CONTINUE
C
C ERASE ALL BOXES THAT ARE EQIVALENT DUE TO SYMMETRY
C
        KCUBE=0
        NATOMS=0
        VOLUM=0.0D0
        DO 410 ICUBE=1,NCUBE
         IF (RSQVOL(2,ICUBE) .GT. 0.0D0) THEN
          KCUBE=KCUBE+1
          NUMBOX(KCUBE)=NUMBOX(ICUBE)
          IF (ICUBE.LE.NNUC) THEN
           NATOMS=NATOMS+1
           NORIG(KCUBE)=NORIG(ICUBE)
          END IF
          DO J=1,3
           CUBE(J,KCUBE)=CUBE(J,ICUBE)
           SIDE(1,J,KCUBE)=SIDE(1,J,ICUBE)
           SIDE(2,J,KCUBE)=SIDE(2,J,ICUBE)
          END DO
          VCUB=8*SIDE(2,1,KCUBE)*SIDE(2,2,KCUBE)*SIDE(2,3,KCUBE)
          VOLUM=VOLUM+VCUB*NUMBOX(KCUBE)
         END IF
  410   CONTINUE
        NCUBE=KCUBE
        IF (NATOMS .NE. NUNIQUE) THEN
         PRINT *,'VMESH: NATOMS <--> NUNIQUE INCONSISTENCY'
         CALL STOPIT
        END IF
C
C PRINT SURVIVING BOXES
C
        IF (DEBUG) THEN
         PRINT *,' '
         PRINT *,'INEQUIVALENT BOXES:'
         DO ICUBE=1,NCUBE
          PRINT 8050,'BOX',ICUBE,'MULTIPLICITY:',NUMBOX(ICUBE)
          PRINT 8010,'CENTER',(CUBE(I,ICUBE), I=1,3)
          PRINT 8010,'LEFT  ',(SIDE(1,I,ICUBE), I=1,3)
          PRINT 8010,'RIGHT ',(SIDE(2,I,ICUBE), I=1,3)
         END DO  
         PRINT 8040,'TOTAL VOLUME:',VOLUM,'EXPECTED:',EXPECTED
        END IF
C
C TRY TO SLICE INTERSTITIAL BOXES WHICH TRANSFORM INTO THEMSELVES.
C WE NEED TO MAKE SURE THAT ARRAY CUBE IS LARGE ENOUGH.
C
        PRINT '(A)','CHECKING FOR REDUCIBLE BOXES'
        NTOTAL=NCUBE
  420   CONTINUE
         OK=.TRUE.
         NCUBE=NTOTAL
         DO 480 ICUBE=NUNIQUE+1,NCUBE
          NCREAT=0
          IF ((NTOTAL+8).GT.MXCUBE) THEN
           PRINT *,'VMESH: MXCUBE MUST BE AT LEAST: ',NTOTAL+8
           CALL STOPIT
          END IF
C
C FIND GROUP OPERATIONS THAT LEAVE CENTER OF CUBE UNCHANGED
C
          NTRAF=0
          DO 430 IGRP=1,NGPERM
           DIF=0.0D0
           DO J=1,3
            RTMP=0.0D0
            DO K=1,3
             RTMP=RTMP+RMAT(K,J,IGRP)*CUBE(K,ICUBE)
            END DO
            DIF=DIF+ABS(RTMP-CUBE(J,ICUBE))
           END DO
           IF (DIF.LT.TOLER) THEN
            NTRAF=NTRAF+1
            NSYMOP(NTRAF)=IGRP
           END IF
  430     CONTINUE
C
C IF WE FIND MORE THAN ONE SYMMETRY OPERATION, TRY DIFFERENT
C POSSIBILITIES OF SLICING. STORE BOX SIZE IN WRAD.
C INITIALIZE NXPT
C
          IF (NTRAF.GE.2) THEN
           GAIN=1.0D0
           DO 470 ITRY=1,7
            IM1=MOD((ITRY-1),3)+1
            II1=MIN(((ITRY+2)/3),2)
            II2=MOD(II1,2)+1
            IF (ITRY.EQ.7) II2=II1
            DO I=1,3
             NXPT(I)=II1
            END DO
            NXPT(IM1)=II2
C
C SLICE INTO AT MOST EIGHT BOXES
C
            DO IC=1,3
             IF (NXPT(IC).EQ.1) THEN
              RRAD(IC)= SIDE(2,IC,ICUBE)
              BOX(1,IC)=CUBE(IC,ICUBE)
             ELSE
              RRAD(IC)= 0.5D0*SIDE(2,IC,ICUBE)
              BOX(1,IC)=CUBE(IC,ICUBE)-0.5D0*SIDE(2,IC,ICUBE)
              BOX(2,IC)=CUBE(IC,ICUBE)+0.5D0*SIDE(2,IC,ICUBE)
             END IF
            END DO
            NADD=0
            DO IX=1,NXPT(1)
             DO IY=1,NXPT(2)
              DO IZ=1,NXPT(3)
               NADD=NADD+1
               BCUT(1,NADD)=BOX(IX,1)
               BCUT(2,NADD)=BOX(IY,2)
               BCUT(3,NADD)=BOX(IZ,3)
              END DO
             END DO 
            END DO  
C
C CHECK WHICH OF THESE BOXES ARE EQUIVALENT TO EACH OTHER
C USE NFBUF AS INDICATOR WHETHER THIS BOX HAS ALREADY BEEN FOUND
C
            DO IBX=1,NADD
             NFBUF(IBX)=1
            END DO
            NFOUND=0
            DO 460 IBX=1,NADD
             IF (NFBUF(IBX).NE.0) THEN
              NFOUND=NFOUND+1
              DO 450 JBX=IBX+1,NADD
               IF (NFBUF(JBX).NE.0) THEN
                DO 440 ITRAF=1,NTRAF
                 IGRP=NSYMOP(ITRAF)
                 DIF=0.0D0
                 DO J=1,3
                  RTMP=0.0D0
                  DO K=1,3
                   RTMP=RTMP+RMAT(K,J,IGRP)*BCUT(K,IBX)
                  END DO
                  DIF=DIF+ABS(RTMP-BCUT(J,JBX))
                 END DO
                 IF (DIF.LT.TOLER) NFBUF(JBX)=0
  440           CONTINUE
                IF (NFBUF(JBX).EQ.0) NFBUF(IBX)=NFBUF(IBX)+1
               END IF
  450         CONTINUE
             END IF
  460       CONTINUE
C
C CHECK IF THE RESULT IS USEFUL. IF YES, PUT THE CANDIDATE
C CUBES AT THE END OF ARRAY CUBE
C
            RATIO=NFOUND
            RATIO=NADD/RATIO
            IF ((GAIN+TOLER).LT.RATIO) THEN
             GAIN=RATIO
             NCREAT=0
             DO IBX=1,NADD
              IF (NFBUF(IBX).NE.0) THEN
               NCREAT=NCREAT+1
               NUMBOX(NTOTAL+NCREAT)=NFBUF(IBX)*NUMBOX(ICUBE)
               DO I=1,3
                CUBE(I,NTOTAL+NCREAT)=BCUT(I,IBX)
                SIDE(1,I,NTOTAL+NCREAT)= -RRAD(I)
                SIDE(2,I,NTOTAL+NCREAT)=  RRAD(I)
               END DO
              END IF
             END DO
            END IF
  470      CONTINUE
          END IF
C
C CHECK IF WE REALLY WANT TO SPLIT THAT PARTICULAR BOX
C FIND DISTANCE TO CLOSEST ATOM
C
          IF (NCREAT.NE.0) THEN
           DCLOS=1.0D30
           DO INUC=1,NNUC
            DIST=0.0D0
            DO I=1,3
             XXX=RNUC(I,INUC)
             XLEFT= CUBE(I,ICUBE)-SIDE(2,I,ICUBE)
             XRIGHT=CUBE(I,ICUBE)+SIDE(2,I,ICUBE)
             IF (RNUC(I,INUC).LT.XLEFT)  XXX=XLEFT
             IF (RNUC(I,INUC).GT.XRIGHT) XXX=XRIGHT
             DIST=DIST+(RNUC(I,INUC)-XXX)**2
            END DO
            DCLOS=MIN(DCLOS,DIST)
           END DO
           DALLOW=CUTFAC*DIST
C
C CHECK IF THE BOX IS LARGER THAN DALLOW IN ONE OR MORE 
C DIMENSIONS. IF YES, CHECK IF THE PROPOSED CUT WILL ACTUALLY
C CHANGE THE CORRESPONDING COMPONENT OF THE BOX SIZE.
C
           FIXIT=.FALSE.           
           DO IC=1,3
            XXX=SIDE(2,IC,ICUBE)
            IF (XXX.GT.DALLOW) THEN
             IF (ABS(XXX-SIDE(2,IC,NTOTAL+1)).GT.TOLER) FIXIT=.TRUE.
            END IF
           END DO
           IF (NCREAT.EQ.1) FIXIT=.TRUE.
C
C MOVE NEW BOXES TO THE RIGHT LOCATION
C
           IF (FIXIT) THEN
            OK=.FALSE.
            IF (DEBUG) PRINT *,'CUTTING BOX ',ICUBE,', GAIN= ',GAIN
            NUMBOX(ICUBE)=NUMBOX(NTOTAL+NCREAT)
            DO I=1,3
             CUBE(I,ICUBE)=CUBE(I,NTOTAL+NCREAT)
             SIDE(1,I,ICUBE)=SIDE(1,I,NTOTAL+NCREAT)
             SIDE(2,I,ICUBE)=SIDE(2,I,NTOTAL+NCREAT)
            END DO
            NTOTAL=NTOTAL+NCREAT-1
           END IF
          END IF
  480    CONTINUE
         IF (.NOT.OK) GOTO 420
        CONTINUE
        NCUBE=NTOTAL
C
C ZERO NORIG FOR INTERSTITIALS (ONLY FOR PRINTING PURPOSES)
C
        DO ICUBE=NUNIQUE+1,NCUBE
         NORIG(ICUBE)=0
        END DO
C           
C PRINT FINAL BOX SET, DETERMINE CLOSEST ATOM FOR EACH INTERSTITIAL BOX
C
        PRINT '(A)',' '
        PRINT '(A)','FINAL BOX SET:'
        VOLUM=0.0D0
        VLDAM=0.0D0
        DCLOS=1.0D30
        DO ICUBE=1,NCUBE
         PRINT 1030,ICUBE,NUMBOX(ICUBE),NORIG(ICUBE)
         PRINT 1040,'CENTER',(CUBE(I,ICUBE),     I=1,3)
         PRINT 1040,'SIZE  ',(2*SIDE(2,I,ICUBE), I=1,3)
 1030    FORMAT('BOX ',I5,', MULTIPLICITY: ',I3,
     &          ', IDENTITY MEMBER: ',I3)
 1040    FORMAT(A,3(1X,F12.6))
         VBOX=8*SIDE(2,1,ICUBE)*SIDE(2,2,ICUBE)*SIDE(2,3,ICUBE)
         VOLUM=VOLUM+NUMBOX(ICUBE)*VBOX
         IF (NORIG(ICUBE) .EQ. 0) THEN
          VLDA=0.0D0
          DO INUC=1,NNUC
           DIST= 0.0D0
           DO IC=1,3
            X1= CUBE(IC,ICUBE)-SIDE(2,IC,ICUBE)
            X2= CUBE(IC,ICUBE)+SIDE(2,IC,ICUBE)
            IF (RNUC(IC,INUC) .LT. X1) THEN
             DIST= DIST+(RNUC(IC,INUC)-X1)**2
            END IF
            IF (RNUC(IC,INUC) .GT. X2) THEN
             DIST= DIST+(RNUC(IC,INUC)-X2)**2
            END IF
           END DO
           SDIST= SQRT(DIST)
           CALL RPFIT(IFNU(INUC),SDIST,1.0D0/SDIST,RHOF,POTF)
           VLDA= MIN(VLDA,POTF)
          END DO
          PRINT 1040,'V(LDA)',VLDA
          VLDAM=MIN(VLDAM,VLDA)
         END IF
        END DO  
        PRINT 1050,VLDAM
 1050   FORMAT('LOWEST LDA POTENTIAL FOR INTERSTITIAL REGIONS: ',F12.5)
        PRINT 1060,VOLUM,EXPECTED
 1060   FORMAT('TOTAL VOLUME: ',D20.12,', CORRECT: ',D20.12)
C
C START FILLING CUBES UP WITH MESH POINTS. FIRST THE ATOMIC CUBES.
C WE NEED:  * ONE SPHERE MESH FROM 0 TO RSPH PER IDENTITY MEMBER
C           * ONE SPHERE MESH FROM RSPH TO RBOX PER UNIQUE ATOM
C           * EXCLUDED REGION MESH PER UNIQUE ATOM (BOX SIZE RBOX)
C
C SET NGRP BACK TO NGFULL.
C LOOP OVER ALL IDENTITY MEMBERS. GET MINIMUM SPHERE RADIUS RSPH.
C
        PRINT '(A)',' '
        PRINT '(A)','ASSIGNING POINTS TO CUBES THAT CONTAIN ATOMS'
        NGRP=NGFULL
        NMSH=0
        DO 550 IIDENT=1,NIDENT
         NDEG=0
         RSPH=1.0D30
         VINNER=0.0D0
         DO IATOM=1,NUNIQUE
          IF (NORIG(IATOM).EQ.IIDENT) THEN
           NDEG=NDEG+NUMBOX(IATOM)
           RSPH=MIN(RSPH,SIDE(2,1,IATOM))
          END IF
         END DO
         IF (NDEG.EQ.0) GOTO 550
         IF (DEBUG) THEN
          PRINT *,' '
          PRINT *,'IDENTITY MEMBER ',IIDENT,
     &           ' MULTIPLICITY: ',NDEG
         END IF
         ERRSPH=ERRAT
         ZAT= ABS(ZNUC(IFUIDT(IIDENT)))
         NZ= NINT(ZAT)
         CALL RPFIT(IFUIDT(IIDENT),RSPH,1.0D0/RSPH,RHOF,PSPH) 
         PSPH= ABS(PSPH)
         IF (NZ .GE. 1) ERRSPH=ERRSPH/NZ
         IF (LSYWT) ERRSPH=ERRAT/NDEG 
         IFOUND=0
C
C LOOP OVER ALL UNIQUE ATOMS
C
         DO 540 IATOM=1,NUNIQUE
          IF (NORIG(IATOM).EQ.IIDENT) THEN
           IF (DEBUG) THEN
            PRINT *,' '
            PRINT *,'UNIQUE ATOM     ',IATOM, 
     &             ' MULTIPLICITY: ',NUMBOX(IATOM)
           END IF
           IFOUND=IFOUND+1
C
C GET ATOM TYPE
C
           ITYP=NTYP
           DO JTYP=NTYP-1, 1, -1
            IF (ZAT.LE.ZZON(JTYP)) ITYP=JTYP
           END DO
C
C SETUP INPUT FOR FLACUB AND CALL FLACUB
C RADIAL POINTS HAVE TO BE IN RBUF(1,I)
C
           RBOX=SIDE(2,1,IATOM)
           ERRBOX=ERRAT
           IF (PSPH .GT. 1.0D0) ERRBOX=ERRBOX/PSPH
           IF (LSYWT) ERRBOX=ERRBOX/NUMBOX(IATOM)
           AMAX=ALMAX(IIDENT)
           NPOLY=NPATS(ITYP) 
           IF (DEBUG) THEN
            PRINT 8040,'Z:',ZAT,'RADIUS:',RBOX
            PRINT *,'CALLING FLACUB'
           END IF
           CALL FLACUB(MXCPTS,NR1,NR2,NCTOT,RBUF,WBUF,NPHI(ITYP),
     &                 NTHET(ITYP),RSPH,RBOX,ERRSPH,ERRBOX,2*ALONG,
     &                 AMAX,AFUDAT,NPOLY)
           NRAD=NR1+NR2
           IF (DEBUG) THEN
            PRINT *,'AFTER FLACUB: NMSH= ',NCTOT,
     &              ' NR1= ',NR1,' NR2= ',NR2
           END IF
           IF (NRAD.GT.MXRAD) THEN
            PRINT *,'VMESH: MXRAD MUST BE AT LEAST: ',NRAD
            CALL STOPIT
           END IF
C
C TEST VOLUME AND RENORMALIZE RADIAL WEIGHTS
C
           VOLUM=0.0D0
           ATMP=1.0D0/(4*PI)
           DO IPTS=1,NRAD
            VOLUM=VOLUM+WBUF(IPTS)
            WBUF(IPTS)=WBUF(IPTS)*ATMP
           END DO
           DO IPTS=NRAD+1,NCTOT
            VOLUM=VOLUM+48*WBUF(IPTS)
           END DO
           EXACT=8*RBOX**3
           IF (DEBUG) PRINT 8040,'CUBE VOLUME:',VOLUM,'EXACT:',EXACT
C
C ADD RADIAL POINTS. IF (IFOUND.EQ.1), WE HAVE TO ADD THE MESH FOR 
C THE INNER SPHERE FROM 0 TO RSPH. NOTE THAT IN THIS CASE NGRP=NFULL
C IS NECESSARY WHILE FOR THE OTHER RADIAL MESH NGRP=NGPERM IS CORRECT.
C 
           IF (DEBUG) THEN
            PRINT *,' '
            PRINT *,'ADDING RADIAL + ANGULAR POINTS'
           END IF
           MSTART=2
           IF (IFOUND.EQ.1) MSTART=1
           DO 510 IMESH=MSTART,2
            IF (IMESH.EQ.1) THEN
             NGRP=NGFULL
             NSITES=NDEG 
             ISTART=1
             IEND=NR1
            ELSE
             NGRP=NGPERM
             NSITES=NUMBOX(IATOM) 
             ISTART=NR1+1
             IEND=NR1+NR2
            END IF
            NSAVP=NMSH
C
C FOR EACH ZONE, FIND ASSOCIATED RADIAL POINTS
C
            DO 500 IRZ=1,NRZONE
             IR=0
             DO JR=ISTART,IEND
              IF (RBUF(1,JR).LT.RZON(IRZ)) THEN
               IR=IR+1
               RRAD(JR-ISTART+1)=RBUF(1,JR)
               WRAD(JR-ISTART+1)=WBUF(JR)
              ELSE
               GOTO 490
              END IF
             END DO
  490        CONTINUE
             ISTART=ISTART+IR
             IF (IR.EQ.0) GOTO 500
C
C GET ANGULAR MESH AND CALL ADDPTS
C
             CALL ANGMSH(MXANG,LMXA(IRZ,ITYP),IANP,ANGLE,DOMEGA)
             IF (DEBUG) THEN
              PRINT *,'IATOM: ',IATOM,' RAD/ANG MESH ',IMESH,IRZ
              PRINT 8010,'CENTER:',(CUBE(K,IATOM),K=1,3)
             END IF
             CALL ADDPTS(NSITES,CUBE(1,IATOM),RRAD,WRAD,ANGLE,DOMEGA,
     &                   IR,IANP)
  500       CONTINUE
C
C GET NUMERICAL VALUE OF SPHERE VOLUME
C
            IF (DEBUG) PRINT *,'SPHERE FILLED, NMSH= ',NMSH
            IF (NMSH.GT.MAX_PTS) THEN
             PRINT *,'VMESH: MAX_PTS MUST BE AT LEAST: ',NMSH
             CALL STOPIT
            END IF
            VOLSPH=0.0D0
            DO IPTS=NSAVP+1,NMSH
             VOLSPH=VOLSPH+WMSH(IPTS)
            END DO
            ATMP=NSITES
            VOLSPH=VOLSPH/ATMP
            IF (IMESH.EQ.1) VINNER=VOLSPH
  510      CONTINUE
           CORSPH=(4*PI/3.0D0)*RBOX**3
           IF (DEBUG) THEN
            PRINT 8040,'VSPHERE:',VOLSPH+VINNER,'CORRECT:',CORSPH
           END IF
C
C THE SPHERES ARE DONE. 
C NOW THE PART OUTSIDE THE SPHERE BUT INSIDE THE CUBE
C GET ALL 48 POINTS
C
           IF (DEBUG) THEN
            PRINT *,' '
            PRINT *,'ADDING POINTS FOR EXCLUDED CUBIC REGION'
           END IF
           NSAVP=NMSH
           DO 530 IPTS=NRAD+1,NCTOT
            RRAD(1)=1.0D0
            WRAD(1)=WBUF(IPTS)
            XXX=RBUF(1,IPTS)
            YYY=RBUF(2,IPTS)
            ZZZ=RBUF(3,IPTS)
            IANP=0
            DO 520 IX=1,2
             XXX= -XXX
             DO IY=1,2
              YYY= -YYY 
              DO IZ=1,2
               ZZZ= -ZZZ
               DO ISW=1,2
                ATMP=XXX 
                XXX= YYY
                YYY= ATMP
                DO IPM=1,3
                 IANP=IANP+1
                 ATMP=ZZZ
                 ZZZ= YYY
                 YYY= XXX
                 XXX= ATMP
                 ANGLE(1,IANP)=XXX 
                 ANGLE(2,IANP)=YYY
                 ANGLE(3,IANP)=ZZZ
                 DOMEGA(IANP)=1.0D0
                END DO
               END DO
              END DO
             END DO
  520       CONTINUE
            CALL ADDPTS(NSITES,CUBE(1,IATOM),RRAD,WRAD,
     &                  ANGLE,DOMEGA,1,48)
  530      CONTINUE
C
C GET NUMERICAL VALUE FOR EXCLUDED VOLUME
C
           IF (NMSH.GT.MAX_PTS) THEN
            PRINT *,'VMESH: MAX_PTS MUST BE AT LEAST: ',NMSH
            CALL STOPIT
           END IF
           VEXCL=0.0D0
           DO IPTS=NSAVP+1,NMSH
            VEXCL=VEXCL+WMSH(IPTS)
           END DO
           ATMP=NSITES
           VEXCL=VEXCL/ATMP
           COREX=(8-(4*PI/3.0D0))*RBOX**3
           IF (DEBUG) THEN
            PRINT *,'AFTER EXCLUDED CUBIC REGION, NMSH= ',NMSH
            PRINT 8040,'VEXCL:',VEXCL,'CORRECT:',COREX
           END IF
          END IF
  540    CONTINUE
  550   CONTINUE
        PRINT '(A,I10)','NUMBER OF POINTS FOR ATOMIC CUBES: ',NMSH
C
C ADD THE INTERSTITIAL POINTS
C
        PRINT '(A)','ASSIGNING POINTS TO INTERSTITIAL BOXES'
c
c send information about atomic properties to slaves 
c set npts=0 for slaves
c
%ifdef MPI
c
        CALL SENDDATA(106)
c
%endif
c
C LOOP OVER ALL ORIGINAL CUBES. SET BACK NGRP FIRST.
C
        NGRP=NGFULL
        DO IBOX=NUNIQUE+1,NCUBE
         DO IC=1,3
          BOX(1,IC)= -SIDE(2,IC,IBOX)+CUBE(IC,IBOX)
          BOX(2,IC)=  SIDE(2,IC,IBOX)+CUBE(IC,IBOX)
         END DO
         ERRBOX=ERRIS
         IF (LSYWT) ERRBOX=ERRBOX/NUMBOX(IBOX)
c
%ifdef MPI
c
         IF ((NPROC .LT. MSHSLV) .OR. (NPROC .LE. 0)) THEN
          CALL CKCHILD(1,NTID)
          IF (NCALLED .NE. NPROC) THEN
           CALL PAMMESH(1,BOX,ERRBOX,NUMBOX(IBOX))
          ELSE
           CALL FILLIST(BOX,ERRBOX,NUMBOX(IBOX))
          END IF
         ELSE
          CALL CKCHILD(2,NTID) 
          CALL PAMMESH(1,BOX,ERRBOX,NUMBOX(IBOX))
         ENDIF
c
%else
c
         CALL FILLIST(BOX,ERRBOX,NUMBOX(IBOX))
c
%endif
c
         IF (MOD(IBOX,10) .EQ. 0) THEN
          PRINT '(A,I8,A,I8,A)','BOX ',IBOX,' OF ',NCUBE,' ...'
         END IF
        END DO
c
c get mesh points from slaves 
c
%ifdef MPI
c
        CALL PAMMESH(2,BOX,0.0D0,0)
c
%endif
c
        PRINT '(A,I10)','TOTAL NUMBER OF MESH POINTS:       ',NMSH
C
C REORDER MESH POINTS
C
        PRINT '(A)','REORDERING MESH POINTS'
        CALL GTTIME(TIME2)
        CALL REORMSH
        CALL GTTIME(TIME3)
C
C CHECK INTEGRATED CHARGE FOR OVERLAPPING ATOMIC DENSITIES
C
        PRINT '(A)',' '
        PRINT '(A)','TEST INTEGRATION FOR BARE GAUSSIANS'
        PRINT '(A)',' '
        PRINT '(2A)',' ID-MEM   BEST ALPHA   BEST ERROR   ',
     &               'WORST ALPHA  WORST ERROR'
        PRINT '(2A)','------------------------------------',
     &               '------------------------'
        AFUDGE=MAX(AFUDAT,AFUDIS)
        ACCU=0.01D0*MAX(ERRAT,ERRIS)
        ACCU= -LOG(ACCU)
        DO 820 IID=1,NIDENT
         CALL GASITES(1,RIDT(1,IID),NEQV,CUBE,MSITES)
         AMIN=ALONG+ALMIN(IID)
         AMAX=ALMAX(IID)
         AMAX=MAX(AMAX,AMIN)
         NALTST=2+NINT(LOG(AMAX/AMIN)/LOG(AFUDGE))
         ATMP=NALTST-1
         BETA=(AMAX/AMIN)**(1.0D0/ATMP)
         EBST=1.0D30
         EWST=0.0D00
         ALBS=0.0D0
         ALWS=0.0D0
         ALP=AMIN
         DO 810 IALP=1,NALTST
          SUM=0.0D0
          RCUTS=ACCU/ALP
          DO INUC=1,NEQV
           DO IPTS=1,NMSH
            RTMP=(RMSH(1,IPTS)-CUBE(1,INUC))**2
     &          +(RMSH(2,IPTS)-CUBE(2,INUC))**2
     &          +(RMSH(3,IPTS)-CUBE(3,INUC))**2
            IF (RTMP .LT. RCUTS) THEN
             SUM=SUM+WMSH(IPTS)*EXP(-ALP*RTMP)
            END IF
           END DO
          END DO
          SUM=SUM/NEQV
          ERROR=ABS((ALP/PI)**1.5D0 * SUM - 1.0D0)
          IF (ERROR .GT. EWST) THEN
           EWST=ERROR
           ALWS=ALP
          END IF
          IF (ERROR .LT. EBST) THEN
           EBST=ERROR
           ALBS=ALP
          END IF
          ALP=ALP*BETA
  810    CONTINUE
         PRINT 1070,IID,ALBS,EBST,ALWS,EWST
 1070    FORMAT(I5,2(2X,E12.2,1X,E12.2))
  820   CONTINUE
        PRINT '(A)',' '
c
c mpi: send mesh to all nodes
c
%ifdef MPI
c
        CALL SENDDATA(102)
c
%endif
c
C
C TEST MESH
C
        CALL TSTMSH
C       
C WRITE VMOLD AND LEAVE
C
        OPEN(99,FILE='VMOLD',FORM='UNFORMATTED',STATUS='UNKNOWN')
        REWIND(99)
        WRITE(99)NMSH,ICALC
        WRITE(99)((RMSH(J,I),J=1,3),I=1,NMSH)
        WRITE(99)(WMSH(I),I=1,NMSH)
        CLOSE(99)
  900   CALL GTTIME(TIME4)
        CALL TIMOUT('CONSTRUCTION OF VARIATIONAL MESH:  ',TIME2-TIME1)
        CALL TIMOUT('MESH REORDERING:                   ',TIME3-TIME2)
        CALL TIMOUT('MESH READING / TESTING + WRITING:  ',TIME4-TIME3)
        RETURN
C
C FORMAT STUFF
C
 8010   FORMAT(1X,A,3(1X,G15.8))
 8030   FORMAT(1X,A,1X,I5,2(1X,G15.8))
 8040   FORMAT(2(1X,A,1X,G20.14))
 8050   FORMAT(3(1X,A,1X,I6,1X))
 8060   FORMAT(3(1X,G20.14)/2(1X,G20.14))
 8070   FORMAT(1X,A,1X,I6,1X,A,1X,G20.14,1X,A,1X,I6)
       END
c
c ********************************************************************
c
c determines where to cut a box between two atoms of type ifnct 
c and jfnct and distance d
c
      FUNCTION SPLITHERE(IFNCT,JFNCT,D)
       IMPLICIT REAL*8 (A-H,O-Z)
       PARAMETER(EPS=1.0D-15)
       SAVE
c      
       IF (D .LE. 0.0D0) THEN
        SPLITHERE= 0.0D0
        RETURN
       END IF
c 
       R1= 0.0D0
       R2= D
       DO I=1,100
        R= 0.5D0*(R1+R2)
        IF(R.LT.EPS) THEN
         R=0.5D0*D
         GOTO 10
        ENDIF
        CALL RPFIT(IFNCT,R,1.0D0/R,RHOF,P1)
        IF(D-R.LT.EPS) THEN
         R=0.5D0*D
         GOTO 10
        ENDIF
        CALL RPFIT(JFNCT,D-R,1.0D0/(D-R),RHOF,P2)
        IF (ABS(P2-P1) .LT. EPS*ABS(P2+P1)) GOTO 10
        IF (P1 .GT. P2) THEN
         R2= R
        ELSE
         R1= R
        ENDIF
       END DO
   10  SPLITHERE= R
c
c set reasonable limits
c
       SPLITHERE= MIN(SPLITHERE,D*0.8D0)
       SPLITHERE= MAX(SPLITHERE,D*0.2D0)
       RETURN
      END
c
c ********************************************************************
c
       SUBROUTINE REORMSH
C
C WRITTEN BY MARK R PEDERSON 3-FEB 1998
C
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       PARAMETER (MXBOX=MAX_PTS/20)
       COMMON/TMP1/BOX(2,3,MXBOX),KBOX(MAX_PTS),MPTS(MXBOX),IXNEW(MXBOX)
       DIMENSION SIDE(2,3),S(3),SN(3,3),NX(3)
       DATA EPS/1.0D-5/
       DATA MAXBOX/400/ 
       DATA SIDMIN/1.0D0/
C
C FIND RANGE OF POINTS TO DETERMINE ORIGINAL BOX
C
       DO I=1,3
        S(I)=0.0D0
       END DO
       DO IPTS=1,NMSH
        DO I=1,3
         IF (ABS(RMSH(I,IPTS)).GT.S(I)) S(I)=ABS(RMSH(I,IPTS))
        END DO
       END DO
       DO I=1,3
        SIDE(1,I)= -(S(I)+0.1D0)
        SIDE(2,I)=   S(I)+0.1D0
       END DO
C
C TRY TO REDUCE BOX SIZE BY CHECKING FOR X/Y/Z REFLECTIONS 
C
       DO IGP=2,NGRP
        ERRX=ABS(RMAT(1,2,IGP))+ABS(RMAT(1,3,IGP))
     &      +ABS(RMAT(2,1,IGP))+ABS(RMAT(2,3,IGP))
     &      +ABS(RMAT(3,1,IGP))+ABS(RMAT(3,2,IGP))
        IF (ERRX.LT.EPS) THEN
         ERRX=ABS(RMAT(1,1,IGP)+1.0D0)+
     &        ABS(RMAT(2,2,IGP)-1.0D0)+
     &        ABS(RMAT(3,3,IGP)-1.0D0)
         IF (ERRX.LT.EPS) SIDE(1,1)=0.0D0
         ERRX=ABS(RMAT(1,1,IGP)-1.0D0)+
     &        ABS(RMAT(2,2,IGP)+1.0D0)+
     &        ABS(RMAT(3,3,IGP)-1.0D0)
         IF (ERRX.LT.EPS) SIDE(1,2)=0.0D0
         ERRX=ABS(RMAT(1,1,IGP)-1.0D0)+
     &        ABS(RMAT(2,2,IGP)-1.0D0)+
     &        ABS(RMAT(3,3,IGP)+1.0D0)
         IF (ERRX.LT.EPS) SIDE(1,3)=0.0D0
        END IF
       END DO
C
C MOVE ALL POINTS INTO SMALLER BOX
C
       DO IPTS=1,NMSH
        DO IGP=1,NGRP
         DO J=1,3
          S(J)=0.0D0
          DO K=1,3
           S(J)=S(J)+RMAT(J,K,IGP)*RMSH(K,IPTS)
          END DO
         END DO
         INBOX=0
         DO I=1,3
          IF (S(I).LT.SIDE(1,I)) INBOX=1
          IF (S(I).GT.SIDE(2,I)) INBOX=1
         END DO
         IF (INBOX.EQ.0) GOTO 10
        END DO
        PRINT *,'REORMSH: PROBLEM 1'
        CALL STOPIT
 10     CONTINUE
        DO K=1,3
         RMSH(K,IPTS)=S(K)
        END DO
       END DO
C
C SETUP FOR FIRST BOX
C
       DO I=1,3
        DO J=1,2
         BOX(J,I,1)=SIDE(J,I)
        END DO
       END DO
       DO I=1,NMSH
        KBOX(I)=1
       END DO
       MPTS(1)=NMSH
C
C BEGIN SUBDIVISON
C                
       NBOX=1
   50  CONTINUE
C
C GET RID OF BOXES DEVOID OF POINTS
C
        LPTS=0
        LBOX=0
        DO IBOX=1,NBOX
         LPTS=LPTS+MPTS(IBOX)
         IXNEW(IBOX)=0
         IF (MPTS(IBOX).NE.0) THEN
          LBOX=LBOX+1
          IXNEW(IBOX)=LBOX
          MPTS(LBOX)=MPTS(IBOX)
          DO I=1,3
           DO J=1,2
            BOX(J,I,LBOX)=BOX(J,I,IBOX)
           END DO
          END DO
         END IF
        END DO
        IF (LBOX .NE. NBOX) THEN
         DO I=1,NMSH
          KBOX(I)= IXNEW(KBOX(I))
         END DO
        END IF
        NBOX=LBOX
C
C FIND LARGEST BOX THAT SHOULD BE SLICED
C
        MBOX=NBOX+1
        DO IBOX=NBOX,1,-1
         SMAX=0.0D0
         DO I=1,3
          SMAX=MAX(SMAX,BOX(2,I,IBOX)-BOX(1,I,IBOX))
         END DO
         IF (SMAX.GT.SIDMIN) THEN
          IF (MPTS(IBOX).GT.MAXBOX) MBOX=IBOX
         END IF
        END DO
C
C DETERMINE HOW MANY SLICES
C
        IF (MBOX.LE.NBOX) THEN
         SAVG=0.0D0
         DO I=1,3
          S(I)=BOX(2,I,MBOX)-BOX(1,I,MBOX)
          SAVG=SAVG+S(I)
         END DO
         SAVG=SAVG/3.0D0
         DO I=1,3
          S(I)=S(I)/SAVG
         END DO
         DO I=1,3
          NX(I)=1
          IF (S(I).GT.0.8) NX(I)=2
         END DO
         N7=NX(1)*NX(2)*NX(3)-1
         IF (NBOX+N7 .GT. MXBOX) THEN
          PRINT *,'REORMSH: MXBOX MUST BE AT LEAST: ',NBOX+N7
          CALL STOPIT
         END IF
C
C MAKE ROOM FOR NEW BOXES
C
         DO IBOX=NBOX,MBOX+1,-1
          DO I=1,3
           DO J=1,2
            BOX(J,I,IBOX+N7)=BOX(J,I,IBOX)
           END DO
          END DO
          MPTS(IBOX+N7)=MPTS(IBOX)
         END DO
         DO I=1,NMSH
          IF (KBOX(I).GT.MBOX) KBOX(I)=KBOX(I)+N7
         END DO
         NBOX=NBOX+N7
C
C REPARTITION BOX
C
         DO I=1,3        
          BX=BOX(1,I,MBOX)
          DX=(BOX(2,I,MBOX)-BOX(1,I,MBOX))/NX(I)   
          DO J=1,NX(I)+1
           SN(J,I)=BX
           BX=BX+DX    
          END DO
         END DO
C
C CREATE NEW BOXES
C
         MBOX=MBOX-1
         DO IX=1,NX(1)
          SX1=SN(IX  ,1)
          SX2=SN(IX+1,1)
          DO IY=1,NX(2)
           SY1=SN(IY  ,2)
           SY2=SN(IY+1,2)
           DO IZ=1,NX(3)
            SZ1=SN(IZ  ,3)
            SZ2=SN(IZ+1,3)
            MBOX=MBOX+1
            BOX(1,1,MBOX)=SX1
            BOX(2,1,MBOX)=SX2
            BOX(1,2,MBOX)=SY1
            BOX(2,2,MBOX)=SY2
            BOX(1,3,MBOX)=SZ1
            BOX(2,3,MBOX)=SZ2
           END DO
          END DO
         END DO
C
C NOW RELOCATE THE MESH POINTS
C
         DO IBOX=MBOX,MBOX-N7,-1
          MPTS(IBOX)=0
         END DO
         DO IPTS=1,NMSH
          IF (KBOX(IPTS).EQ.MBOX-N7) THEN
           DO IBOX=MBOX,MBOX-N7,-1
C
C TRY TO MOVE THIS POINT TO IBOX
C
            DO IGP=1,NGRP
             DO J=1,3
              S(J)=0.0D0
              DO K=1,3
               S(J)=S(J)+RMAT(J,K,IGP)*RMSH(K,IPTS)
              END DO
             END DO
             INBOX=0
             DO I=1,3
              IF (S(I).LT.BOX(1,I,IBOX)) INBOX=1
              IF (S(I).GT.BOX(2,I,IBOX)) INBOX=1
             END DO
             IF (INBOX.EQ.0) THEN
              DO J=1,3
               RMSH(J,IPTS)=S(J)
              END DO
              MPTS(IBOX)=MPTS(IBOX)+1
              KBOX(IPTS)=IBOX
              GOTO 20
             END IF
            END DO
           END DO
          END IF
 20       CONTINUE
         END DO
         GOTO 50
        END IF
       CONTINUE
C
C MOVE POINTS TOGETHER
C
       LPTS=0     
       DO IBOX=1,NBOX
        IBEG=LPTS+1
        KPTS=0
        DO IPTS=IBEG,NMSH
         IF (KBOX(IPTS).EQ.IBOX) THEN
          LPTS=LPTS+1
          KPTS=KPTS+1
          DO J=1,3
           RR=RMSH(J,IPTS)
           RMSH(J,IPTS)=RMSH(J,LPTS)
           RMSH(J,LPTS)=RR
          END DO
          RR=WMSH(IPTS)
          WMSH(IPTS)=WMSH(LPTS)
          WMSH(LPTS)=RR
          MM=KBOX(IPTS)
          KBOX(IPTS)=KBOX(LPTS)
          KBOX(LPTS)=MM
         END IF
        END DO
       END DO
C
C CHECK TO SEE IF POINTS ARE ORDERED
C
C      LPTS=0
C      IERR=0
C      DO IBOX=1,NBOX
C       DO IPTS=1,MPTS(IBOX)
C        LPTS=LPTS+1
C        IF (KBOX(LPTS).NE.IBOX) IERR=IERR+1
C       END DO
C      END DO
C      IF (IERR.NE.0) THEN
C       PRINT *,'REORMSH: ARRANGEMENT ERROR:',IERR
C       CALL STOPIT
C      END IF
C
C PRINT OUT INFORMATION ABOUT SPHERES
C
       IF (NBOX.GT.MX_SPH) THEN
        PRINT *,'REORMSH: MX_SPH MUST BE ATLEAST:',NBOX
        CALL STOPIT
       END IF
       RMIN=1.0D30
       RMAX=0.0D0
       RAVG=0.0D0
       VMIN=1.0D30
       VMAX=0.0D0
       VAVG=0.0D0
       PMIN=1.0D30
       PMAX=0.0D0
       PAVG=0.0D0
       KMIN=NMSH
       KMAX=0
       WASP=1.0D0
       FACT=4.0D0*ATAN(1.0D0)*4.0D0/3.0D0
       IF (DEBUG) PRINT *,NBOX,' TOTAL NUMBER OF SPHERES'
C
       LPTS=1
       DO IBOX=1,NBOX
        RR=0.0D0
        DO I=1,3
         S(I)=(BOX(1,I,IBOX)+BOX(2,I,IBOX))/2.0D0
         RR=RR+(S(I)-BOX(1,I,IBOX))**2
        END DO
        RR=SQRT(RR)
C
        VOL=FACT*RR**3 
        IF (RR.GT.RMAX) RMAX=RR
        IF (RR.LT.RMIN) RMIN=RR
        RAVG=RAVG+RR 
        IF (VOL.GT.VMAX) VMAX=VOL
        IF (VOL.LT.VMIN) VMIN=VOL
        VAVG=VAVG+VOL 
        IF (MPTS(IBOX).GT.KMAX) KMAX=MPTS(IBOX)
        IF (MPTS(IBOX).LT.KMIN) KMIN=MPTS(IBOX)
        VOL=MPTS(IBOX)/VOL
        IF (VOL.GT.PMAX) PMAX=VOL
        IF (VOL.LT.PMIN) PMIN=VOL
        PAVG=PAVG+VOL
C
        TSPH(1,IBOX)=S(1)
        TSPH(2,IBOX)=S(2)
        TSPH(3,IBOX)=S(3)
        TSPH(4,IBOX)=RR
C
C CONSTRUCT ASPECT RATIOS
C
        SMAX=0.0D0
        SMIN=1.0D30
        DO I=1,3
         S(I)=(BOX(2,I,IBOX)-BOX(1,I,IBOX))
         IF (S(I).GT.SMAX) SMAX=S(I)
         IF (S(I).LT.SMIN) SMIN=S(I)
        END DO
        WASP=MAX(WASP,SMAX/SMIN)
        DO I=1,3
         S(I)=S(I)/SMAX
        END DO
        L1=LPTS
        L2=LPTS+MPTS(IBOX)
        LIMSPH(1,IBOX)=L1
        LIMSPH(2,IBOX)=L2-1
        LPTS=LPTS+MPTS(IBOX)
        IF (DEBUG) PRINT 1010,IBOX,L1,L2,
     &                   (TSPH(J,IBOX),J=1,4),(S(I),I=1,3)
 1010   FORMAT(' ',3I7,4F14.9,3F10.2)
       END DO
C
       RAVG=RAVG/NBOX
       VAVG=VAVG/NBOX
       PAVG=PAVG/NBOX
       KAVG=NMSH/NBOX
       PRINT '(A,I5)','TOTAL NUMBER OF SPHERES: ',NBOX
       PRINT '(2A)','SPHERE INFORMATION: RADIUS, VOLUME, ',
     &              'NUMBER OF POINTS, POINT DENSITY'
       PRINT 1020,'MINIMUM:',RMIN,VMIN,KMIN,PMIN
       PRINT 1020,'MAXIMUM:',RMAX,VMAX,KMAX,PMAX
       PRINT 1020,'AVERAGE:',RAVG,VAVG,KAVG,PAVG
 1020  FORMAT(A,1X,F10.3,1X,F10.3,1X,I8,1X,F10.3)
       PRINT '(A,F10.3,A)','WORST ASPECT RATIO: ',WASP,' : 1'
C
C CHECK TO SEE IF MESH POINTS ARE IN ADVERTISED PLACES I
C
       IERR=0
       DO IPTS=1,NMSH
        LBOX=KBOX(IPTS)
        INBOX=0
        DO I=1,3
         IF (RMSH(I,IPTS).LT.BOX(1,I,LBOX)) INBOX=1
         IF (RMSH(I,IPTS).GT.BOX(2,I,LBOX)) INBOX=1
        END DO
        IF (INBOX.EQ.1) IERR=IERR+1
       END DO
       IF (IERR.NE.0) THEN
        PRINT *,'REORMSH: BOX ASSIGNMENT ERROR:',IERR  
        CALL STOPIT
       END IF
C
C CHECK TO SEE IF MESH POINTS ARE IN ADVERTISED PLACES II
C
       LPTS=0
       IERR=0
       NSPHERES=NBOX
       LPTS=0
       DO IBOX=1,NBOX
        DO IPTS=LIMSPH(1,IBOX),LIMSPH(2,IBOX)
         LPTS=LPTS+1
         S(1)=RMSH(1,IPTS)-TSPH(1,IBOX)
         S(2)=RMSH(2,IPTS)-TSPH(2,IBOX)
         S(3)=RMSH(3,IPTS)-TSPH(3,IBOX)
         RR=S(1)*S(1)+S(2)*S(2)+S(3)*S(3)
         RR=SQRT(RR)
         IF (RR.GT.TSPH(4,IBOX)) IERR=IERR+1
        END DO
       END DO
       IF (IERR.NE.0) THEN
        PRINT *,'REORMSH: SPHERE ASSIGNMENT ERROR:',IERR  
        CALL STOPIT
       END IF
       IF (LPTS.NE.NMSH) THEN
        PRINT *,'REORMSH: LPTS AND NMSH DIFFER'   
        CALL STOPIT
       END IF
       RETURN
      END
C
C ==============================================================
C
C DETERMINES THE LARGEST DEVIATION OF THE NUMERICAL OVERLAP MATRIX
C FROM THE CORRECT OVERLAP MATRIX
C
       SUBROUTINE TSTMSH
C
C WRITTEN BY MARK R PEDERSON (1997)
C
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       LOGICAL EXIST
       COMMON/MIXPOT/POTIN(MAX_PTS*MXSPN),POTDV(MAX_PTS*MXSPN)
C
C CALCULATION OF NUMERICAL OVERLAP MATRIX
C IMODE=1 USE O(N)+PARALLEL APPROACH
C IMODE=2 USE STANDARD APPROACH - FASTER FOR SMALL SYSTEMS / FEW CPUS
C      
       IMODE=2
C
%ifdef MPI
C
       IF (NPROC .GE. 3) IMODE=1
C
%endif
C
       INQUIRE(FILE='HAMMODE',EXIST=EXIST)
       IF (EXIST) THEN
        OPEN(99,FILE='HAMMODE',FORM='FORMATTED',STATUS='UNKNOWN')
        REWIND(99)
        READ(99,*) IMODE
        REWIND(99)
        WRITE(99,*) IMODE,' 1=O(N)/PARALLEL OR 2=STANDARD'
        CLOSE(99)
       END IF
C
       IF (DEBUG) PRINT *,'TSTMSH CALLS OVERLAP IN MODE: 1'
       CALL OVERLAP(1)
       DO IPTS=1,NMSH
        POTDV(IPTS)=WMSH(IPTS)
       END DO   
       DO I=1,NDH_TOT
        HSTOR(I,2)=0.0D0
       END DO
       IF (IMODE.EQ.1) THEN
        CALL OVERNUM(0)
       ELSE
        CALL PATCH(POTDV)
       END IF
C
       ERR1=0.0D0
       ERR2=0.0D0
       ERR3=0.0D0
       KBAS=0
       DO 100 IREP=1,N_REP
        NBAS=NS_TOT(IREP)
        IF(NBAS.GT.NDH)THEN
         PRINT *,'TSTMSH: NDH MUST BE AT LEAST: ',NBAS
         CALL STOPIT
        END IF
        DO IBAS=1,NBAS
         DO JBAS=IBAS,NBAS
          KBAS=KBAS+1
          OVER(JBAS,IBAS)=HSTOR(KBAS,1)
          HAM (JBAS,IBAS)=HSTOR(KBAS,2)
         END DO  
         EVAL(IBAS)=OVER(IBAS,IBAS)
        END DO  
        DO IBAS=1,NBAS
         EVAL(IBAS)= 1.0D0/SQRT(EVAL(IBAS))
        END DO
        DO IBAS=1,NBAS
         ERR1=MAX(ERR1,ABS(HAM(IBAS,IBAS)-OVER(IBAS,IBAS))
     &       *EVAL(IBAS)*EVAL(IBAS))
         DO JBAS=IBAS,NBAS
          ERR2=MAX(ERR2,ABS(HAM(JBAS,IBAS)-OVER(JBAS,IBAS))
     &        *EVAL(IBAS)*EVAL(JBAS))
         END DO  
        END DO  
        CALL DIAGGE(NDH,NBAS,HAM,OVER,EVAL,SC1,0)
        IF (NBAS .GT. 0) THEN
         ERR3=MAX(ERR3,ABS(EVAL(1)   -1.0D0))
         ERR3=MAX(ERR3,ABS(EVAL(NBAS)-1.0D0))
        END IF
        IF (DEBUG) THEN
         IF (NBAS.GT.0) THEN
          PRINT 1010,IREP,NBAS,EVAL(1),EVAL(NBAS)
          PRINT 1020,(EVAL(I),I=1,NBAS)
         ELSE
          PRINT 1030,IREP,NBAS
         END IF
        END IF
 1010   FORMAT(1X,2(1X,I4),2(1X,F12.6),' OVERLAP EIGENVALUES - MESH')
 1020   FORMAT(1X,6(1X,F10.7))
 1030   FORMAT(1X,2(1X,I4),' NO OVERLAP EIGENVALUES')
  100  CONTINUE
       PRINT 1040,ERR1
       PRINT 1050,ERR2
       PRINT 1060,ERR3
 1040  FORMAT('LARGEST S-DIAGONAL ERROR: ',D12.4)
 1050  FORMAT('LARGEST S-GENERAL  ERROR: ',D12.4)
 1060  FORMAT('LARGEST S-EIGEN    ERROR: ',D12.4)
       END
C
C ******************************************************************
C
C RCUTOFF CALCULATES THE ALLOWED CUTOFF RADIUS FOR A TEST FUNCTION 
C F(R)= R**N * EXP(-AMIN*R**2) SO THAT 
C INTEGRAL(RCUTOFF->INFINITY)/INTEGRAL(0->INFINITY) = EPS
C
C N,AMIN,EPS: SEE ABOVE FORMULA
C
       FUNCTION RCUTOFF(N,AMIN,EPS)
        IMPLICIT REAL*8 (A-H,O-Z)
        SAVE
        DATA ACCU /5.0D-16/
        DATA ZERO /1.0D-30/
C
        IF (AMIN .LT. ZERO) THEN
         PRINT *,'RCUTOFF: AMIN IS TOO SMALL'
         CALL STOPIT
        END IF
C
C MACHINE ACCURACY
C
        CALL MACHEPS(SMALL)
        SMALL=10*SMALL
        SMALL=MAX(SMALL,ACCU)
        M=MAX(N,1)
        IF (MOD(M,2).NE.1) M=M+1
        ALRC=1.0D0/AMIN
        AL2RC=0.5D0*ALRC 
C
C INTEGRAL(0->INFINITY)
C
        TOTI=AL2RC
        DO I=3,M,2
         TOTI=(I-1)*AL2RC*TOTI
        END DO
        TOTI=TOTI*EPS
C
C ITERATION
C
        R=SQRT((1.0D0*(M-1)-LOG(EPS))*ALRC)
        ITER=0
  110   CONTINUE    
         ROLD=R
         ITER=ITER+1
         IF (ITER .GT. 100*M) THEN
          PRINT *,'RCUTOFF: ITERATION FAILURE'
          CALL STOPIT
         END IF
         RSQR=R*R
         FAC=EXP(-AMIN*RSQR)
         ACTI=AL2RC*FAC
         RPOW=FAC
         DO I=3,M,2
          RPOW=RPOW*RSQR
          ACTI=AL2RC*(RPOW+(I-1)*ACTI)
         END DO
         DRVI= -RPOW*R
         R=ROLD-(ACTI-TOTI)/DRVI
         IF (R .LT. 0.0D0)  R=ROLD-5.0D0
         IF (R .GT. 2*ROLD) R=ROLD+5.0D0
         IF (ABS(R-ROLD) .LE. SMALL*ABS(ROLD)) GOTO 120
         GOTO 110
  120   CONTINUE
        RCUTOFF= R
        RETURN
       END
C
C ****************************************************************
C
       FUNCTION ALCUTOFF(N,RSQR,EPS)
C
C ALCUTOFF DETERMINES THE VALUE ALP SO THAT
C
C  INF  N            2          INF  N            2
C  INT R * EXP(-ALP*R ) - EPS * INT R * EXP(-ALP*R ) = 0
C   R                            0
C
C INPUT: N, RSQR= R*R, EPS (SEE ABOVE FORMULA)
C
        IMPLICIT REAL*8 (A-H,O-Z)
        SAVE
        DATA TOLER/1.0D-14/       
C
C SIMPLE CASES
C
        IF ((N .LT. 0) .OR. (EPS .GE. 1.0D0)) THEN
         ALCUTOFF= 0.0D0
         RETURN
        ELSE IF ((RSQR .LE. 0.0D0) .OR. (EPS .LE. 0.0D0)) THEN
         ALCUTOFF= 1.0D30
         RETURN
        END IF
C
C INITIALIZATION: SOLUTION FOR M=1
C THEN ITERATE
C
        M=N
        IF (MOD(M,2) .NE. 1) M=M+1
        ALP= -LOG(EPS)/RSQR
   10   CONTINUE
         OLD= ALP
         ALRCH= 0.5D0/ALP
         FAC=  ALRCH*EXP(-ALP*RSQR)
         SUM1= FAC
         SUM2= ALRCH
         DO I=3,M,2
          FAC= FAC*RSQR
          FF= (I-1)*ALRCH
          SUM1= FAC+FF*SUM1
          SUM2=     FF*SUM2
         END DO
         FAC= FAC*RSQR
         FF= (M+1)*ALRCH
         DR1= FAC+FF*SUM1
         DR2=     FF*SUM2
         ANEW= ALP+(SUM1-EPS*SUM2)/(DR1-EPS*DR2)
         IF (ANEW .GT. 2.0D0*ALP) ANEW= 2.0D0*ALP
         IF (ANEW .LT. 0.5D0*ALP) ANEW= 0.5D0*ALP
         ALP= ANEW
         IF (ABS(ALP-OLD) .LT. TOLER*OLD) GOTO 20
         GOTO 10
   20   CONTINUE
        ALCUTOFF= ALP
        RETURN
       END
C
C *****************************************************************
C
       SUBROUTINE ATCUBE(NARR,NPTS,R,WTS,NPHI,NTHET,RSPH,RBOX,
     &                   ERRMAX,ALMIN,ALMAX,AFUDGE,NPOW)
C ORIGINAL VERSION BY MARK R PEDERSON (1989)
C
C NARR:   SIZE OF R AND WTS
C NPTS:   NUMBER OF POINTS CREATED
C R,WTS:  COORDINATES AND WEIGHTS OF MESH POINTS
C NPHI:   NUMBER OF PHI POINTS IN WEDGE DEFINED BY RBOX > X > Y > Z
C NTHET:  NUMBER OF THETA POINTS IN WEDGE DEFINED BY RBOX > X > Y > Z
C RSPH:   RADIUS OF SPHERE
C RBOX:   SIZE OF BOX 
C ERRMAX: MAX. ERROR FOR RADIAL MESHES
C ALMIN:  MINIMUM GAUSSIAN DECAY CONSTANT
C ALMAX:  MAXIMUM GAUSSIAN DECAY CONSTANT
C AFUDGE: FACTOR BETWEEN SUCCESSIVE TEST ALPHAS
C NPOW:   MAXIMUM POWER OF TEST FUNCTION
C
C MXANG:  MAXIMUM SIZE OF THETA AND PHI MESH
C MXRAD:  MAXIMUM SIZE OF RADIAL MESH
C
        IMPLICIT REAL*8 (A-H,O-Z)
        PARAMETER (MXANG= 10)
        PARAMETER (MXANG2=2*MXANG)
        PARAMETER (MXRAD= 100)
        DIMENSION R(3,*),WTS(*)
        DIMENSION XPHI(MXANG),XTHET(MXANG2),XRAD(MXRAD)
        DIMENSION WPHI(MXANG),WTHET(MXANG2),WRAD(MXRAD)
        SAVE
C
C SETUP AND CHECK
C
        NTHET2=2*NTHET
        PD4=ATAN(1.0D0)
        PI= 4*PD4
        NANG=MAX(NPHI,NTHET)
        IF (NANG.GT.MXANG) THEN
         PRINT *,'ATCUBE: MXANG MUST BE AT LEAST: ',NANG
         CALL STOPIT
        END IF
        VOL=0.0D0
        IPTS=0
C
C TRANSFORMATION PHI=U**2 LEADS TO A MESH THAT INTEGRATES ALL ODD
C POWERS OF PHI IN (0,PI/4) UP TO 4*NPHI-1. THE TAYLOR EXPANSION 
C OF THE PHI INTEGRAND IN PHI=0 HAS ONLY ODD POWERS IN PHI.
C
        UP=PD4**2
        ZED=0.0D0
        CALL GAUSSP(ZED,UP,NPHI,XPHI,WPHI)
C
C TRANSFORM PHI POINTS AND WEIGHTS
C
        DO 10 I=1,NPHI
         XPHI(I)=SQRT(XPHI(I))
         WPHI(I)=WPHI(I)/(2*XPHI(I))
   10   CONTINUE
C
C THETA POINTS: MESH THAT INTEGRATES ONLY EVEN POWERS OF (PI/2-THETA)
C UP TO 4*NPHI-2. THE THETA INTEGRAND IS A FUNCTION EXPANDABLE IN A
C GERADE FUNCTION IN THETA=PI/2.
C
        DO 60 I=1,NPHI
         SINPHI=SIN(XPHI(I))
         COSPHI=COS(XPHI(I))
         TLM=ATAN(1.0D0/SINPHI)
         TUM=PI-TLM
         CALL GAUSSP(TLM,TUM,NTHET2,XTHET,WTHET)
C
C R POINTS: VARIATIONAL MESH
C
         DO 50 J=1,NTHET
          SINTHET=SIN(XTHET(J))
          COSTHET=COS(XTHET(J))
          RLM=RSPH
          RUM=RBOX/(SINTHET*COSPHI)
          CALL RADMSH(MXRAD,RLM,RUM,ERRMAX,ALMIN,ALMAX,AFUDGE,NPOW,
     &                NRAD,XRAD,WRAD)
          NPTS=IPTS+NRAD
          IF(NPTS.GT.NARR)THEN
           PRINT *,'ATCUBE: NPTS > NARR, NARR= ',NARR,' NPTS= ',NPTS
           CALL STOPIT
          END IF
          DO 40 K=1,NRAD
           IPTS=IPTS+1
           R(1,IPTS)=XRAD(K)*SINTHET*COSPHI
           R(2,IPTS)=XRAD(K)*SINTHET*SINPHI
           R(3,IPTS)=XRAD(K)*COSTHET
           WTS(IPTS)=WPHI(I)*WTHET(J)*WRAD(K)*SINTHET
           VOL=VOL+WTS(IPTS)
   40     CONTINUE
   50    CONTINUE
   60   CONTINUE
        VOL=VOL*48
C
C ORDER EM
C
        NPTS=IPTS
        DO 90 IPTS=1,NPTS
         DO 80 JPTS=IPTS+1,NPTS
          RI=R(1,IPTS)**2+R(2,IPTS)**2+R(3,IPTS)**2
          RJ=R(1,JPTS)**2+R(2,JPTS)**2+R(3,JPTS)**2
          IF(RJ.LT.RI)THEN
           DO 70 K=1,3
            PSAVE=R(K,JPTS)
            R(K,JPTS)=R(K,IPTS)
            R(K,IPTS)=PSAVE
   70      CONTINUE
           PSAVE=WTS(JPTS)
           WTS(JPTS)=WTS(IPTS)
           WTS(IPTS)=PSAVE
          END IF
   80    CONTINUE
   90   CONTINUE
        RETURN
       END
C
C ****************************************************************
C
      SUBROUTINE FLACUB(NARR,NR1,NR2,NPTS,R,WTS,NPHI,NTHET,RSPH,
     &                  RBOX,ERSPH,ERBOX,ALMIN,ALMAX,AFUDGE,NPOW)
C ORIGINAL VERSION BY MARK R PEDERSON (1989)
C
C FOR REGION OUTSIDE SPHERE BUT INSIDE CUBE:
C
C NARR:   SIZE OF R,WTS
C NR1:    RETURNED NUMBER OF RADIAL POINTS FROM 0 TO RSPH 
C NR2:    RETURNED NUMBER OF RADIAL POINTS FROM RSPH TO RMAX 
C R,WTS:  RETURNED COORDINATES AND WEIGHTS OF MESH POINTS
C NPHI:   NUMBER OF PHI POINTS FOR EXCLUDED CUBIC VOLUMES
C NTHET:  NUMBER OF THETA POINTS FOR EXCLUDED CUBIC VOLUMES
C RSPH:   RADIUS OF SPHERE 
C RBOX:   CUBE DEFINED BY |X|,|Y|,|Z| < RBOX
C ERSPH:  MAX. ERROR FOR RADIAL INTEGRATIONS FROM 0 TO RSPH
C ERBOX:  MAX. ERROR FOR RADIAL INTEGRATIONS FROM RSPH TO RBOX
C         AND FOR RADIAL INTEGRATIONS IN EXCLUDED VOLUME
C ALMIN:  MINIMUM EXPONENTIAL ALPHA
C ALMAX:  MAXIMUM EXPONENTIAL ALPHA
C AFUDGE: FACTOR BETWEEN SUCCESSIVE TEST ALPHAS
C NPOW:   MAX. POWER FOR TEST FUNCTIONS
C
C MXRAD:  MAXIMUM NUMBER OF POINTS FOR THE RADIAL MESH
C
       IMPLICIT REAL*8 (A-H,O-Z)
       PARAMETER (MXRAD=500)
       DIMENSION R(3,NARR),WTS(NARR)
       DIMENSION XRAD(MXRAD),WTRAD(MXRAD)
       SAVE
C
C CHECK ALMIN AND ALMAX 
C
       PI=4*ATAN(1.0D0)
       IF (ALMIN.GT.ALMAX) ALMAX= AFUDGE*ALMIN
C
C RADIAL MESH
C
       ZERO=0.0D0
       CALL RADMSH(MXRAD,ZERO,RSPH,ERSPH,ALMIN,ALMAX,AFUDGE,NPOW, 
     &             NR1,XRAD,WTRAD)
       NSTRT=NR1+1
       CALL RADMSH(MXRAD-NR1,RSPH,RBOX,ERBOX,ALMIN,ALMAX,AFUDGE,NPOW,
     &             NR2,XRAD(NSTRT),WTRAD(NSTRT))
       NRAD=NR1+NR2
       DO I=1,NRAD
        R(1,I)=XRAD(I)
        R(2,I)=0.0D0 
        R(3,I)=0.0D0 
        WTS(I)=(4*PI)*WTRAD(I)
       END DO
       NLEFT=NARR-NRAD
       NSTRT=NRAD+1
C
C EXCLUDED CUBIC REGIONS MESH
C
       CALL ATCUBE(NLEFT,NEXCL,R(1,NSTRT),WTS(NSTRT),NPHI,NTHET,
     &             RBOX,RBOX,ERBOX,ALMIN,ALMAX,AFUDGE,NPOW)
       NPTS=NRAD+NEXCL
       RETURN
      END
C
C *****************************************************************
C
C FILLIST FILLS AN INTERSTITIAL BOX WITH MESH POINTS
C ATTENTION: PARAMETERS AND COMMON/TMP1/ MUST BE IDENTICAL TO IS1DIM
C
       SUBROUTINE FILLIST(BOXIN,ERRBOX,NMULT)
        INCLUDE 'PARAMS'
        INCLUDE 'commons.inc'
        PARAMETER (MXBOXT=400)
        PARAMETER (MAXP1D=20)
        PARAMETER (MAXTST=4000)
        PARAMETER (MAXNP=6)
        DIMENSION BOXIN(2,3)
        COMMON/ISTITL/RNUC(3,MX_CNT),ZALP(2,MX_CNT),AFUDIS,ALONG
     &   ,IFNU(MX_CNT),NPOW(MX_CNT),NNUC,MX1D
        COMMON/TMP1/ALTAB(MAXTST),PREFAC(0:MAXNP,MAXTST),RTST(3,MAXTST)
     &   ,XYZWGT(0:MAXNP,3,MAXTST),CORRECT(0:MAXNP,3,MAXTST)
     &   ,YZDECAY(0:MAXNP,MAXTST),SUMMESH(0:MAXNP,MAXTST)
     &   ,TABINT(0:MAXNP,3),TABSUM(0:MAXNP,3),TABNRM(0:MAXNP)
     &   ,NPTAB(MAXTST),NTST
        LOGICAL OK,OKTOT
        DIMENSION BOXTAB(2,3,MXBOXT),RSQR(MAXP1D*MAXP1D*MAXP1D)
        DIMENSION RXPT(MAXP1D,3),WXPT(MAXP1D,3),XCUT(3,3)
        DIMENSION NNEW(3),NXPT(3),IR(3)
        DATA PI/3.14159265358979323844D0/
        DATA TOLER/1.0D-8/
C
C CHECK MX1D, AFUDIS
C         
        IF (NMULT .LE. 0) RETURN
        IF (MX1D .LT. 1) THEN
         PRINT *,'FILLIST: MAX. NUMBER OF POINTS IN A 1-DIMENSIONAL'
         PRINT *,'INTERSTITIAL REGION MUST BE AT LEAST 1'
         CALL STOPIT
        END IF
        IF (MX1D .GT. MAXP1D) THEN
         PRINT *,'FILLIST: MAXP1D MUST BE AT LEAST: ',MX1D
         CALL STOPIT
        END IF
        IF (AFUDIS .LT. 1.01D0) AFUDIS=1.01D0
C
C CHECK NPOW
C
        DO ICNT=1,NNUC
         IF (NPOW(ICNT) .GT. MAXNP) THEN
          PRINT *,'FILLIST: NPOW > MAXNP'
          CALL STOPIT
         END IF
         IF (NPOW(ICNT) .LT. 0) THEN
          PRINT *,'FILLIST: NPOW < 0'
          CALL STOPIT
         END IF
        END DO  
C
C SETUP FOR FIRST BOX
C
        DO IC=1,3
         BOXTAB(1,IC,1)= BOXIN(1,IC)
         BOXTAB(2,IC,1)= BOXIN(2,IC)
        END DO
        NBOX=1
C
C SPLIT BOXES UNTIL WE HAVE SUCCESS
C
        IBOX=0
   10   CONTINUE
         IBOX=IBOX+1
C
C FOR EACH ATOM, FIND DISTANCE TO BOX AND CORRESPONDING ATOMIC POTENTIAL
C CORRECT ERRNOW IF NECESSARY
C
         VWGT= 0.0D0
         DO INUC=1,NNUC
          DIST= 0.0D0
          DO IC=1,3
           IF (RNUC(IC,INUC) .LT. BOXTAB(1,IC,IBOX)) THEN
            DIST= DIST+(RNUC(IC,INUC)-BOXTAB(1,IC,IBOX))**2
           END IF
           IF (RNUC(IC,INUC) .GT. BOXTAB(2,IC,IBOX)) THEN
            DIST= DIST+(RNUC(IC,INUC)-BOXTAB(2,IC,IBOX))**2
           END IF
          END DO
          SDIST= SQRT(DIST)
          CALL RPFIT(IFNU(INUC),SDIST,1.0D0/SDIST,RHOF,POTF)
          VWGT= MAX(VWGT,ABS(POTF))
         END DO
         ERRNOW= ERRBOX/MAX(1.0D0,VWGT)
C
C BUILD LIST OF ATOMS RELEVANT FOR THIS CUBE
C
         NTST=0
         DO 100 ICNT=1,NNUC
          ALMIN=ZALP(1,ICNT)+ALONG
          DD=0.0D0
          DO IC=1,3
           RREF=RNUC(IC,ICNT)
           X1=BOXTAB(1,IC,IBOX)
           X2=BOXTAB(2,IC,IBOX)
           IF (RNUC(IC,ICNT) .LE. X1) RREF=X1
           IF (RNUC(IC,ICNT) .GE. X2) RREF=X2
           DD=DD+(RNUC(IC,ICNT)-RREF)**2
          END DO
          RCOF=RCUTOFF(NPOW(ICNT)+2,ALMIN,ERRNOW)
C
C IF THE ATOM IS CLOSE ENOUGH, DO MORE SOPHISTICATED CHECK
C
          IF (DD .LE. RCOF*RCOF) THEN
           ALMAX=ALCUTOFF(NPOW(ICNT)+2,DD,ERRNOW)
           ALMAX=MIN(ALMAX,ZALP(2,ICNT))
           IF (ALMIN .GE. ALMAX) THEN
            NALP=1
            ALFAC=1.0D0
           ELSE
            NALP=2+INT(LOG(ALMAX/ALMIN)/LOG(AFUDIS))
            ATMP=NALP-1
            ALFAC=(ALMAX/ALMIN)**(1.0D0/ATMP)
           END IF
C
C FOR EACH DIRECTION AND ALPHA, CALCULATE EXACT INTEGRAL
C AND EXACT ABSOLUTE INTEGRAL
C CHECK HOW BIG INTEGRAL OVER BOX IS COMPARED TO INTEGRAL OVER ALL SPACE
C
           ALP=ALMIN
           NPWR=NPOW(ICNT)
           DO 80 IALP=1,NALP
            ALPRC=1.0D0/ALP
            ALRC2=0.5D0*ALPRC
            TABNRM(0)=SQRT(PI*ALPRC)
            IF (NPWR .GE. 1) TABNRM(1)=ALPRC
            DO IPOW=2,NPWR
             TABNRM(IPOW)=TABNRM(IPOW-2)*(IPOW-1)*ALRC2
            END DO
            DO IPOW=0,NPWR
             TABNRM(IPOW)=1.0D0/TABNRM(IPOW)
            END DO
            TWEIG=1.0D0
            DO 30 IC=1,3
             X1=BOXTAB(1,IC,IBOX)-RNUC(IC,ICNT)
             X2=BOXTAB(2,IC,IBOX)-RNUC(IC,ICNT)
             ZER=0.0D0
             IF (X1 .GE. ZER) THEN
              CALL G1DINT( X1, X2,NPWR,ALP,TABINT(0,IC))
              DO IPOW=0,NPWR
               TABSUM(IPOW,IC)=TABINT(IPOW,IC)
              END DO
             ELSE IF (X2 .LE. ZER) THEN
              CALL G1DINT(-X2,-X1,NPWR,ALP,TABINT(0,IC))
              IFAC=1
              DO IPOW=0,NPWR
               TABSUM(IPOW,IC)= IFAC*TABINT(IPOW,IC)
               IFAC= -IFAC
              END DO
             ELSE
              CALL G1DINT(ZER, X2,NPWR,ALP,TABINT(0,IC))
              CALL G1DINT(ZER,-X1,NPWR,ALP,TABSUM(0,IC))
              IFAC=1
              DO IPOW=0,NPWR
               TABINT(IPOW,IC)=TABINT(IPOW,IC)+TABSUM(IPOW,IC)
               TABSUM(IPOW,IC)=TABINT(IPOW,IC)+(IFAC-1)*TABSUM(IPOW,IC)
               IFAC= -IFAC
              END DO
             END IF
             W=0.0D0
             DO IPOW=0,NPWR
              W=MAX(W,TABINT(IPOW,IC)*TABNRM(IPOW))
             END DO
             TWEIG=TWEIG*W
   30       CONTINUE
C
C IF TWEIG IS LARGER THAN ERRNOW, ADD TO LIST
C
            IF (TWEIG .GT. ERRNOW) THEN
             NTST=NTST+1
             IF (NTST .GT. MAXTST) THEN
              PRINT *,'FILLIST: PARAMETER MAXTST IS CURRENTLY: ',MAXTST
              PRINT *,'         MUST BE SUBSTANTIALLY LARGER'
             END IF
             ALTAB(NTST)=ALP
             NPTAB(NTST)=NPWR
             DO IPOW=0,NPWR
              PREFAC(IPOW,NTST)=TABNRM(IPOW)
             END DO
             DO IC=1,3
              RTST(IC,NTST)=RNUC(IC,ICNT)
              DO IPOW=0,NPWR
               XYZWGT (IPOW,IC,NTST)=TABINT(IPOW,IC)
               CORRECT(IPOW,IC,NTST)=TABSUM(IPOW,IC)
              END DO
             END DO
            END IF
C
C NEXT EXPONENT
C
            ALP=ALP*ALFAC
   80      CONTINUE
          END IF
  100    CONTINUE
         IF (NTST .LE. 0) GOTO 200
C
C DONE BULIDING INTEGRAL TABLES, NOW FIND APPROPRIATE 1-D MESHES
C
         OKTOT= .TRUE.
         DO IC=1,3
          CALL IS1DIM(ERRNOW,BOXTAB(1,1,IBOX),IC,RXPT(1,IC),WXPT(1,IC),
     &                NXPT(IC),OK)
          XCUT(1,IC)=BOXTAB(1,IC,IBOX)
          IF (OK) THEN
           NNEW(IC)=1
           XCUT(2,IC)=BOXTAB(2,IC,IBOX)
          ELSE
           OKTOT= .FALSE.
           NNEW(IC)= 2
           XCUT(2,IC)=0.5D0*(BOXTAB(1,IC,IBOX)+BOXTAB(2,IC,IBOX))
           XCUT(3,IC)=BOXTAB(2,IC,IBOX)
          END IF
         END DO
C
C PARTITION CUBE IF UNSUCCESSFUL MESH
C
         IF (.NOT. OKTOT) THEN
          NNBOX=NBOX+NNEW(1)*NNEW(2)*NNEW(3)
          IF (NNBOX .GT. MXBOXT) THEN
           PRINT *,'FILLIST: MXBOXT MUST BE AT LEAST: ',NNBOX
           CALL STOPIT
          END IF
          JBOX=NBOX
          DO IX=1,NNEW(1)
           IR(1)=IX
           DO IY=1,NNEW(2)
            IR(2)=IY
            DO IZ=1,NNEW(3)
             IR(3)=IZ
             JBOX=JBOX+1
             DO IC=1,3
              BOXTAB(1,IC,JBOX)=XCUT(IR(IC),  IC)
              BOXTAB(2,IC,JBOX)=XCUT(IR(IC)+1,IC)
             END DO
            END DO
           END DO
          END DO
          NBOX=NNBOX
         ELSE
C
C UPDATE RMSH AND WMSH
C
          NNMSH=NMSH+NXPT(1)*NXPT(2)*NXPT(3) 
          IF (NNMSH .GT. MAX_PTS) THEN
           PRINT *,'FILLIST: MAX_PTS MUST BE AT LEAST: ',NNMSH
           CALL STOPIT
          END IF
          NSAV=NMSH
          NMSH=0
          DO IX=1,NXPT(1)
           DO IY=1,NXPT(2)
            DO IZ=1,NXPT(3)
             NMSH=NMSH+1 
             RMSH(1,NSAV+NMSH)= RXPT(IX,1)
             RMSH(2,NSAV+NMSH)= RXPT(IY,2)
             RMSH(3,NSAV+NMSH)= RXPT(IZ,3)
             WMSH(NSAV+NMSH)= WXPT(IX,1)*WXPT(IY,2)*WXPT(IZ,3)*NMULT
             RSQR(NMSH)= RXPT(IX,1)**2+RXPT(IY,2)**2+RXPT(IZ,3)**2
            END DO
           END DO
          END DO
C
C PURGE EQIVALENT POINTS
C
          DO IPTS=1,NMSH
           IF (WMSH(NSAV+IPTS) .GT. 0.0D0) THEN
            DO JPTS=IPTS+1,NMSH
             IF (WMSH(NSAV+JPTS) .GT. 0.0D0) THEN
              IF (ABS(RSQR(IPTS)-RSQR(JPTS)) .LE. TOLER) THEN
               DO IGRP=1,NGRP
                DIF= 0.0D0
                DO J=1,3
                 RTMP= 0.0D0
                 DO K=1,3
                  RTMP= RTMP+RMAT(K,J,IGRP)*RMSH(K,NSAV+JPTS)
                 END DO
                 DIF= DIF+ABS(RTMP-RMSH(J,NSAV+IPTS))
                END DO
                IF (DIF .LT. TOLER) GOTO 120
               END DO
               GOTO 130
  120          CONTINUE
               WMSH(NSAV+IPTS)= WMSH(NSAV+IPTS)+WMSH(NSAV+JPTS)
               WMSH(NSAV+JPTS)= -1.0D0
  130          CONTINUE
              END IF
             END IF
            END DO
           END IF
          END DO
C
C GET RID OF EQUIVALENT POINTS
C
          KPTS=NSAV
          DO IPTS=1,NMSH
           IF (WMSH(NSAV+IPTS) .GT. 0.0D0) THEN
            KPTS=KPTS+1
            RMSH(1,KPTS)=RMSH(1,NSAV+IPTS)
            RMSH(2,KPTS)=RMSH(2,NSAV+IPTS)
            RMSH(3,KPTS)=RMSH(3,NSAV+IPTS)
            WMSH(KPTS)=WMSH(NSAV+IPTS)
           END IF
          END DO
          NMSH=KPTS
         END IF
C
C CHECK IF DONE
C
  200    IF (IBOX .LT. NBOX) GOTO 10
        CONTINUE
        RETURN
       END
C
C *************************************************************
C
       SUBROUTINE IS1DIM(EMAX,SIDE,IX,XRET,WRET,NRET,OK)
C
C ORIGINAL VERSION BY MARK R PEDERSON (1989)
C
C FILLS AN INTERSTITIAL REGION WITH POINTS
C
C PARAMETERS:
C
C EMAX:   MAXIMUM RELATIVE ERROR
C SIDE:   CONTAINS THE PARALLELEPIPED BOUNDARIES
C IX:     THE INDEX OF THE CURRENT 1-D COMPONENT (1=X, 2=Y, 3=Z)
C XRET:   RETURNED COORDINATES
C WRET:   RETURNED WEIGHTS
C NRET:   NUMBER OF POINTS RETURNED
C OK:     TRUE ON SUCCESS, FALSE OTHERWISE
C
C ATTENTION: PARAMETERS AND COMMON/TMP1/ MUST BE IDENTICAL TO FILLIST
C
        INCLUDE 'PARAMS'
        INCLUDE 'commons.inc'
        PARAMETER (MAXP1D=20)
        PARAMETER (MAXTST=4000)
        PARAMETER (MAXNP=6)
        DIMENSION XRET(*),WRET(*),SIDE(2,3)
        LOGICAL FAST,OK,BISECT,GOBIG,GOSML,FOUND
        COMMON/ISTITL/RNUC(3,MX_CNT),ZALP(2,MX_CNT),AFUDIS,ALONG
     &  ,IFNU(MX_CNT),NPOW(MX_CNT),NNUC,MX1D
        COMMON/TMP1/ALTAB(MAXTST),PREFAC(0:MAXNP,MAXTST),RTST(3,MAXTST)
     &   ,XYZWGT(0:MAXNP,3,MAXTST),CORRECT(0:MAXNP,3,MAXTST)
     &   ,YZDECAY(0:MAXNP,MAXTST),SUMMESH(0:MAXNP,MAXTST)
     &   ,TABINT(0:MAXNP,3),TABSUM(0:MAXNP,3),TABNRM(0:MAXNP)
     &   ,NPTAB(MAXTST),NTST
        DIMENSION WMESH(MAXP1D),XMESH(MAXP1D)
        DATA SMCUB/1.0D-2/
C
C       GAMACC IS THE RELATIVE ACCURACY REQUIRED FOR THE VARIATIONAL
C       TRANSFORMATION PARAMETER GAMMA
C
        DATA GAMACC/0.01D0/
C
C CHECK EMAX, DEFINE X1 AND X2
C
        FAST= .FALSE.
        IF (EMAX .GT. 0.9D0) FAST=.TRUE.
        X1=SIDE(1,IX)
        X2=SIDE(2,IX)
C
C QUICK AND DIRTY MESH
C
        OK=.TRUE.
        IF (FAST) THEN
         NRET=2
         CALL GAUSSP(X1,X2,NRET,XRET,WRET)
         GOTO 900
        END IF
C
C CHECK FOR TINY CUBES
C
        IF (ABS(X1-X2).LT.(SMCUB*EMAX)) THEN
         PRINT *,'IS1DIM: FOUND A VERY SMALL CUBE:'
         PRINT *,X1,X2
        END IF
C
C DEFINE YZDECAY 
C USE TABNRM AS TEMPORARY STORAGE
C
        DO ITST=1,NTST
         YZWEIG=1.0D0
         DO IC=1,3
          IF (IC .NE. IX) THEN
           W=0.0D0
           DO IPOW=0,NPTAB(ITST)
            W=MAX(W,PREFAC(IPOW,ITST)*XYZWGT(IPOW,IC,ITST))
           END DO
           YZWEIG=YZWEIG*W
          END IF
         END DO
         DO IPOW=0,NPTAB(ITST)
          YZDECAY(IPOW,ITST)=YZWEIG*PREFAC(IPOW,ITST)
         END DO
        END DO
C
C SEARCH FOR A "GOOD" MESH 
C MINIMUM NUMBER OF POINTS IS 1, MAXIMUM MX1D
C GAMMAX AND GAMMIN DEFINES THE VALID GAMMA RANGE
C
        EBEST=1.0D30
        FACUP=1.0D+1
        FACDN=1.0D-1
        GAMMIN=SQRT(ALONG)*0.01D0
        GAMMAX=GAMMIN*1.0D4
C 
C START LOOP TO FIND MINIMUM NUMBER OF POINTS THAT ARE ACCURATE ENOUGH
C
        DO 700 MPTS=1,MX1D
         DO 600 MODE=1,3
          GAMMA=SQRT(ALONG)
          BISECT=.FALSE.
          GOBIG=.FALSE.
          GOSML=.FALSE.
          FOUND=.FALSE.
          NOPT=0
C
C OPTIMIZATION LOOP
C
  300     CONTINUE
           GAMRC=1.0D0/GAMMA
C
C START WITH NORMAL GAUSSIAN QUADRATURE MESH
C
           IF (MODE.EQ.1) THEN
            NPTS=MPTS
            FOUND=.TRUE.
            CALL GAUSSP(X1,X2,NPTS,XMESH,WMESH)
C
C "LEFT HANDED" LINEAR COMBINATION OF SLATERS
C
           ELSE IF (MODE.EQ.2) THEN
            U2=1.0D0
            U1=EXP(-GAMMA*(X2-X1))
            NPTS=MPTS
            CALL GAUSSP(U1,U2,NPTS,XMESH,WMESH)
            DO IPTS=1,NPTS
             WMESH(IPTS)=WMESH(IPTS)/XMESH(IPTS)*GAMRC
             XMESH(IPTS)=X1-LOG(XMESH(IPTS))*GAMRC
            END DO
C
C "RIGHT HANDED" LINEAR COMBINATION OF SLATERS
C
           ELSE IF (MODE.EQ.3) THEN
            XS1=X1
            XS2=X2
            X2= -XS1
            X1= -XS2
            U2=1.0D0
            U1=EXP(-GAMMA*(X2-X1))
            NPTS=MPTS
            CALL GAUSSP(U1,U2,NPTS,XMESH,WMESH)
            DO IPTS=1,NPTS
             WMESH(IPTS)=WMESH(IPTS)/XMESH(IPTS)*GAMRC
             XMESH(IPTS)= -X1+LOG(XMESH(IPTS))*GAMRC
            END DO
            X1=XS1
            X2=XS2
           END IF
C
C CALCULATE MAXIMUM ERROR AND RMS ERROR
C COPY EXACT RESULT TO SUMMESH AND SUBTRACT THE
C RESULT OF THE VARIATIONAL MESH
C
           DO ITST=1,NTST
            DO IPOW=0,NPTAB(ITST)
             SUMMESH(IPOW,ITST)=CORRECT(IPOW,IX,ITST)
            END DO
           END DO
           DO 400 IPTS=1,NPTS
            DO 390 ITST=1,NTST
             XX=(XMESH(IPTS)-RTST(IX,ITST))
             XS=XX*XX
             FACT=WMESH(IPTS)*EXP(-ALTAB(ITST)*XS)
             DO IPOW=0,NPTAB(ITST)
              SUMMESH(IPOW,ITST)=SUMMESH(IPOW,ITST)-FACT
              FACT=FACT*XX
             END DO
  390       CONTINUE
  400      CONTINUE
C
C CHECK FOR MAXIMUM ERROR
C
           ERROR=0.0D0
           DO 430 ITST=1,NTST
            DO IPOW=0,NPTAB(ITST)
             SUMMESH(IPOW,ITST)=SUMMESH(IPOW,ITST)*YZDECAY(IPOW,ITST)
             ERROR=MAX(ERROR,ABS(SUMMESH(IPOW,ITST)))
            END DO
  430      CONTINUE
C
C CALCULATE NEW GAMMA. IF (FOUND), WE ARE DONE
C
           IF (FOUND) GOTO 480
           NOPT=NOPT+1
C
C SETUP FOR SECOND GAMMA: JUST INCREASE GAMMA
C
           IF (NOPT.EQ.1) THEN
            ERR2=ERROR
            GAM2=GAMMA
            GAMMA=GAMMA*FACUP
C
C SETUP FOR THIRD GAMMA: GO UP OR DOWN DEPENDING ON THE CURRENT ERROR
C
           ELSE IF (NOPT .EQ. 2) THEN
            IF (ERROR .LT. ERR2) THEN
             GOBIG=.TRUE.
             GAM1=GAM2
             ERR1=ERR2
             GAM2=GAMMA
             ERR2=ERROR
             GAMMA=GAM2*FACUP
            ELSE
             GOSML=.TRUE.
             GAM3=GAMMA
             ERR3=ERROR
             GAMMA=GAM2*FACDN
            END IF
           ELSE
C
C STILL LOOKING FOR BRACKETS WHILE GOING UP
C
            IF (GOBIG) THEN
             IF (ERROR .LT. ERR2) THEN
              IF (GAMMA .GT. GAMMAX) GOTO 480
              GAM1=GAM2
              ERR1=ERR2
              GAM2=GAMMA
              ERR2=ERROR
              GAMMA=GAM2*FACUP
             ELSE
              GAM3=GAMMA
              ERR3=ERROR
              BISECT=.TRUE.
              GOBIG=.FALSE.
              NBIS=0
             END IF 
            END IF 
C
C STILL LOOKING FOR BRACKETS WHILE GOING DOWN
C
            IF (GOSML) THEN
             IF (ERROR.LT.ERR2) THEN
              IF (GAMMA .LT. GAMMIN) GOTO 480
              GAM3=GAM2
              ERR3=ERR2
              GAM2=GAMMA
              ERR2=ERROR
              GAMMA=GAM2*FACDN
             ELSE
              GAM1=GAMMA
              ERR1=ERROR
              BISECT=.TRUE.
              GOSML=.FALSE.
              NBIS=0
             END IF 
            END IF 
C
C MINIMUM BISECTION
C
            IF (BISECT) THEN
             NBIS=NBIS+1
C
C SETUP OF NEW GAM AND ERR
C
             IF (NBIS .GT. 1) THEN
              IF (MOD(NBIS,2) .EQ. 0) THEN
               IF (ERROR .LT. ERR2) THEN
                GAM3=GAM2
                ERR3=ERR2
                GAM2=GAMMA
                ERR2=ERROR
               ELSE
                GAM1=GAMMA
                ERR1=ERROR
               END IF
              ELSE
               IF (ERROR .LT. ERR2) THEN
                GAM1=GAM2
                ERR1=ERR2
                GAM2=GAMMA
                ERR2=ERROR
               ELSE
                GAM3=GAMMA
                ERR3=ERROR
               END IF
              END IF
             END IF
C
C SETUP OF NEW GAMMA
C
             IF ((MAX(ERR1-ERR2,ERR3-ERR2) .LT. GAMACC*ERR2) .OR.
     &           (ERR2 .LT. 0.01D0*EMAX)) THEN
              FOUND=.TRUE.
              GAMMA=GAM2
             ELSE
              IF (MOD(NBIS,2).EQ.0) THEN
               GAMMA=SQRT(GAM2*GAM3)
              ELSE
               GAMMA=SQRT(GAM1*GAM2)
              END IF
             END IF
            END IF
           END IF
           GOTO 300
C
C UPDATE EBEST, XRET AND WRET
C
  480     IF (ERROR .LT. EBEST) THEN
           NODE=MODE
           GAM=GAMMA
           NRET=NPTS
           MRET=MPTS
           EBEST=ERROR
           DO 490 I=1,NRET
            XRET(I)=XMESH(I)
            WRET(I)=WMESH(I)
  490      CONTINUE
          END IF
  600    CONTINUE
         IF (EBEST .LT. EMAX) GOTO 800
  700   CONTINUE
        OK=.FALSE.
C
C PRINT SOME STUFF AND RETURN
C
  800   CONTINUE
        IF (NRET .NE. MRET) THEN
         PRINT *,'IS1DIM: NRET AND MRET ARE NOT EQUAL: ',NRET,MRET
         CALL STOPIT
        END IF
        IF (NODE.EQ.1) GAM=0.0D0
C
C ABOUT TO BE DONE
C
  900   IF (DEBUG) THEN
         IF (OK) THEN
          PRINT 1010,NODE,NRET,GAM,EBEST
         ELSE
          PRINT 1020,EBEST
         END IF
        END IF
 1010   FORMAT(' SUCCESSFUL MESH! MODE: ',2I3,' GAM: ',G10.4,
     &  ' BIGGEST ERROR: ',G12.4)
 1020   FORMAT(' NO SUCCESS IN IS1DIM, BIGGEST ERROR: ',G12.4)
       END
C
C ****************************************************************
C
       SUBROUTINE G1DINT(X1,X2,NPOW,ALP,GIRES)
C
C G1DINT CALCULATES THE INTEGRAL
C
C   X2  N            2
C  INT X * EXP(-ALP*X ) 
C   X1
C
C FOR ALL N=0,NPOW. X1 AND X2 MUST BE >= 0, X2 MUST BE >= X1.
C WRITTEN BY DV POREZAG
C
        IMPLICIT REAL*8 (A-H,O-Z)
        PARAMETER (MAXPOW=20)
        PARAMETER (MAXORD=30)
        DIMENSION GIRES(0:NPOW)
        DIMENSION U(2),U2(2),ERF1(2),ERF2(2),UEXP(2)
        DIMENSION RCINT(MAXPOW+2*MAXORD+2)
        SAVE
        DATA NIRC/0/
        DATA RTPIRC/0.56418958354775628695D0/
        DATA RTPIHF/0.88622692545275801364D0/
        DATA TOLER/1.0D-14/       
C
C CHECKS 
C     
        IF (NPOW .LT. 0) RETURN
        IF (ALP .LE. 0.0D0) THEN
         PRINT *,'G1DINT: EXPONENTS MUST BE > 0'
         CALL STOPIT
        END IF
        IF (NPOW .GT. MAXPOW) THEN
         PRINT *,'G1DINT: MAXPOW MUST BE AT LEAST: NPOW'
         CALL STOPIT
        END IF
        IF (X1 .LT. 0.0D0) THEN
         PRINT *,'G1DINT: LOWER INTEGRAL BOUNDARY MUST BE >= 0'
         CALL STOPIT
        END IF
        IF (X2 .LE. X1) THEN
         DO IPOW=0,NPOW
          GIRES(IPOW)= 0.0D0
         END DO
         RETURN
        END IF
C
C SETUP
C
        NEED=NPOW+2*MAXORD+2
        IF (NIRC .LT. NEED) THEN
         DO I=NIRC+1,NEED
          RCINT(I)= 1.0D0/I
         END DO
         NIRC=NEED
        END IF
        ALPS= SQRT(ALP)
        U(1)= ALPS*X1
        U(2)= ALPS*X2
        U2(1)= U(1)*U(1)
        U2(2)= U(2)*U(2)
C
C IF U2 IS SMALL, USE EXPANSION OF CORRECT SOLUTION ABOUT U2=0
C
        IF (U2(2) .LE. 1.0D0) THEN
         DO IPOW= 0,NPOW
          GIRES(IPOW)= 0.0D0
         END DO
         U2P1= 1.0D0
         U2P2= 1.0D0
         FAC= 1.0D0
         DO IORD=0,MAXORD
          IOR2P1= 2*IORD+1
          XP1= X1
          XP2= X2
          FCT= FAC*RCINT(IOR2P1)
          OLD= GIRES(NPOW)
          DO IPOW= 0,NPOW
           GIRES(IPOW)=GIRES(IPOW)+FCT*(XP2*U2P2-XP1*U2P1)
           XP1= XP1*X1
           XP2= XP2*X2
           FCT= FCT*(IPOW+IOR2P1)*RCINT(IPOW+IOR2P1+1)
          END DO
          IF (ABS(GIRES(NPOW)-OLD) .LT. TOLER*ABS(OLD)) GOTO 10
          FAC= -FAC*RCINT(IORD+1)
          U2P1= U2P1*U2(1)
          U2P2= U2P2*U2(2)
         END DO
   10    CONTINUE
        ELSE
C
C DETERMINE INTEGRALS THE REGULAR WAY: ERROR FUNCTION FOR IPOW=0,
C ANALYTICAL SOLUTION FOR IPOW=1, RECURSION FOR IPOW > 1
C
         DO 60 ILIM=1,2
          XS= U(ILIM)
          XS2= U2(ILIM)
          UEXP(ILIM)= EXP(-XS2)
          IF (XS2 .LE. 4.0D0) THEN
           FAC= 2*RTPIRC*UEXP(ILIM)
           SUM= 0.0D0
           I=0
   20      CONTINUE
            I=I+1
            OLD= SUM
            SUM= SUM+FAC
            IF (FAC .LE. TOLER*OLD) GOTO 30
            FAC= FAC*XS2/(0.5D0+I)
            GOTO 20
   30      CONTINUE
           ERF1(ILIM)=SUM*XS
           ERF2(ILIM)=1.0D0-ERF1(ILIM)
          ELSE
           GOLD= 0.0D0
           A0= 1.0D0
           B0= 0.0D0
           A1= XS2
           B1= 1.0D0
           FAC= 1.0D0
           I=0
   40      CONTINUE
            I=I+1
            AI= I
            AIA= AI-0.5D0
            A0= (A1+A0*AIA)*FAC
            B0= (B1+B0*AIA)*FAC
            AIF= AI*FAC
            A1= XS2*A0+AIF*A1
            B1= XS2*B0+AIF*B1
            IF (A1 .NE. 0.0D0) THEN
             FAC= 1.0D0/A1
             G= B1*FAC
             IF (ABS(G-GOLD) .LE. TOLER*GOLD) GOTO 50
             GOLD= G
            END IF
            GOTO 40
   50      CONTINUE
           ERF2(ILIM)= RTPIRC*XS*UEXP(ILIM)*G
           ERF1(ILIM)= 1.0D0-ERF2(ILIM)
          END IF
   60    CONTINUE
         IF (ERF1(1) .LT. 0.5D0) THEN
          GIRES(0)= RTPIHF*(ERF1(2)-ERF1(1))
         ELSE
          GIRES(0)= RTPIHF*(ERF2(1)-ERF2(2))
         END IF
         IF (NPOW .GT. 0) GIRES(1)= 0.5D0*(UEXP(1)-UEXP(2))
C
C RECURSION
C
         U1PW= UEXP(1)
         U2PW= UEXP(2)
         DO IPOW=2,NPOW
          U1PW= U1PW*U(1) 
          U2PW= U2PW*U(2) 
          GIRES(IPOW)= 0.5D0*(U1PW-U2PW+(IPOW-1)*GIRES(IPOW-2))
         END DO
         FAC= 1.0D0/ALPS
         FCT= FAC
         DO IPOW=0,NPOW
          GIRES(IPOW)= GIRES(IPOW)*FCT
          FCT= FCT*FAC
         END DO
        END IF
        RETURN
       END
C
C *************************************************************
C
       SUBROUTINE RADMSH(NSIZ,RA,RB,ERRMAX,ALMIN,ALMAX,AFUDGE,NPOW,
     &                   NPTS,RRET,WRET)
        IMPLICIT REAL*8 (A-H,O-Z)
C
C WRITTEN BY DV POREZAG (OPTIMIZED VERSION OF ONEDIMP BY MR PEDERSON)
C THIS SUBROUTINE RETURNS A ONE DIMENSIONAL MESH SUITABLE FOR INTEGRATING
C FUNCTIONS OF THE FORM:
C
C   RB
C  INT  DR * R**2 * F(R)
C   RA 
C
C  WHERE F(R)= R**N * EXP(-ALPHA*R**2) / NORM    (-2 <= N <= NPOW)
C
C            INF
C  AND NORM= INT  DR * R**2 * F(R)
C             0
C
C THE RESULTING INTEGRAL SHOULD BE CORRECT TO AN ACCURACY ERRMAX
C FOR ALL ALPHAS ALMIN <= ALPHA <= ALMAX  
C AFUDGE IS THE FACTOR BETWEEN TWO SUCCESSIVE TEST ALPHAS
C
C NTRUE:   NUMBER OF MESH POINTS TO DETERMINE TRUE VALUE OF INTEGRAL
C NCOMP:   NUMBER OF MESH POINTS TO COMPARE TO NTRUE RESULT
C NSEARCH: NUMBER OF STEPS TO OPTIMIZE TRANSFORMATION PARAMETER
C MAXALP:  MAXIMUM NUMBER OF TEST ALPHAS
C 
        PARAMETER (MAXPOW=20)
        PARAMETER (NTRUE=96)
        PARAMETER (NCOMP=48)
        PARAMETER (NSEARCH=50)
        PARAMETER (MAXALP=200)
        LOGICAL OK
        DIMENSION RRET(NSIZ),WRET(NSIZ)
        DIMENSION XT(NTRUE),WT(NTRUE),XC(NCOMP),WC(NCOMP)
        DIMENSION ALTST(MAXALP),COMPARE(0:MAXPOW)
        DIMENSION CORRECT(0:MAXPOW,MAXALP),WEIGHT(0:MAXPOW,MAXALP)
        SAVE
        DATA TINY  /1.0D-12/ 
        DATA HUEXP /230.0D0/
C
C CHECK INPUT PARAMETERS
C
        NPTS=0
        NPTST=NPOW+2
        IF (RA .GE. RB)    RETURN
        IF (RA .LT. 0.0D0) RETURN
        IF (NPTST .GT. MAXPOW) THEN
         PRINT *,'RADMSH: MAXPOW MUST BE AT LEAST ',NPTST
         CALL STOPIT
        END IF
        IF (AFUDGE .LE. 1.01D0) THEN
         PRINT *,'RADMSH: AFUDGE IS TOO SMALL: ',AFUDGE
         CALL STOPIT
        END IF
        IF (ERRMAX .LT. TINY) THEN
         PRINT *,'RADMSH: DESIRED ACCURACY IS TOO SMALL: ',ERRMAX
         PRINT *,'        MUST NOT BE SMALLER THAN: ',TINY
         CALL STOPIT
        END IF
        ALP1L= ALMIN
        ALP2L= ALMAX
        IF (ALP2L .LT. ALP1L) THEN
         A=ALP2L
         ALP2L=ALP1L
         ALP1L=A
        END IF 
C
C ADJUST ALP1L/ALP2L
C
        IF (ALP2L*RA*RA .GT. HUEXP) THEN
         ALP2L= HUEXP/(RA*RA)
        END IF
        IF (ALP2L .LT. ALP1L) RETURN
C
C SETUP TEST ALPHAS AND WEIGHT FOR EACH TEST ALPHA/POWER
C
        NALTST=2+INT(LOG(ALP2L/ALP1L)/LOG(AFUDGE)) 
        IF (NALTST .GT. MAXALP) THEN
         PRINT *,'RADMSH: NUMBER OF TEST EXPONENTS IS TOO BIG'
         PRINT *,'PARAMETER AFUDGE IS PROBABLY TOO SMALL: ',AFUDGE
         PRINT *,'MAXALP MUST BE AT LEAST ',NALTST
         CALL STOPIT
        END IF
        ATMP=NALTST-1
        FUDGE=(ALP2L/ALP1L)**(1.0D0/ATMP)
C
        PI=4*ATAN(1.0D0)
        ATMP=ALP1L
        DO IALP=1,NALTST
         ALTST(IALP)=ATMP
         ALRCH=0.5D0/ATMP 
C
C EVEN POWERS 
C
         SX=0.5D0*SQRT(2*ALRCH*PI)
         DO IPOW=0,NPTST,2
          WEIGHT(IPOW,IALP)=1.0D0/SX
          SX=SX*(IPOW+1)*ALRCH
         END DO
         ATMP=ATMP*FUDGE
C
C ODD POWERS
C
         SX=ALRCH
         DO IPOW=1,NPTST,2
          WEIGHT(IPOW,IALP)=1.0D0/SX
          SX=SX*(IPOW+1)*ALRCH
         END DO
        END DO
C
C START OF MESH GENERATION
C
        RMIN=RA
        RMAX=RB
        RREF=0.1D0/ALP2L
   10   CONTINUE
C
C CHECK IF THE INTEGRAL IS THE SAME WITH A NCOMP AND A NTRUE POINT MESH
C IF NOT, REDUCE RMAX AND TRY AGAIN
C
         CALL GAUSSP(RMIN,RMAX,NCOMP,XC,WC)
         CALL GAUSSP(RMIN,RMAX,NTRUE,XT,WT)
         DO 50 IALP=1,NALTST
          ATMP=ALTST(IALP)
          DO IPOW=0,NPTST
           COMPARE(IPOW)=0.0D0
           CORRECT(IPOW,IALP)=0.0D0
          END DO
          DO IPT=1,NTRUE
           X=XT(IPT)
           W=WT(IPT)
           FACT=EXP(-ATMP*X*X)
           DO IPOW=0,NPTST
            CORRECT(IPOW,IALP)=CORRECT(IPOW,IALP)+FACT*W
            FACT=FACT*X
           END DO
          END DO
          DO IPT=1,NCOMP
           X=XC(IPT)
           W=WC(IPT)
           FACT=EXP(-ATMP*X*X)
           DO IPOW=0,NPTST
            COMPARE(IPOW)=COMPARE(IPOW)+FACT*W
            FACT=FACT*X
           END DO
          END DO
          DO IPOW=0,NPTST
           X=(COMPARE(IPOW)-CORRECT(IPOW,IALP))*WEIGHT(IPOW,IALP)
           IF (ABS(X) .GT. TINY) THEN
            X=MAX(RMIN,RREF)
            RMAX=SQRT(RMAX*X)
            GOTO 10
           END IF
          END DO
   50    CONTINUE
C
C WE NOW KNOW THAT A NCOMP POINT MESH CAN'T FAIL ...
C NOW TRY MESHES BETWEEN 0 AND NCOMP POINTS
C IF (MPT .EQ. 0), CHECK ONLY SIMPLE GAUSS QUADRATURE
C
         OK=.FALSE.
         DO 400 MPT=0,NCOMP
          ITYPE=0
          EBST=ERRMAX
C
C DEAL WITH GAUSS MESH
C
          CALL GAUSSP(RMIN,RMAX,MPT,XC,WC)
          ERRG=0.0D0
          DO IALP=1,NALTST
           ATMP=ALTST(IALP)
           DO IPOW=0,NPTST
            COMPARE(IPOW)=0.0D0
           END DO
           DO IPT=1,MPT
            X=XC(IPT)
            W=WC(IPT)
            FACT=EXP(-ATMP*X*X)
            DO IPOW=0,NPTST
             COMPARE(IPOW)=COMPARE(IPOW)+FACT*W
             FACT=FACT*X
            END DO
           END DO
           DO IPOW=0,NPTST
            X=(COMPARE(IPOW)-CORRECT(IPOW,IALP))*WEIGHT(IPOW,IALP)
            ERRG=MAX(ERRG,ABS(X))
           END DO
          END DO
          IF (MPT .EQ. 0) THEN
           IF (ERRG .LT. ERRMAX) GOTO 500
           GOTO 400
          END IF
C
C CHECK IF GAUSS-LEGENDRE MESH IS ACCURATE ENOUGH
C
          IF (ERRG .LT. EBST) THEN
           OK=.TRUE.
           ITYPE=1
           EBST=ERRG
           DO IPT=1,MPT
            XT(IPT)=XC(IPT)
            WT(IPT)=WC(IPT)
           END DO
          END IF
C
C NOW DEAL WITH OPTIMIZED MESH
C NSEARCH OPTIMIZATION STEPS, ALP STORES BRACKETING FOR ALOPT
C UPDATE OF ALP AND ERR: FIRST THREE STEPS ARE EASY
C
          ERRO=0.0D0
          ERT1=1.0D30
          ERT2=1.0D30
          ALPINIT=SQRT(ALP1L)
          ALPLIM1=SQRT(ALP1L)*0.01D0
          ALPLIM2=SQRT(ALP2L)*100.0D0
          DO 200 IMN=1,NSEARCH
           CALL MINIMIZE(IMN,ALPINIT,ALOPT,ERRO)
           IF (ALOPT .LT. ALPLIM1) ALOPT= ALPLIM1
           IF (ALOPT .GT. ALPLIM2) ALOPT= ALPLIM2
           ALORC=1.0D0/ALOPT
C
C SWITCH LIMITS TO FOR EXPONENTIAL MESH 
C CALL GAUSSP AND TRANSFORM POINTS/WEIGHTS
C
           AA=EXP(-ALOPT*RMAX)
           BB=EXP(-ALOPT*RMIN)
           CALL GAUSSP(AA,BB,MPT,XC,WC)
           DO I=1,MPT
            WC(I)=WC(I)/(XC(I)*ALOPT)
            XC(I)= -ALORC*LOG(XC(I))
           END DO
C
C GET ERROR FOR TRANSFORMED MESH
C
           ERRO=0.0D0
           DO IALP=1,NALTST
            ATMP=ALTST(IALP)
            DO IPOW=0,NPTST
             COMPARE(IPOW)=0.0D0
            END DO
            DO IPT=1,MPT
             X=XC(IPT)
             W=WC(IPT)
             FACT=EXP(-ATMP*X*X)
             DO IPOW=0,NPTST
              COMPARE(IPOW)=COMPARE(IPOW)+FACT*W
              FACT=FACT*X
             END DO
            END DO
            DO IPOW=0,NPTST
             X=(COMPARE(IPOW)-CORRECT(IPOW,IALP))*WEIGHT(IPOW,IALP)
             ERRO=MAX(ERRO,ABS(X))
            END DO
           END DO
C
C IF WE HAVE A SUCCESSFUL MESH, STORE IT IN XT, WT
C EBST CONTAINS ERROR OF BEST MESH SO FAR
C
           IF (ERRO .LT. EBST) THEN
            OK=.TRUE.
            ITYPE=2
            EBST=ERRO
            DO IPT=1,MPT
             XT(IPT)=XC(IPT)
             WT(IPT)=WC(IPT)
            END DO
           END IF
C
C IF THE ERROR FOR THE BEST MESH HAS CHANGED LESS THAN 1 PERCENT
C DURING THE LAST 5 ITERATIONS, STOP OPTIMIZING ALOPT
C
           ERT2=MIN(ERT2,ERRO)
           IF (MOD(IMN,5) .EQ. 0) THEN
            IF (ERT2 .GT. ERT1*0.99D0) GOTO 300
            ERT1=ERT2
           END IF
  200     CONTINUE
  300     IF (OK) GOTO 410
  400    CONTINUE
  410    CONTINUE
C
C STORE MESH POINTS IN RRET, WRET (MULTIPLY WEIGHTS BY R**2)
C
         IF (NPTS+MPT .GT. NSIZ) THEN
          PRINT *,'RADMSH: NSIZ EXCEEDED: ',NSIZ,NPTS+MPT
          CALL STOPIT
         END IF
         IF (ITYPE .EQ. 1) THEN
          DO IPT=1,MPT
           RRET(NPTS+IPT)=XT(IPT)
           WRET(NPTS+IPT)=WT(IPT)*XT(IPT)**2
          END DO
         ELSE
          IOFS=NPTS+MPT+1
          DO IPT=1,MPT
           RRET(IOFS-IPT)=XT(IPT)
           WRET(IOFS-IPT)=WT(IPT)*XT(IPT)**2
          END DO
         END IF
         NPTS=NPTS+MPT
  500    CONTINUE
C
C THE MESH WAS SUCCESSFUL, UPDATE RMIN AND RMAX
C
         IF (RMAX .NE. RB) THEN
          RMIN=RMAX
          RMAX=RB
          GOTO 10
         END IF
        CONTINUE
C
        RETURN
       END
C
C ***********************************************************
C
       SUBROUTINE ADDPTS(NSITES,R_NUC,DELR,WTR,ANGLE,DOMEGA,
     &                   NR,N_ANGLE)
C ORIGINAL VERSION BY MARK R PEDERSON (1989)
       INCLUDE 'PARAMS'
       INCLUDE 'commons.inc'
       PARAMETER (MXANG=400)
       DIMENSION R_NUC(3),ANGLE(3,N_ANGLE),DOMEGA(N_ANGLE)
       DIMENSION DELR(NR),WTR(NR)
       DIMENSION VEC(3),RVEC(3,MX_GRP),MSITES(1)
       DIMENSION INDEX(MX_GRP)
       DATA TOLER/1.0D-8/
C
C CALL GASITES AND CHECK PARAMETERS
C
       CALL GASITES(1,R_NUC,M_NUC,RVEC,MSITES)
       IF(MSITES(1).NE.NSITES)THEN
        PRINT*,'ADDPTS: MSITES AND NSITES ARE NOT EQUAL'
        CALL STOPIT
       END IF
       IF(N_ANGLE.GT.MXANG)THEN
        PRINT*,'ADDPTS: MXANG MUST BE AT LEAST: ',N_ANGLE
        CALL STOPIT
       END IF
C
C FIND GROUP ELEMENTS WHICH LEAVE R_NUC INVARIANT:
C
       MGRP=0
       DO 30 IGRP=1,NGRP
        DO 20 J=1,3
         VEC(J)=0.0D0
         DO 10 K=1,3
          VEC(J)=VEC(J)+RMAT(J,K,IGRP)*R_NUC(K)
   10    CONTINUE
   20   CONTINUE
        DVJ=SQRT((VEC(1)-R_NUC(1))**2+
     &           (VEC(2)-R_NUC(2))**2+
     &           (VEC(3)-R_NUC(3))**2)
        IF(DVJ .LT. TOLER)THEN
         MGRP=MGRP+1
         INDEX(MGRP)=IGRP
        END IF
   30  CONTINUE
C
C REDUCE ANGULAR MESH TO INEQUIVALENT POINTS
C
       DO 60 IANG=1,N_ANGLE
        IF (DOMEGA(IANG) .NE. 0.0D0) THEN
         DO 50 JANG=IANG+1,N_ANGLE
          IF (DOMEGA(JANG) .NE. 0.0D0) THEN
           DO 40 JGRP=1,MGRP
            IGRP=INDEX(JGRP)
            DO J=1,3
             VEC(J)=0.0D0
             DO K=1,3
              VEC(J)=VEC(J)+RMAT(J,K,IGRP)*ANGLE(K,JANG)
             END DO
            END DO
            DIST=(VEC(1)-ANGLE(1,IANG))**2
     &          +(VEC(2)-ANGLE(2,IANG))**2
     &          +(VEC(3)-ANGLE(3,IANG))**2
            IF (DIST .LT. TOLER*TOLER) THEN
             DOMEGA(IANG)=DOMEGA(IANG)+DOMEGA(JANG)
             DOMEGA(JANG)=0.0D0
             GOTO 50
            END IF
   40      CONTINUE
          END IF
   50    CONTINUE
        END IF
   60  CONTINUE
       MANG=0
       DO IANG=1,N_ANGLE
        IF (DOMEGA(IANG) .NE. 0.0D0) THEN
         MANG=MANG+1
         DOMEGA(MANG)=DOMEGA(IANG)
         ANGLE(1,MANG)=ANGLE(1,IANG)
         ANGLE(2,MANG)=ANGLE(2,IANG)
         ANGLE(3,MANG)=ANGLE(3,IANG)
        END IF
       END DO
C
C FILL RMSH AND WMSH
C
       DO 100 IRAD=1,NR
        RR=DELR(IRAD)
        DVOL=WTR(IRAD)
        DO J=1,MANG
         NMSH=NMSH+1
         RMSH(1,NMSH)= RR*ANGLE(1,J)+R_NUC(1)
         RMSH(2,NMSH)= RR*ANGLE(2,J)+R_NUC(2)
         RMSH(3,NMSH)= RR*ANGLE(3,J)+R_NUC(3)
         WMSH(NMSH) = DOMEGA(J)*DVOL*NSITES
        END DO  
  100  CONTINUE
       RETURN 
       END
C
C ***********************************************************
C
C GAUSSP CREATES A N-POINT GAUSS-LEGENDRE MESH SUITABLE FOR THE 
C INTEGRATION OF POLYNOMIALS OF DEGREE 2*N-1 IN THE INTERVAL (Y1,Y2)
C
       SUBROUTINE GAUSSP(Y1,Y2,N,Y,WY)
        IMPLICIT REAL*8 (A-H,O-Z)
        DIMENSION Y(N),WY(N)
        PARAMETER (EPS=1.0D-14)
        PARAMETER (MAX=1000)
        DIMENSION X(MAX),W(MAX)
        SAVE
        DATA N_SAV/-1/
        DATA PI/3.14159265358979323844D0/
C
        IF (N. LE. 0) RETURN
        IF (N .GT. MAX) THEN
         PRINT*,'GAUSSP: MAX MUST BE AT LEAST: ',N
         CALL STOPIT
        END IF
        IF (N .EQ. 1) THEN
         WY(1)=Y2-Y1
         Y(1)=0.5D0*(Y2+Y1)
         RETURN
        END IF
C
C FIRST TRY PRESTORED MESHES
C IF NONE OF THEM MATCHES, DEFINE MESH VIA ITERATION OF CHEBYSHEV POINTS
C POINTS/WEIGHTS WILL BE DEFINED FOR INTERVAL (-1:1)
C
        IF (N .NE. N_SAV) THEN
         N_SAV=N
         M=N
         CALL GAUSSPP(M,X,W)
         IF (M .NE. N) THEN
          M=(N+1)/2
          DO I=1,M
           Y(I)=COS(PI*(I-0.25D0)/(N+0.5D0))
          END DO
          DO 100 I=1,M
           Z=Y(I)
  20       CONTINUE
            P1=1.0D0
            P2=0.0D0
            DO J=1,N
             P3=P2
             P2=P1
             P1=((2*J-1)*Z*P2-(J-1)*P3)/J
            END DO
            PP=N*(Z*P1-P2)/(Z*Z-1.0D0)
            Z1=Z
            Z=Z1-P1/PP
            IF (ABS(Z-Z1).GT.EPS) GOTO 20
           CONTINUE
           X(I)    = -Z
           X(N+1-I)=  Z
           W(I)=2.0D0/((1.0D0-Z*Z)*PP*PP)
           W(N+1-I)=W(I)
 100      CONTINUE
         END IF
        END IF
C
C SCALE WEIGHTS AND POINTS:
C
        DO I=1,N
         FACT= 0.5D0*(Y2-Y1)
         Y (I)= Y1+FACT*(X(I)+1.0D0)
         WY(I)= FACT*W(I)
        END DO
        RETURN
        END
C
C ******************************************************************
C
      SUBROUTINE GAUSSPP(NPT,XPT,WHT)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION XPT(*),WHT(*)
C
C     THIS ROUTINE SETS UP ABSCISSAE AND WEIGHTS FOR NPT-POINT
C       GAUSS-LEGENDRE INTEGRATION IN THE INTERVAL (-1,1).
C
C     ON RETURN, THE FUNCTION TO BE INTEGRATED SHOULD BE EVALUATED
C       AT THE POINTS XPT(I).  INTEGRAL = SUM(I=1,NPT) F(XPT(I))*WHT(I).
C
C     FOR NPT=1-14:  VALUES FROM Z. KOPAL, NUMERICAL ANALYSIS, 1961, A4
C         NPT=16-64: FROM ALCHEMY GAUSS ROUTINE
C         NPT=96:    FROM DECK OF R. NERF JUNE 1973.
C
      DIMENSION IOK(22),IST(22)
      DIMENSION X(239),W(239)
      DIMENSION X2(1),W2(1)
      DIMENSION X3(2),W3(2)
      DIMENSION X4(2),W4(2)
      DIMENSION X5(3),W5(3)
      DIMENSION X6(3),W6(3)
      DIMENSION X7(4),W7(4)
      DIMENSION X8(4),W8(4)
      DIMENSION X9(5),W9(5)
      DIMENSION X10(5),W10(5)
      DIMENSION X11(6),W11(6)
      DIMENSION X12(6),W12(6)
      DIMENSION X13(7),W13(7)
      DIMENSION X14(7),W14(7)
      DIMENSION X16(8),W16(8)
      DIMENSION X20(10),W20(10)
      DIMENSION X24(12),W24(12)
      DIMENSION X28(14),W28(14)
      DIMENSION X32(16),W32(16)
      DIMENSION X40(20),W40(20)
      DIMENSION X48(24),W48(24)
      DIMENSION X64(32),W64(32)
      DIMENSION X96(48),W96(48)
      EQUIVALENCE(X2(1), X(  1)),(W2(1), W(  1))
      EQUIVALENCE(X3(1), X(  2)),(W3(1), W(  2))
      EQUIVALENCE(X4(1), X(  4)),(W4(1), W(  4))
      EQUIVALENCE(X5(1), X(  6)),(W5(1), W(  6))
      EQUIVALENCE(X6(1), X(  9)),(W6(1), W(  9))
      EQUIVALENCE(X7(1), X( 12)),(W7(1), W( 12))
      EQUIVALENCE(X8(1), X( 16)),(W8(1), W( 16))
      EQUIVALENCE(X9(1), X( 20)),(W9(1), W( 20))
      EQUIVALENCE(X10(1),X( 25)),(W10(1),W( 25))
      EQUIVALENCE(X11(1),X( 30)),(W11(1),W( 30))
      EQUIVALENCE(X12(1),X( 36)),(W12(1),W( 36))
      EQUIVALENCE(X13(1),X( 42)),(W13(1),W( 42))
      EQUIVALENCE(X14(1),X( 49)),(W14(1),W( 49))
      EQUIVALENCE(X16(1),X( 56)),(W16(1),W( 56))
      EQUIVALENCE(X20(1),X( 64)),(W20(1),W( 64))
      EQUIVALENCE(X24(1),X( 74)),(W24(1),W( 74))
      EQUIVALENCE(X28(1),X( 86)),(W28(1),W( 86))
      EQUIVALENCE(X32(1),X(100)),(W32(1),W(100))
      EQUIVALENCE(X40(1),X(116)),(W40(1),W(116))
      EQUIVALENCE(X48(1),X(136)),(W48(1),W(136))
      EQUIVALENCE(X64(1),X(160)),(W64(1),W(160))
      EQUIVALENCE(X96(1),X(192)),(W96(1),W(192))
      SAVE
C
C MX: TOTAL NUMBER OF STORED MESHES
C IOK: NUMBER OF POINTS FOR STORED MESHES
C IST: START INDEX FOR STORED MESHES IN ARRAYS X,W
C
      DATA MX/22/
      DATA IOK/2,3,4,5,6,7,8,9,10,11,12,13,
     &         14,16,20,24,28,32,40,48,64,96/
      DATA IST/1,2,4,6,9,12,16,20,25,30,36,42,
     &         49,56,64,74,86,100,116,136,160,192/
C
      DATA X2 ( 1)/0.577350269189626D+0/,W2( 1) /0.999999999999999D+0/
      DATA X3 ( 1)/0.774596669241483D+0/,W3( 1) /0.555555555555556D+0/
      DATA X3 ( 2)/0.0              D+0/,W3( 2) /0.888888888888889D+0/
      DATA X4 ( 1)/0.861136311594053D+0/,W4( 1) /0.347854845137454D+0/
      DATA X4 ( 2)/0.339981043584856D+0/,W4( 2) /0.652145154862546D+0/
      DATA X5 ( 1)/0.906179845938664D+0/,W5( 1) /0.236926885056189D+0/
      DATA X5 ( 2)/0.538469310105683D+0/,W5( 2) /0.478628670499366D+0/
      DATA X5 ( 3)/0.0              D+0/,W5( 3) /0.568888888888889D+0/
      DATA X6 ( 1)/0.932469514203152D+0/,W6( 1) /0.171324492379170D+0/
      DATA X6 ( 2)/0.661209386466265D+0/,W6( 2) /0.360761573048139D+0/
      DATA X6 ( 3)/0.238619186083197D+0/,W6( 3) /0.467913934572691D+0/
      DATA X7 ( 1)/0.949107912342759D+0/,W7( 1) /0.129484966168870D+0/
      DATA X7 ( 2)/0.741531185599394D+0/,W7( 2) /0.279705391489277D+0/
      DATA X7 ( 3)/0.405845151377397D+0/,W7( 3) /0.381830050505119D+0/
      DATA X7 ( 4)/0.0              D+0/,W7( 4) /0.417959183673469D+0/
      DATA X8 ( 1)/0.960289856497536D+0/,W8( 1) /0.101228536290376D+0/
      DATA X8 ( 2)/0.796666477413627D+0/,W8( 2) /0.222381034453374D+0/
      DATA X8 ( 3)/0.525532409916329D+0/,W8( 3) /0.313706645877887D+0/
      DATA X8 ( 4)/0.183434642495650D+0/,W8( 4) /0.362683783378362D+0/
      DATA X9 ( 1)/0.968160239507626D+0/,W9( 1) /0.812743883615739D-1/
      DATA X9 ( 2)/0.836031107326636D+0/,W9( 2) /0.180648160694857D+0/
      DATA X9 ( 3)/0.613371432700590D+0/,W9( 3) /0.260610696402935D+0/
      DATA X9 ( 4)/0.324253423403809D+0/,W9( 4) /0.312347077040003D+0/
      DATA X9 ( 5)/0.0              D+0/,W9( 5) /0.330239355001260D+0/
      DATA X10( 1)/0.973906528517172D+0/,W10( 1)/0.666713443086879D-1/
      DATA X10( 2)/0.865063366688985D+0/,W10( 2)/0.149451349150581D+0/
      DATA X10( 3)/0.679409568299024D+0/,W10( 3)/0.219086362515982D+0/
      DATA X10( 4)/0.433395394129247D+0/,W10( 4)/0.269266719309996D+0/
      DATA X10( 5)/0.148874338981631D+0/,W10( 5)/0.295524224714753D+0/
      DATA X11( 1)/0.978228658146057D+0/,W11( 1)/0.556685671161740D-1/
      DATA X11( 2)/0.887062599768095D+0/,W11( 2)/0.125580369464905D+0/
      DATA X11( 3)/0.730152005574049D+0/,W11( 3)/0.186290210927734D+0/
      DATA X11( 4)/0.519096129206812D+0/,W11( 4)/0.233193764591990D+0/
      DATA X11( 5)/0.269543155952345D+0/,W11( 5)/0.262804544510247D+0/
      DATA X11( 6)/0.0              D+0/,W11( 6)/0.272925086777901D+0/
      DATA X12( 1)/0.981560634246719D+0/,W12( 1)/0.471753363865120D-1/
      DATA X12( 2)/0.904117256370475D+0/,W12( 2)/0.106939325995318D+0/
      DATA X12( 3)/0.769902674194305D+0/,W12( 3)/0.160078328543346D+0/
      DATA X12( 4)/0.587317954286617D+0/,W12( 4)/0.203167426723066D+0/
      DATA X12( 5)/0.367831498998180D+0/,W12( 5)/0.233492536538355D+0/
      DATA X12( 6)/0.125233408511469D+0/,W12( 6)/0.249147045813403D+0/
      DATA X13( 1)/0.984183054718588D+0/,W13( 1)/0.404840047653160D-1/
      DATA X13( 2)/0.917598399222978D+0/,W13( 2)/0.921214998377279D-1/
      DATA X13( 3)/0.801578090733310D+0/,W13( 3)/0.138873510219787D+0/
      DATA X13( 4)/0.642349339440340D+0/,W13( 4)/0.178145980761946D+0/
      DATA X13( 5)/0.448492751036447D+0/,W13( 5)/0.207816047536889D+0/
      DATA X13( 6)/0.230458315955135D+0/,W13( 6)/0.226283180262897D+0/
      DATA X13( 7)/0.0              D+0/,W13( 7)/0.232551553230874D+0/
      DATA X14( 1)/0.986283808696812D+0/,W14( 1)/0.351194603317520D-1/
      DATA X14( 2)/0.928434883663574D+0/,W14( 2)/0.801580871597599D-1/
      DATA X14( 3)/0.827201315069765D+0/,W14( 3)/0.121518570687903D+0/
      DATA X14( 4)/0.687292904811685D+0/,W14( 4)/0.157203167158194D+0/
      DATA X14( 5)/0.515248636358154D+0/,W14( 5)/0.185538397477938D+0/
      DATA X14( 6)/0.319112368927890D+0/,W14( 6)/0.205198463721296D+0/
      DATA X14( 7)/0.108054948707344D+0/,W14( 7)/0.215263853463158D+0/
      DATA X16( 1)/0.989400934991650D+0/,W16( 1)/0.271524594117540D-1/
      DATA X16( 2)/0.944575023073232D+0/,W16( 2)/0.622535239386480D-1/
      DATA X16( 3)/0.865631202387832D+0/,W16( 3)/0.951585116824929D-1/
      DATA X16( 4)/0.755404408355003D+0/,W16( 4)/0.124628971255534D+0/
      DATA X16( 5)/0.617876244402644D+0/,W16( 5)/0.149595988816577D+0/
      DATA X16( 6)/0.458016777657227D+0/,W16( 6)/0.169156519395002D+0/
      DATA X16( 7)/0.281603550779259D+0/,W16( 7)/0.182603415044923D+0/
      DATA X16( 8)/0.950125098376369D-1/,W16( 8)/0.189450610455068D+0/
      DATA X20( 1)/0.993128599185095D+0/,W20( 1)/0.176140071391520D-1/
      DATA X20( 2)/0.963971927277914D+0/,W20( 2)/0.406014298003870D-1/
      DATA X20( 3)/0.912234428251326D+0/,W20( 3)/0.626720483341089D-1/
      DATA X20( 4)/0.839116971822219D+0/,W20( 4)/0.832767415767049D-1/
      DATA X20( 5)/0.746331906460151D+0/,W20( 5)/0.101930119817240D+0/
      DATA X20( 6)/0.636053680726515D+0/,W20( 6)/0.118194531961518D+0/
      DATA X20( 7)/0.510867001950827D+0/,W20( 7)/0.131688638449177D+0/
      DATA X20( 8)/0.373706088715419D+0/,W20( 8)/0.142096109318382D+0/
      DATA X20( 9)/0.227785851141645D+0/,W20( 9)/0.149172986472604D+0/
      DATA X20(10)/0.765265211334969D-1/,W20(10)/0.152753387130726D+0/
      DATA X24( 1)/0.995187219997021D+0/,W24( 1)/0.123412297999870D-1/
      DATA X24( 2)/0.974728555971309D+0/,W24( 2)/0.285313886289340D-1/
      DATA X24( 3)/0.938274552002733D+0/,W24( 3)/0.442774388174200D-1/
      DATA X24( 4)/0.886415527004401D+0/,W24( 4)/0.592985849154370D-1/
      DATA X24( 5)/0.820001985973903D+0/,W24( 5)/0.733464814110799D-1/
      DATA X24( 6)/0.740124191578554D+0/,W24( 6)/0.861901615319529D-1/
      DATA X24( 7)/0.648093651936975D+0/,W24( 7)/0.976186521041139D-1/
      DATA X24( 8)/0.545421471388839D+0/,W24( 8)/0.107444270115966D+0/
      DATA X24( 9)/0.433793507626045D+0/,W24( 9)/0.115505668053726D+0/
      DATA X24(10)/0.315042679696163D+0/,W24(10)/0.121670472927803D+0/
      DATA X24(11)/0.191118867473616D+0/,W24(11)/0.125837456346828D+0/
      DATA X24(12)/0.640568928626059D-1/,W24(12)/0.127938195346752D+0/
      DATA X28( 1)/0.996442497573954D+0/,W28( 1)/0.912428259309400D-2/
      DATA X28( 2)/0.981303165370873D+0/,W28( 2)/0.211321125927710D-1/
      DATA X28( 3)/0.954259280628938D+0/,W28( 3)/0.329014277823040D-1/
      DATA X28( 4)/0.915633026392132D+0/,W28( 4)/0.442729347590040D-1/
      DATA X28( 5)/0.865892522574395D+0/,W28( 5)/0.551073456757170D-1/
      DATA X28( 6)/0.805641370917179D+0/,W28( 6)/0.652729239669989D-1/
      DATA X28( 7)/0.735610878013632D+0/,W28( 7)/0.746462142345689D-1/
      DATA X28( 8)/0.656651094038865D+0/,W28( 8)/0.831134172289009D-1/
      DATA X28( 9)/0.569720471811402D+0/,W28( 9)/0.905717443930329D-1/
      DATA X28(10)/0.475874224955118D+0/,W28(10)/0.969306579979299D-1/
      DATA X28(11)/0.376251516089079D+0/,W28(11)/0.102112967578061D+0/
      DATA X28(12)/0.272061627635178D+0/,W28(12)/0.106055765922846D+0/
      DATA X28(13)/0.164569282133381D+0/,W28(13)/0.108711192258294D+0/
      DATA X28(14)/0.550792898840340D-1/,W28(14)/0.110047013016475D+0/
      DATA X32( 1)/0.997263861849481D+0/,W32( 1)/0.701861000947000D-2/
      DATA X32( 2)/0.985611511545268D+0/,W32( 2)/0.162743947309060D-1/
      DATA X32( 3)/0.964762255587506D+0/,W32( 3)/0.253920653092620D-1/
      DATA X32( 4)/0.934906075937740D+0/,W32( 4)/0.342738629130210D-1/
      DATA X32( 5)/0.896321155766052D+0/,W32( 5)/0.428358980222270D-1/
      DATA X32( 6)/0.849367613732570D+0/,W32( 6)/0.509980592623760D-1/
      DATA X32( 7)/0.794483795967942D+0/,W32( 7)/0.586840934785350D-1/
      DATA X32( 8)/0.732182118740290D+0/,W32( 8)/0.658222227763619D-1/
      DATA X32( 9)/0.663044266930215D+0/,W32( 9)/0.723457941088479D-1/
      DATA X32(10)/0.587715757240762D+0/,W32(10)/0.781938957870699D-1/
      DATA X32(11)/0.506899908932229D+0/,W32(11)/0.833119242269469D-1/
      DATA X32(12)/0.421351276130635D+0/,W32(12)/0.876520930044039D-1/
      DATA X32(13)/0.331868602282128D+0/,W32(13)/0.911738786957639D-1/
      DATA X32(14)/0.239287362252137D+0/,W32(14)/0.938443990808039D-1/
      DATA X32(15)/0.144471961582796D+0/,W32(15)/0.956387200792749D-1/
      DATA X32(16)/0.483076656877380D-1/,W32(16)/0.965400885147279D-1/
      DATA X40( 1)/0.998237709710559D+0/,W40( 1)/0.452127709853300D-2/
      DATA X40( 2)/0.990726238699457D+0/,W40( 2)/0.104982845311530D-1/
      DATA X40( 3)/0.977259949983774D+0/,W40( 3)/0.164210583819080D-1/
      DATA X40( 4)/0.957916819213792D+0/,W40( 4)/0.222458491941670D-1/
      DATA X40( 5)/0.932812808278676D+0/,W40( 5)/0.279370069800230D-1/
      DATA X40( 6)/0.902098806968874D+0/,W40( 6)/0.334601952825480D-1/
      DATA X40( 7)/0.865959503212259D+0/,W40( 7)/0.387821679744720D-1/
      DATA X40( 8)/0.824612230833312D+0/,W40( 8)/0.438709081856730D-1/
      DATA X40( 9)/0.778305651426519D+0/,W40( 9)/0.486958076350720D-1/
      DATA X40(10)/0.727318255189927D+0/,W40(10)/0.532278469839370D-1/
      DATA X40(11)/0.671956684614179D+0/,W40(11)/0.574397690993910D-1/
      DATA X40(12)/0.612553889667980D+0/,W40(12)/0.613062424929290D-1/
      DATA X40(13)/0.549467125095128D+0/,W40(13)/0.648040134566009D-1/
      DATA X40(14)/0.483075801686179D+0/,W40(14)/0.679120458152339D-1/
      DATA X40(15)/0.413779204371605D+0/,W40(15)/0.706116473912869D-1/
      DATA X40(16)/0.341994090825758D+0/,W40(16)/0.728865823958039D-1/
      DATA X40(17)/0.268152185007254D+0/,W40(17)/0.747231690579679D-1/
      DATA X40(18)/0.192697580701371D+0/,W40(18)/0.761103619006259D-1/
      DATA X40(19)/0.116084070675255D+0/,W40(19)/0.770398181642479D-1/
      DATA X40(20)/0.387724175060510D-1/,W40(20)/0.775059479784249D-1/
      DATA X48( 1)/0.998771007252426D+0/,W48( 1)/0.315334605230600D-2/
      DATA X48( 2)/0.993530172266351D+0/,W48( 2)/0.732755390127600D-2/
      DATA X48( 3)/0.984124583722827D+0/,W48( 3)/0.114772345792340D-1/
      DATA X48( 4)/0.970591592546247D+0/,W48( 4)/0.155793157229440D-1/
      DATA X48( 5)/0.952987703160431D+0/,W48( 5)/0.196161604573550D-1/
      DATA X48( 6)/0.931386690706554D+0/,W48( 6)/0.235707608393240D-1/
      DATA X48( 7)/0.905879136715570D+0/,W48( 7)/0.274265097083570D-1/
      DATA X48( 8)/0.876572020274248D+0/,W48( 8)/0.311672278327980D-1/
      DATA X48( 9)/0.843588261624393D+0/,W48( 9)/0.347772225647700D-1/
      DATA X48(10)/0.807066204029443D+0/,W48(10)/0.382413510658310D-1/
      DATA X48(11)/0.767159032515740D+0/,W48(11)/0.415450829434650D-1/
      DATA X48(12)/0.724034130923815D+0/,W48(12)/0.446745608566940D-1/
      DATA X48(13)/0.677872379632664D+0/,W48(13)/0.476166584924900D-1/
      DATA X48(14)/0.628867396776514D+0/,W48(14)/0.503590355538540D-1/
      DATA X48(15)/0.577224726083973D+0/,W48(15)/0.528901894851940D-1/
      DATA X48(16)/0.523160974722233D+0/,W48(16)/0.551995036999840D-1/
      DATA X48(17)/0.466902904750958D+0/,W48(17)/0.572772921004030D-1/
      DATA X48(18)/0.408686481990717D+0/,W48(18)/0.591148396983960D-1/
      DATA X48(19)/0.348755886292161D+0/,W48(19)/0.607044391658940D-1/
      DATA X48(20)/0.287362487355455D+0/,W48(20)/0.620394231598930D-1/
      DATA X48(21)/0.224763790394689D+0/,W48(21)/0.631141922862539D-1/
      DATA X48(22)/0.161222356068892D+0/,W48(22)/0.639242385846479D-1/
      DATA X48(23)/0.970046992094629D-1/,W48(23)/0.644661644359499D-1/
      DATA X48(24)/0.323801709628690D-1/,W48(24)/0.647376968126839D-1/
      DATA X64( 1)/0.999305041735772D+0/,W64( 1)/0.178328072169600D-2/
      DATA X64( 2)/0.996340116771955D+0/,W64( 2)/0.414703326056200D-2/
      DATA X64( 3)/0.991013371476744D+0/,W64( 3)/0.650445796897800D-2/
      DATA X64( 4)/0.983336253884626D+0/,W64( 4)/0.884675982636400D-2/
      DATA X64( 5)/0.973326827789911D+0/,W64( 5)/0.111681394601310D-1/
      DATA X64( 6)/0.961008799652054D+0/,W64( 6)/0.134630478967190D-1/
      DATA X64( 7)/0.946411374858403D+0/,W64( 7)/0.157260304760250D-1/
      DATA X64( 8)/0.929569172131939D+0/,W64( 8)/0.179517157756970D-1/
      DATA X64( 9)/0.910522137078503D+0/,W64( 9)/0.201348231535300D-1/
      DATA X64(10)/0.889315445995114D+0/,W64(10)/0.222701738083830D-1/
      DATA X64(11)/0.865999398154093D+0/,W64(11)/0.243527025687110D-1/
      DATA X64(12)/0.840629296252580D+0/,W64(12)/0.263774697150550D-1/
      DATA X64(13)/0.813265315122797D+0/,W64(13)/0.283396726142590D-1/
      DATA X64(14)/0.783972358943341D+0/,W64(14)/0.302346570724020D-1/
      DATA X64(15)/0.752819907260532D+0/,W64(15)/0.320579283548510D-1/
      DATA X64(16)/0.719881850171611D+0/,W64(16)/0.338051618371420D-1/
      DATA X64(17)/0.685236313054233D+0/,W64(17)/0.354722132568820D-1/
      DATA X64(18)/0.648965471254657D+0/,W64(18)/0.370551285402400D-1/
      DATA X64(19)/0.611155355172393D+0/,W64(19)/0.385501531786160D-1/
      DATA X64(20)/0.571895646202634D+0/,W64(20)/0.399537411327200D-1/
      DATA X64(21)/0.531279464019894D+0/,W64(21)/0.412625632426230D-1/
      DATA X64(22)/0.489403145707053D+0/,W64(22)/0.424735151236530D-1/
      DATA X64(23)/0.446366017253464D+0/,W64(23)/0.435837245293230D-1/
      DATA X64(24)/0.402270157963992D+0/,W64(24)/0.445905581637560D-1/
      DATA X64(25)/0.357220158337668D+0/,W64(25)/0.454916279274180D-1/
      DATA X64(26)/0.311322871990211D+0/,W64(26)/0.462847965813140D-1/
      DATA X64(27)/0.264687162208767D+0/,W64(27)/0.469681828162100D-1/
      DATA X64(28)/0.217423643740007D+0/,W64(28)/0.475401657148300D-1/
      DATA X64(29)/0.169644420423993D+0/,W64(29)/0.479993885964580D-1/
      DATA X64(30)/0.121462819296120D+0/,W64(30)/0.483447622348030D-1/
      DATA X64(31)/0.729931217877989D-1/,W64(31)/0.485754674415030D-1/
      DATA X64(32)/0.243502926634240D-1/,W64(32)/0.486909570091400D-1/
      DATA X96( 1)/0.999689503883230D+0/,W96( 1)/0.796792065552010D-3/
      DATA X96( 2)/0.998364375863181D+0/,W96( 2)/0.185396078894692D-2/
      DATA X96( 3)/0.995981842987209D+0/,W96( 3)/0.291073181793495D-2/
      DATA X96( 4)/0.992543900323762D+0/,W96( 4)/0.396455433844469D-2/
      DATA X96( 5)/0.988054126329623D+0/,W96( 5)/0.501420274292752D-2/
      DATA X96( 6)/0.982517263563014D+0/,W96( 6)/0.605854550423596D-2/
      DATA X96( 7)/0.975939174585136D+0/,W96( 7)/0.709647079115386D-2/
      DATA X96( 8)/0.968326828463264D+0/,W96( 8)/0.812687692569876D-2/
      DATA X96( 9)/0.959688291448742D+0/,W96( 9)/0.914867123078339D-2/
      DATA X96(10)/0.950032717784437D+0/,W96(10)/0.101607705350080D-1/
      DATA X96(11)/0.939370339752755D+0/,W96(11)/0.111621020998380D-1/
      DATA X96(12)/0.927712456722308D+0/,W96(12)/0.121516046710880D-1/
      DATA X96(13)/0.915071423120898D+0/,W96(13)/0.131282295669610D-1/
      DATA X96(14)/0.901460635315852D+0/,W96(14)/0.140909417723140D-1/
      DATA X96(15)/0.886894517402420D+0/,W96(15)/0.150387210269940D-1/
      DATA X96(16)/0.871388505909296D+0/,W96(16)/0.159705629025620D-1/
      DATA X96(17)/0.854959033434601D+0/,W96(17)/0.168854798642450D-1/
      DATA X96(18)/0.837623511228187D+0/,W96(18)/0.177825023160450D-1/
      DATA X96(19)/0.819400310737931D+0/,W96(19)/0.186606796274110D-1/
      DATA X96(20)/0.800308744139140D+0/,W96(20)/0.195190811401450D-1/
      DATA X96(21)/0.780369043867433D+0/,W96(21)/0.203567971543330D-1/
      DATA X96(22)/0.759602341176647D+0/,W96(22)/0.211729398921910D-1/
      DATA X96(23)/0.738030643744400D+0/,W96(23)/0.219666444387440D-1/
      DATA X96(24)/0.715676812348967D+0/,W96(24)/0.227370696583290D-1/
      DATA X96(25)/0.692564536642171D+0/,W96(25)/0.234833990859260D-1/
      DATA X96(26)/0.668718310043916D+0/,W96(26)/0.242048417923640D-1/
      DATA X96(27)/0.644163403784967D+0/,W96(27)/0.249006332224830D-1/
      DATA X96(28)/0.618925840125468D+0/,W96(28)/0.255700360053490D-1/
      DATA X96(29)/0.593032364777572D+0/,W96(29)/0.262123407356720D-1/
      DATA X96(30)/0.566510418561397D+0/,W96(30)/0.268268667255910D-1/
      DATA X96(31)/0.539388108324357D+0/,W96(31)/0.274129627260290D-1/
      DATA X96(32)/0.511694177154667D+0/,W96(32)/0.279700076168480D-1/
      DATA X96(33)/0.483457973920596D+0/,W96(33)/0.284974110650850D-1/
      DATA X96(34)/0.454709422167743D+0/,W96(34)/0.289946141505550D-1/
      DATA X96(35)/0.425478988407300D+0/,W96(35)/0.294610899581670D-1/
      DATA X96(36)/0.395797649828908D+0/,W96(36)/0.298963441363280D-1/
      DATA X96(37)/0.365696861472313D+0/,W96(37)/0.302999154208270D-1/
      DATA X96(38)/0.335208522892625D+0/,W96(38)/0.306713761236690D-1/
      DATA X96(39)/0.304364944354496D+0/,W96(39)/0.310103325863130D-1/
      DATA X96(40)/0.273198812591049D+0/,W96(40)/0.313164255968610D-1/
      DATA X96(41)/0.241743156163840D+0/,W96(41)/0.315893307707270D-1/
      DATA X96(42)/0.210031310460567D+0/,W96(42)/0.318287588944110D-1/
      DATA X96(43)/0.178096882367618D+0/,W96(43)/0.320344562319920D-1/
      DATA X96(44)/0.145973714654896D+0/,W96(44)/0.322062047940300D-1/
      DATA X96(45)/0.113695850110665D+0/,W96(45)/0.323438225685750D-1/
      DATA X96(46)/0.812974954644249D-1/,W96(46)/0.324471637140640D-1/
      DATA X96(47)/0.488129851360490D-1/,W96(47)/0.325161187138680D-1/
      DATA X96(48)/0.162767448496020D-1/,W96(48)/0.325506144923630D-1/
C
C * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
C
      IF (NPT .LE. 0) RETURN
      IF (NPT .EQ. 1) THEN
       XPT(1)= 0.0D0
       WHT(1)= 2.0D0
       RETURN
      END IF
C
C LOOK IF MESH IS STORED
C
      DO I=1,MX
       IF (IOK(I) .EQ. NPT) GOTO 10
       IF (IOK(I) .LT. NPT) MXTRY=I
      END DO  
      NPT=IOK(MXTRY)
      I=MXTRY
   10 CONTINUE
C
C SET UP NORMAL GAUSS-LEGENDRE MESH
C FOR NPT ODD, THE LAST (I.E. MIDDLE) TERM IS EVALUATED TWICE.
C
      N2=(NPT+1)/2
      IC=IST(I)-1
      IOF=NPT+1
      DO I=1,N2
       XPT(I)=     -X(IC+I)
       XPT(IOF-I)=  X(IC+I)
       WHT(I)=      W(IC+I)
       WHT(IOF-I)=  W(IC+I)
      END DO
      RETURN
      END
C
C ***********************************************************
C
       SUBROUTINE BFSA(MAXPTS,LMAX,NPTS,ANGLE,WTS)
C WRITTEN BY MARK R PEDERSON  (1992-1994)
        IMPLICIT REAL*8 (A-H,O-Z)
        PARAMETER(MAXANG=500)
        DIMENSION X(MAXANG),Z(MAXANG),WTX(MAXANG),WTZ(MAXANG)
        DIMENSION ANGLE(3,MAXPTS),WTS(MAXPTS)
        SAVE
C
C SETUP SOME STUFF AND CHECK INPUT
C
        IF (LMAX.LT.0) RETURN
        N1= (LMAX+2)/2
        LMAX1=LMAX+1
        NPTS=N1*LMAX1
        IF (LMAX1 .GT. MAXANG) THEN
         PRINT *,'BFSA: MAXANG MUST BE AT LEAST ',LMAX1
         CALL STOPIT
        END IF
        IF (NPTS.GT.MAXPTS) THEN
         PRINT *,'BFSA: SIZE OF ARRAY ANGLE EXCEEDED'
         CALL STOPIT
        END IF
C
C THETA MESH
C
        DN= -1.0D0
        UP= 1.0D0
        CALL GAUSSP(DN,UP,N1,Z,WTZ)
        DO I=1,N1
         Z(I)= ACOS(Z(I))
        END DO
C
C PHI MESH
C
        PI=4*ATAN(1.0D0)
        ALMAX=LMAX1
        DPHI=(2*PI)/ALMAX
        PHI= -0.5D0*DPHI
        DO I=1,LMAX1
         PHI=PHI+DPHI
         X(I)=PHI
         WTX(I)=DPHI
        END DO
C
C SPHERE MESH
C
        NPTS=0
        DO I=1,LMAX1
         DO J=1,N1
          NPTS=NPTS+1
          ANGLE(1,NPTS)=SIN(Z(J))*SIN(X(I))
          ANGLE(2,NPTS)=SIN(Z(J))*COS(X(I))
          ANGLE(3,NPTS)=COS(Z(J))
          WTS(NPTS)=WTX(I)*WTZ(J)
         END DO
        END DO
        RETURN
       END
C
C ****************************************************************
C
       SUBROUTINE STROUD(MAXPTS,LMAX,NPTS,ANGLE,DOMEGA)
C ORIGINAL VERSION BY MARK R PEDERSON (1989)
        IMPLICIT REAL*8 (A-H,O-Z)
C
C SOME REALLY GOOD MESHES OUT OF:
C
C A.H. STROUD "APPROXIMATE CALCULATION OF MULTIPLE INTEGRALS"
C              PRENTICE-HALL SERIES IN AUTOMATIC COMPUTATION
C SEE PAGES 294-299
C
C U3:  5-1 12 PT MESH OF DEGREE  5 
C U3:  9-1 32 PT MESH OF DEGREE  9 
C U3: 14-1 72 PT MESH OF DEGREE 14
C
        DIMENSION ANGLE(3,MAXPTS),DOMEGA(MAXPTS)
        DIMENSION XS14(3,5)
        SAVE
        DATA XS14/ -0.15110827466456159D0, 0.15524060002531609D0,
     &              0.97625132288344653D0,
     &              0.31583835294225182D0, 0.25704938737035939D0,
     &              0.91333003195079960D0,
     &              0.34630711173365857D0, 0.66627779003666489D0,
     &              0.66041296994119471D0,
     &             -0.10180878734504331D0, 0.81738606470122647D0,
     &              0.56702292021714103D0,
     &             -0.40922840266630550D0, 0.50154771175897465D0,
     &              0.76222175728623802D0/
C
C CHECK SIZES
C
        PI=4*ATAN(1.0D0)
        NPTS=0
        IF(LMAX.LE.5)THEN 
         NPTS=12
        ELSE IF(LMAX.LE.9)THEN
         NPTS=32
        ELSE IF(LMAX.LE.14)THEN
         NPTS=72
        END IF
        IF (NPTS.GT.MAXPTS) THEN
         PRINT *,'STROUD: SIZE OF ARRAY ANGLE EXCEEDED'
         CALL STOPIT
        END IF
        NPTS=0
C
C MESH OF DEGREE 5 
C
        IF(LMAX.LE.5)THEN 
         NPTS=0
         WTMP=(1.0D0/3.0D0)*PI
         ANG1= 0.85065080835203988D0
         ANG2= 0.52573111211913359D0
         DO 30 ISW=1,3
          K1= 1+MOD(ISW-1,3)
          K2= 1+MOD(ISW  ,3)
          K3= 1+MOD(ISW+1,3)
          DO 20 I1=1,2
           ANG1= -ANG1
           DO 10 I2=1,2
            NPTS=NPTS+1
            ANG2= -ANG2
            ANGLE(K1,NPTS)= ANG1
            ANGLE(K2,NPTS)= ANG2
            ANGLE(K3,NPTS)= 0.0D0
            DOMEGA(NPTS)=WTMP
   10      CONTINUE
   20     CONTINUE
   30    CONTINUE
C
C MESH OF DEGREE 9
C
        ELSE IF(LMAX.LE.9)THEN 
         NPTS=0
         ANG1=SQRT(0.1D0*(5.0D0+SQRT(5.0D0)))
         ANG2=SQRT(0.1D0*(5.0D0-SQRT(5.0D0)))
         WTMP=(5.0D0/42.0D0)*PI
         DO 140 IMESH=1,2
          DO 130 ISW=1,3
           K1= 1+MOD(ISW-1,3)
           K2= 1+MOD(ISW  ,3)
           K3= 1+MOD(ISW+1,3)
           DO 120 I1=1,2
            ANG1= -ANG1
            DO 110 I2=1,2
             NPTS=NPTS+1
             ANG2= -ANG2
             ANGLE(K1,NPTS)= ANG1
             ANGLE(K2,NPTS)= ANG2
             ANGLE(K3,NPTS)= 0.0D0
             DOMEGA(NPTS)=WTMP
  110       CONTINUE
  120      CONTINUE
  130     CONTINUE
          ANG1=SQRT((3.0D0-SQRT(5.0D0))/6.0D0)
          ANG2=SQRT((3.0D0+SQRT(5.0D0))/6.0D0)
          WTMP=(9.0D0/70.0D0)*PI
  140    CONTINUE
C
         XTMP=1.0D0/SQRT(3.0D0)
         SIGNX=XTMP
         SIGNY=XTMP
         SIGNZ=XTMP
         DO 190 IX=1,2
          SIGNX= -SIGNX
          DO 180 IY=1,2
           SIGNY= -SIGNY
           DO 170 IZ=1,2
            NPTS=NPTS+1
            SIGNZ= -SIGNZ
            ANGLE(1,NPTS)=SIGNX
            ANGLE(2,NPTS)=SIGNY
            ANGLE(3,NPTS)=SIGNZ
            DOMEGA(NPTS)=WTMP
  170      CONTINUE
  180     CONTINUE
  190    CONTINUE
C
C MESH OF DEGREE 14
C
        ELSE IF(LMAX.LE.14)THEN 
         NPTS=0
         X1=0.52573111211913360D0
         X2=0.85065080835203990D0
         X3=0.0D0
         WTMP=(25.0D0/504.0D0)*PI
         DO 230 J=1,2
          X1= -X1
          DO 220 K=1,2
           X2= -X2
           DO 210 L=1,3
            XT=X1
            X1=X3
            X3=X2
            X2=XT
            NPTS=NPTS+1
            ANGLE(1,NPTS)=X1
            ANGLE(2,NPTS)=X2
            ANGLE(3,NPTS)=X3
            DOMEGA (NPTS)=WTMP
  210      CONTINUE
  220     CONTINUE
  230    CONTINUE
C
         WTMP=(143.0D0/2520.0D0)*PI
         DO 260 N=1,5
          X1=XS14(1,N)
          X2=XS14(2,N)
          X3=XS14(3,N)
          DO 250 I=1,3
           XT= X1
           X1= X3
           X3= -X2
           X2= -XT
           DO 240 J=1,3
            XT=X1
            X1=X3
            X3=X2
            X2=XT
            NPTS=NPTS+1
            ANGLE(1,NPTS)=X1
            ANGLE(2,NPTS)=X2
            ANGLE(3,NPTS)=X3
            DOMEGA (NPTS)=WTMP
  240      CONTINUE
           X2= -X2
           X3= -X3
           NPTS=NPTS+1
           ANGLE(1,NPTS)=X1
           ANGLE(2,NPTS)=X2
           ANGLE(3,NPTS)=X3
           DOMEGA (NPTS)=WTMP
  250     CONTINUE
  260    CONTINUE
        ELSE
         NPTS=0
        END IF
        RETURN
       END
C
C *************************************************************
C
       SUBROUTINE LEBEDEV(MAXPTS,LMAX,NPTS,ANGLE,WEIGHT)
C
C (Dirk Porezag, October 1994)
C Calculation of Lebedev points out of data in cited 
C publications. Current version supports polynomials
C of maximum degree 3,5,7,9,11,15,17,19,23,29
C
C see: Zh.vychisl.Mat.mat.Fiz. 15,1, 48- 54 (1975)
C      Zh.vychisl.Mat.mat.Fiz. 16,2,293-306 (1976)
C  
C BUT: Beware of bugs contained in scientific papers !
C      (especially in papers written by mathematicians)
C
C All meshes integrate a constant function to constant*4*PI.
C
        IMPLICIT REAL*8 (A-H,O-Z)
        PARAMETER(RT2RC= 0.70710678118654752440D0)
        PARAMETER(RT3RC= 0.57735026918962576451D0)
        DIMENSION ANGLE(3,MAXPTS),WEIGHT(MAXPTS)
        DIMENSION AL(15), AM(15), B(15)
        DIMENSION AP(6),  AQ(6),  C(6)
        DIMENSION AR(20), AU(20), AW(20), D(20)
        DIMENSION SIGN(3)
        SAVE
        DATA MXLSTOR /59/
C
C obvious check
C
        IF (MAXPTS .LT. 1) THEN
         PRINT *,'LEBEDEV: MAXPTS MUST BE > 0'
         STOP
        END IF
C
C for negative LMAX, return degree of largest mesh stored
C
        IF (LMAX .LT. 0) THEN
         LMAX= MXLSTOR
         RETURN
C
C setup for mesh of degree 3
C        
        ELSE IF (LMAX .LE. 3) THEN
         LMAX= 3
         N1= 1
         N2= 0
         N3= 0
         N4= 0
         N5= 0
         N6= 0
         A1= 2.09439510239319549229D0
C
C setup for mesh of degree 5
C
        ELSE IF (LMAX .LE. 5) THEN
         LMAX= 5
         N1= 1
         N2= 0
         N3= 1
         N4= 0
         N5= 0
         N6= 0
         A1= 0.83775804095727819689D0
         A3= 0.94247779607693797153D0
C
C setup for mesh of degree 7
C
        ELSE IF (LMAX .LE. 7) THEN
         LMAX= 7
         N1= 1
         N2= 1
         N3= 1
         N4= 0
         N5= 0
         N6= 0
         A1= 0.59839860068377014065D0
         A2= 0.47871888054701611251D0
         A3= 0.40391905546154484491D0
C
C setup for mesh of degree 9
C
        ELSE IF (LMAX .LE. 9) THEN
         LMAX= 9
         N1= 1
         N2= 0
         N3= 1
         N4= 0
         N5= 1
         N6= 0
         A1=    0.11967972013675402810D0
         A3=    0.40391905546154484491D0
         C(1)=  0.35903916041026208437D0
         AP(1)= 0.88807383397711526215D0
         AQ(1)= 0.45970084338098306099D0
C
C setup for mesh of degree 11
C
        ELSE IF (LMAX .LE. 11) THEN
         LMAX= 11
         N1= 1
         N2= 1
         N3= 1
         N4= 1
         N5= 0
         N6= 0
         A1=    0.15957296018233870414D0
         A2=    0.28368526254637991850D0
         A3=    0.26507188014663880449D0
         B(1)=  0.25350561089731130290D0 
         AL(1)= 0.30151134457776362264D0
         AM(1)= 0.90453403373329086794D0
C
C setup for mesh of degree 15
C
        ELSE IF (LMAX .LE. 15) THEN
         LMAX= 15
         N1= 1
         N2= 0
         N3= 1
         N4= 2
         N5= 1
         N6= 0
         A1=    0.14506632743848973104D0
         A3=    0.15009158815708191827D0
         B(1)=  0.13961936079092709662D0 
         AL(1)= 0.36960284645415024830D0
         AM(1)= 0.85251831170126760535D0
         B(2)=  0.14924451686907021851D0
         AL(2)= 0.69435400660266635545D0
         AM(2)= 0.18906355288539548258D0
         C(1)=  0.14843778669298515265D0
         AP(1)= 0.92733065715117246567D0
         AQ(1)= 0.37424303909034116751D0
C
C setup for mesh of degree 17
C
        ELSE IF (LMAX .LE. 17) THEN
         LMAX= 17
         N1= 1
         N2= 0
         N3= 1
         N4= 3
         N5= 1
         N6= 0
         A1=    0.04810746585139659452D0
         A3=    0.12307173528167018112D0
         B(1)=  0.10319173408832901713D0 
         AL(1)= 0.18511563534473693940D0
         AM(1)= 0.96512403508659381018D0
         B(2)=  0.12058024902852784828D0
         AL(2)= 0.39568947305594172200D0
         AM(2)= 0.82876998125259238904D0
         B(3)=  0.12494509687251333343D0
         AL(3)= 0.69042104838229218053D0
         AM(3)= 0.21595729184584881712D0
         C(1)=  0.12183091738552137573D0
         AP(1)= 0.87815891060406613344D0
         AQ(1)= 0.47836902881215019668D0
C
C setup for mesh of degree 19
C
        ELSE IF (LMAX .LE. 19) THEN
         LMAX= 19
         N1= 1
         N2= 1
         N3= 1
         N4= 3
         N5= 0
         N6= 1
         A1=    0.00753519001311713812D0 
         A2=    0.09265184700375432421D0
         A3=    0.09061000833610514010D0 
         B(1)=  0.09518264418191036893D0 
         AL(1)= 0.15746766720390817632D0 
         AM(1)= 0.97488864367717323548D0 
         B(2)=  0.08487112439121475736D0 
         AL(2)= 0.41749612279654533594D0 
         AM(2)= 0.80708981835958250163D0 
         B(3)=  0.08942676055004592969D0 
         AL(3)= 0.67644104001142636987D0 
         AM(3)= 0.29129888220952674629D0 
         D(1)=  0.08785259467896816188D0 
         AR(1)= 0.14035538117131832857D0
         AU(1)= 0.44933283232695573488D0 
         AW(1)= 0.88227001126032263192D0 
C
C setup for mesh of degree 23
C
        ELSE IF (LMAX .LE. 23) THEN
         LMAX= 23
         N1=  1
         N2=  1
         N3=  1
         N4=  4
         N5=  1
         N6=  1
         A1=     0.22397550621038467401D-01
         A2=     0.71840758934847365198D-01
         A3=     0.70037198601248495656D-01
         B ( 1)= 0.70481054168070127419D-01
         AL( 1)= 0.67129734426952262802D+00
         AM( 1)= 0.31419699418258607923D+00
         B ( 2)= 0.69350927593710995243D-01
         AL( 2)= 0.44469331787174373110D+00
         AM( 2)= 0.77749321931476712721D+00
         B ( 3)= 0.64820326803510466591D-01
         AL( 3)= 0.28924656275754385571D+00
         AM( 3)= 0.91250909686747369299D+00
         B ( 4)= 0.51607282166513167352D-01
         AL( 4)= 0.12993354476500668622D+00
         AM( 4)= 0.98297230270725329686D+00
         C ( 1)= 0.63483369934641560935D-01
         AP( 1)= 0.34577021976112827086D+00
         AQ( 1)= 0.93831921813759152091D+00
         D ( 1)= 0.69495157471043212101D-01
         AR( 1)= 0.83603601548245888594D+00
         AU( 1)= 0.52511857244364202491D+00
         AW( 1)= 0.15904171053835295242D+00
C
C setup for mesh of degree 29
C
        ELSE IF (LMAX .LE. 29) THEN
         LMAX= 29
         N1=  1
         N2=  0
         N3=  1
         N4=  6
         N5=  2
         N6=  2
         A1=     0.10739109397555786646D-01
         A3=     0.45227866820918737724D-01
         B ( 1)= 0.45867828378660355949D-01
         AL( 1)= 0.70117664160895448526D+00
         AM( 1)= 0.12923867271051492534D+00
         B ( 2)= 0.45299536808460590994D-01
         AL( 2)= 0.65663294102196117605D+00
         AM( 2)= 0.37103417838482118941D+00
         B ( 3)= 0.44946510516838672585D-01
         AL( 3)= 0.47290541325810045938D+00
         AM( 3)= 0.74345204298755575113D+00
         B ( 4)= 0.43351319880953886073D-01
         AL( 4)= 0.35156403455701051253D+00
         AM( 4)= 0.86764362454408332747D+00
         B ( 5)= 0.39068257158919405351D-01
         AL( 5)= 0.22196452362941784218D+00
         AM( 5)= 0.94945431722644308421D+00
         B ( 6)= 0.29557378086976183792D-01
         AL( 6)= 0.96183085226147838019D-01
         AM( 6)= 0.99070562137940812382D+00
         C ( 1)= 0.45249250350174329750D-01
         AP( 1)= 0.57189558918789606986D+00
         AQ( 1)= 0.82032641982775930333D+00
         C ( 2)= 0.37477252107084245808D-01
         AP( 2)= 0.26441528870606625162D+00
         AQ( 2)= 0.96440891487920601499D+00
         D ( 1)= 0.42629052407721507459D-01
         AR( 1)= 0.90244252953300040110D+00
         AU( 1)= 0.41277240831685309600D+00
         AW( 1)= 0.12335485325833274217D+00
         D ( 2)= 0.44881302269213164311D-01
         AR( 2)= 0.80007274940739517269D+00
         AU( 2)= 0.54486773725807738027D+00
         AW( 2)= 0.25100347517704650690D+00
C
C setup for mesh of degree 35
C
        ELSE IF (LMAX .LE. 35) THEN
         LMAX= 35
         N1=  1
         N2=  1
         N3=  1
         N4=  7
         N5=  2
         N6=  4
         A1=     0.66173225486109229441D-02
         A2=     0.32021876575096717296D-01
         A3=     0.31570711787150796660D-01
         B ( 1)= 0.31797991969690962444D-01
         AL( 1)= 0.69093463075091105937D+00
         AM( 1)= 0.21264682470755207352D+00
         B ( 2)= 0.31582646768896337659D-01
         AL( 2)= 0.64566647074242561446D+00
         AM( 2)= 0.40771266489776951248D+00
         B ( 3)= 0.31437605641421410109D-01
         AL( 3)= 0.49143426377847464583D+00
         AM( 3)= 0.71901650104084343291D+00
         B ( 4)= 0.30729468903784315017D-01
         AL( 4)= 0.39272597633680021680D+00
         AM( 4)= 0.83158440041923229450D+00
         B ( 5)= 0.28936516045220792699D-01
         AL( 5)= 0.28612890103076384347D+00
         AM( 5)= 0.91447280112087242937D+00
         B ( 6)= 0.25312176697590758550D-01
         AL( 6)= 0.17748360546091578212D+00
         AM( 6)= 0.96798715879147279684D+00
         B ( 7)= 0.18378262002835508080D-01
         AL( 7)= 0.75680843671780184176D-01
         AM( 7)= 0.99425591263127781236D+00
         C ( 1)= 0.30378476831136317416D-01
         AP( 1)= 0.47159869115131592297D+00
         AQ( 1)= 0.88181328777942881290D+00
         C ( 2)= 0.24013722037852858252D-01
         AP( 2)= 0.21027252285730695636D+00
         AQ( 2)= 0.97764281111826487136D+00
         D ( 1)= 0.28106042036613862240D-01
         AR( 1)= 0.93718098585537223579D+00
         AU( 1)= 0.33443631453434549144D+00
         AW( 1)= 0.99217696364292372686D-01
         D ( 2)= 0.30372038685964669825D-01
         AR( 2)= 0.86894603228724119795D+00
         AU( 2)= 0.45023303825826253790D+00
         AW( 2)= 0.20548236964030437083D+00
         D ( 3)= 0.31569699385496824182D-01
         AR( 3)= 0.79992785438572857049D+00
         AU( 3)= 0.59051570489252710860D+00
         AW( 3)= 0.10680182607580482781D+00
         D ( 4)= 0.31373754481650439376D-01
         AR( 4)= 0.77174626269159008813D+00
         AU( 4)= 0.55501523610768071612D+00
         AW( 4)= 0.31042840351665414682D+00
C
C setup for mesh of degree 41
C
        ELSE IF (LMAX .LE. 41) THEN
         LMAX= 41
         N1=  1
         N2=  0
         N3=  1
         N4=  9
         N5=  3
         N6=  6
         A1=     0.38894441293212972612D-02
         A3=     0.23277689811090987735D-01
         B ( 1)= 0.23521614885652409828D-01
         AL( 1)= 0.70409549382274690877D+00
         AM( 1)= 0.92190407076898946077D-01
         B ( 2)= 0.23358527851253066478D-01
         AL( 2)= 0.68077440664552429168D+00
         AM( 2)= 0.27035608835916505445D+00
         B ( 3)= 0.23273280644847582616D-01
         AL( 3)= 0.63725469392587523882D+00
         AM( 3)= 0.43337386877715427847D+00
         B ( 4)= 0.23206517124447168234D-01
         AL( 4)= 0.50444197078003583196D+00
         AM( 4)= 0.70076857537357292076D+00
         B ( 5)= 0.22851590316146090363D-01
         AL( 5)= 0.42157617840109665440D+00
         AM( 5)= 0.80283687733527378954D+00
         B ( 6)= 0.21985677897179272558D-01
         AL( 6)= 0.33179207364721230623D+00
         AM( 6)= 0.88307872793413254664D+00
         B ( 7)= 0.20322468354886610911D-01
         AL( 7)= 0.23847367014218874469D+00
         AM( 7)= 0.94141415822040254295D+00
         B ( 8)= 0.17401121296649277909D-01
         AL( 8)= 0.14590364491577632467D+00
         AM( 8)= 0.97848058376269383943D+00
         B ( 9)= 0.12270220422136898258D-01
         AL( 9)= 0.60950341155071959044D-01
         AM( 9)= 0.99627812975401637229D+00
         C ( 1)= 0.23337775889269887229D-01
         AP( 1)= 0.61168434420098755161D+00
         AQ( 1)= 0.79110192962690198879D+00
         C ( 2)= 0.21427597073266092730D-01
         AP( 2)= 0.39647553481998576004D+00
         AQ( 2)= 0.91804528771145394903D+00
         C ( 3)= 0.16340324222732409160D-01
         AP( 3)= 0.17247820099077235168D+00
         AQ( 3)= 0.98501333502800191043D+00
         D ( 1)= 0.19543390524777295541D-01
         AR( 1)= 0.95710207431007257855D+00
         AU( 1)= 0.27786731905862442871D+00
         AW( 1)= 0.82130215819325113926D-01
         D ( 2)= 0.21537559233923486113D-01
         AR( 2)= 0.90921347509237360726D+00
         AU( 2)= 0.37910354076955632815D+00
         AW( 2)= 0.17207952256568781238D+00
         D ( 3)= 0.22647604818254634625D-01
         AR( 3)= 0.85937985589072122655D+00
         AU( 3)= 0.50335642710751172180D+00
         AW( 3)= 0.89992058420748749274D-01
         D ( 4)= 0.22652880260672822962D-01
         AR( 4)= 0.84004748835905042942D+00
         AU( 4)= 0.47423928425519802428D+00
         AW( 4)= 0.26347166559379496318D+00
         D ( 5)= 0.23245656396302771010D-01
         AR( 5)= 0.78032074247992032728D+00
         AU( 5)= 0.59841264978853796255D+00
         AW( 5)= 0.18166408403602094613D+00
         D ( 6)= 0.23158143091304716371D-01
         AR( 6)= 0.74931061190411593202D+00
         AU( 6)= 0.56102638086220601899D+00
         AW( 6)= 0.35182809277335189975D+00
C
C setup for mesh of degree 47
C
        ELSE IF (LMAX .LE. 47) THEN
         LMAX= 47
         N1=  1
         N2=  1
         N3=  1
         N4= 10
         N5=  3
         N6=  9
         A1=     0.27557323015911473712D-02
         A2=     0.18050757198156134228D-01
         A3=     0.17868629358434133176D-01
         B ( 1)= 0.17989438648499833278D-01
         AL( 1)= 0.69797926853368806944D+00
         AM( 1)= 0.16015580349882897461D+00
         B ( 2)= 0.17894467464560652463D-01
         AL( 2)= 0.67168833320226118889D+00
         AM( 2)= 0.31252130500165312527D+00
         B ( 3)= 0.17861546920738306384D-01
         AL( 3)= 0.63064012191668026481D+00
         AM( 3)= 0.45231192031365844144D+00
         B ( 4)= 0.17827225922558872776D-01
         AL( 4)= 0.51406196272497353889D+00
         AM( 4)= 0.68664444726415419529D+00
         B ( 5)= 0.17630474775329423015D-01
         AL( 5)= 0.44282648867134686248D+00
         AM( 5)= 0.77962131952763517133D+00
         B ( 6)= 0.17164046568628012899D-01
         AL( 6)= 0.36567190789780264755D+00
         AM( 6)= 0.85590192869788643527D+00
         B ( 7)= 0.16293551138179478320D-01
         AL( 7)= 0.28477451564642939418D+00
         AM( 7)= 0.91531795048315483166D+00
         B ( 8)= 0.14830929034450437324D-01
         AL( 8)= 0.20268908144087861021D+00
         AM( 8)= 0.95803667598339143974D+00
         B ( 9)= 0.12457274706913859414D-01
         AL( 9)= 0.12281987901788307391D+00
         AM( 9)= 0.98479975357230117968D+00
         B (10)= 0.85427739522049235001D-02
         AL(10)= 0.50872044105023604786D-01
         AM(10)= 0.99740867765282304376D+00
         C ( 1)= 0.17522117959278583845D-01
         AP( 1)= 0.53358046512635062522D+00
         AQ( 1)= 0.84574930519365330678D+00
         C ( 2)= 0.15710979134736977217D-01
         AP( 2)= 0.33902634754112157028D+00
         AQ( 2)= 0.94077687879375875539D+00
         C ( 3)= 0.11629423906138961478D-01
         AP( 3)= 0.14468656741953093477D+00
         AQ( 3)= 0.98947753749559849693D+00
         D ( 1)= 0.14163419279047748452D-01
         AR( 1)= 0.96938586349843208057D+00
         AU( 1)= 0.23551878942423264175D+00
         AW( 1)= 0.69440243933494130186D-01
         D ( 2)= 0.15852769844658260865D-01
         AR( 2)= 0.93441482705240216520D+00
         AU( 2)= 0.32452843457173944357D+00
         AW( 2)= 0.14679995278965719701D+00
         D ( 3)= 0.16818411775081184136D-01
         AR( 3)= 0.89728533613283339650D+00
         AU( 3)= 0.43465755161411627892D+00
         AW( 3)= 0.77148158667657320415D-01
         D ( 4)= 0.16911240515271184636D-01
         AR( 4)= 0.88331036052211271910D+00
         AU( 4)= 0.41021824740457302250D+00
         AW( 4)= 0.22690041095294598581D+00
         D ( 5)= 0.17499263032611505055D-01
         AR( 5)= 0.83806413345831249789D+00
         AU( 5)= 0.52244821896966296742D+00
         AW( 5)= 0.15715077698247271056D+00
         D ( 6)= 0.17513761565940366327D-01
         AR( 6)= 0.81560922320397542205D+00
         AU( 6)= 0.49088265890376162155D+00
         AW( 6)= 0.30629366662107302083D+00
         D ( 7)= 0.17906541331789098003D-01
         AR( 7)= 0.77934810570266097389D+00
         AU( 7)= 0.62143024174816045808D+00
         AW( 7)= 0.80255746077753389049D-01
         D ( 8)= 0.17828685057660695920D-01
         AR( 8)= 0.76284062460466982641D+00
         AU( 8)= 0.60175466340895580846D+00
         AW( 8)= 0.23657029931572456308D+00
         D ( 9)= 0.17792909600669949681D-01
         AR( 9)= 0.73130079365976570195D+00
         AU( 9)= 0.56487681490995004665D+00
         AW( 9)= 0.38224773795247870005D+00
C
C setup for mesh of degree 53
C
        ELSE IF (LMAX .LE. 53) THEN
         LMAX= 53
         N1=  1
         N2=  0
         N3=  1
         N4= 12
         N5=  4
         N6= 12
         A1=     0.18074137850647474135D-02
         A3=     0.14146871801989691920D-01
         B ( 1)= 0.14262661433124560332D-01
         AL( 1)= 0.70529070074577602831D+00
         AM( 1)= 0.71624401449955661584D-01
         B ( 2)= 0.14203604477068843471D-01
         AL( 2)= 0.69104103984983007257D+00
         AM( 2)= 0.21195415185018464569D+00
         B ( 3)= 0.14151659382211826829D-01
         AL( 3)= 0.66379267445231699251D+00
         AM( 3)= 0.34461365423743822369D+00
         B ( 4)= 0.14140174390865203127D-01
         AL( 4)= 0.62531702446541989212D+00
         AM( 4)= 0.46685890569574328315D+00
         B ( 5)= 0.14121142155198054255D-01
         AL( 5)= 0.52145638884158605124D+00
         AM( 5)= 0.67540096910841430973D+00
         B ( 6)= 0.14003830134509662410D-01
         AL( 6)= 0.45908258741876236518D+00
         AM( 6)= 0.76058290531525149567D+00
         B ( 7)= 0.13732263488462472764D-01
         AL( 7)= 0.39165207498499834652D+00
         AM( 7)= 0.83259672370235187279D+00
         B ( 8)= 0.13236154168347762005D-01
         AL( 8)= 0.32065671239559573953D+00
         AM( 8)= 0.89126794264760605447D+00
         B ( 9)= 0.12426064370758435143D-01
         AL( 9)= 0.24776533796502568220D+00
         AM( 9)= 0.93660273040716318781D+00
         B (10)= 0.11170413684445653231D-01
         AL(10)= 0.17500248676230874456D+00
         AM(10)= 0.96889022043470740424D+00
         B (11)= 0.92463230688059752569D-02
         AL(11)= 0.10514268540864041837D+00
         AM(11)= 0.98888322435468554495D+00
         B (12)= 0.62178770521657890494D-02
         AL(12)= 0.42929635453413480114D-01
         AM(12)= 0.99815534502384650045D+00
         C ( 1)= 0.14191203422655606197D-01
         AP( 1)= 0.63345632411395668585D+00
         AQ( 1)= 0.77377844725737473681D+00
         C ( 2)= 0.13501685269873247857D-01
         AP( 2)= 0.46977538492076490709D+00
         AQ( 2)= 0.88278598070118171058D+00
         C ( 3)= 0.11880445529094636012D-01
         AP( 3)= 0.29407771144683870001D+00
         AQ( 3)= 0.95578151249654848857D+00
         C ( 4)= 0.85744970210195099657D-02
         AP( 4)= 0.12366867626579899460D+00
         AQ( 4)= 0.99232356543149019607D+00
         D ( 1)= 0.10602101746887667681D-01
         AR( 1)= 0.97737272284530999499D+00
         AU( 1)= 0.20291287527775228082D+00
         AW( 1)= 0.59740486141813418137D-01
         D ( 2)= 0.12021587439178333568D-01
         AR( 2)= 0.95102016937438995261D+00
         AU( 2)= 0.28176064224421343208D+00
         AW( 2)= 0.12716751914398195089D+00
         D ( 3)= 0.12849977455838549920D-01
         AR( 3)= 0.92261611073080902014D+00
         AU( 3)= 0.37983952168591566971D+00
         AW( 3)= 0.67092846007382549511D-01
         D ( 4)= 0.12973544233826978723D-01
         AR( 4)= 0.91211837840912148366D+00
         AU( 4)= 0.35896063295890957833D+00
         AW( 4)= 0.19795789389174069057D+00
         D ( 5)= 0.13512061888370465514D-01
         AR( 5)= 0.87705846186580268903D+00
         AU( 5)= 0.46026219424840539397D+00
         AW( 5)= 0.13757604084736364800D+00
         D ( 6)= 0.13580014917832878107D-01
         AR( 6)= 0.86014346160176196355D+00
         AU( 6)= 0.43315612917201573992D+00
         AW( 6)= 0.26931207404135124944D+00
         D ( 7)= 0.13935605720681876079D-01
         AR( 7)= 0.83101755241347422575D+00
         AU( 7)= 0.55175054214235204913D+00
         AW( 7)= 0.70577381832561722523D-01
         D ( 8)= 0.13914106100299168350D-01
         AR( 8)= 0.81874853628102180643D+00
         AU( 8)= 0.53486664381354764997D+00
         AW( 8)= 0.20873070611032739986D+00
         D ( 9)= 0.13930792413081064176D-01
         AR( 9)= 0.79494229996420851403D+00
         AU( 9)= 0.50306739996620357133D+00
         AW( 9)= 0.33910165263362857188D+00
         D (10)= 0.14159750357809334078D-01
         AR(10)= 0.76710218622055836015D+00
         AU(10)= 0.62561673585808141547D+00
         AW(10)= 0.14197864526019182573D+00
         D (11)= 0.14109403473412341859D-01
         AR(11)= 0.74762061083408579232D+00
         AU(11)= 0.60296191561591868558D+00
         AW(11)= 0.27838884778821546022D+00
         D (12)= 0.14096703837495784118D-01
         AR(12)= 0.71659184546702371883D+00
         AU(12)= 0.56749975460743734840D+00
         AW(12)= 0.40551221378728358860D+00
C
C setup for mesh of degree 59
C
        ELSE IF (LMAX .LE. 59) THEN
         LMAX= 59
         N1=  1
         N2=  1
         N3=  1
         N4= 13
         N5=  4
         N6= 16
         A1=     0.13888217504238347844D-02
         A2=     0.11567636617828052286D-01
         A3=     0.11477067075661126968D-01
         B ( 1)= 0.11545272921893315531D-01
         AL( 1)= 0.70126043301236307885D+00
         AM( 1)= 0.12832618665972300255D+00
         B ( 2)= 0.11501840416315928034D-01
         AL( 2)= 0.68417883090701434026D+00
         AM( 2)= 0.25258395570071777208D+00
         B ( 3)= 0.11473994785596702547D-01
         AL( 3)= 0.65697227118572905385D+00
         AM( 3)= 0.36983086645942596976D+00
         B ( 4)= 0.11471488049646437757D-01
         AL( 4)= 0.62094753324440192484D+00
         AM( 4)= 0.47838093807695215556D+00
         B ( 5)= 0.11460250090599007716D-01
         AL( 5)= 0.52731454528423365895D+00
         AM( 5)= 0.66624225373610444677D+00
         B ( 6)= 0.11386162518793453533D-01
         AL( 6)= 0.47189936271491265891D+00
         AM( 6)= 0.74472946963210647508D+00
         B ( 7)= 0.11218094911060898934D-01
         AL( 7)= 0.41214314614443092329D+00
         AM( 7)= 0.81257372229991569396D+00
         B ( 8)= 0.10916019799855002849D-01
         AL( 8)= 0.34911776009637644262D+00
         AM( 8)= 0.86961691518195406416D+00
         B ( 9)= 0.10432030319160769939D-01
         AL( 9)= 0.28398745322001745584D+00
         AM( 9)= 0.91580688620866833615D+00
         B (10)= 0.97016635502020732652D-02
         AL(10)= 0.21809288916606115775D+00
         AM(10)= 0.95124706748057853204D+00
         B (11)= 0.86271874387446700636D-02
         AL(11)= 0.15310778524699059743D+00
         AM(11)= 0.97627660639468505946D+00
         B (12)= 0.70421826929308134468D-02
         AL(12)= 0.91400604122622154946D-01
         AM(12)= 0.99161073972201380745D+00
         B (13)= 0.46375209293839920327D-02
         AL(13)= 0.37126364496570609984D-01
         AM(13)= 0.99862068179991924431D+00
         C ( 1)= 0.11348843483974560387D-01
         AP( 1)= 0.57003669117925032960D+00
         AQ( 1)= 0.82161923706143345721D+00
         C ( 2)= 0.10635212041756436743D-01
         AP( 2)= 0.41727529553067167590D+00
         AQ( 2)= 0.90878013168191051430D+00
         C ( 3)= 0.92125868536404152049D-02
         AP( 3)= 0.25820689594969680340D+00
         AQ( 3)= 0.96608964329611900074D+00
         C ( 4)= 0.65055815576856211221D-02
         AP( 4)= 0.10723822154781660666D+00
         AQ( 4)= 0.99423335482132231774D+00
         D ( 1)= 0.81502695765074639506D-02
         AR( 1)= 0.98279860182639466538D+00
         AU( 1)= 0.17717740226153253275D+00
         AW( 1)= 0.52106394770112841147D-01
         D ( 2)= 0.93431353956620955834D-02
         AR( 2)= 0.96242492303262280653D+00
         AU( 2)= 0.24757164634262876307D+00
         AW( 2)= 0.11156409571564866615D+00
         D ( 3)= 0.10051246585813851029D-01
         AR( 3)= 0.94020079941288109508D+00
         AU( 3)= 0.33546162890664885246D+00
         AW( 3)= 0.59058888532355084369D-01
         D ( 4)= 0.10180936061521023644D-01
         AR( 4)= 0.93208220401432023651D+00
         AU( 4)= 0.31736152466119767353D+00
         AW( 4)= 0.17465516775786260621D+00
         D ( 5)= 0.10660541746034316468D-01
         AR( 5)= 0.90436741993932990302D+00
         AU( 5)= 0.40902684270853571727D+00
         AW( 5)= 0.12172350510959869615D+00
         D ( 6)= 0.10752162755474637576D-01
         AR( 6)= 0.89124075600747469948D+00
         AU( 6)= 0.38542911506692236860D+00
         AW( 6)= 0.23902784793817239814D+00
         D ( 7)= 0.11062438286513448351D-01
         AR( 7)= 0.86764356284627078890D+00
         AU( 7)= 0.49322211848512846276D+00
         AW( 7)= 0.62662506241541694734D-01
         D ( 8)= 0.11072289696133737152D-01
         AR( 8)= 0.85819799860416194630D+00
         AU( 8)= 0.47853206759224351655D+00
         AW( 8)= 0.18575051945473351067D+00
         D ( 9)= 0.11121592794205998126D-01
         AR( 9)= 0.83967536240498562859D+00
         AU( 9)= 0.45074225931570644472D+00
         AW( 9)= 0.30294669735289819463D+00
         D (10)= 0.11336553076873988928D-01
         AR(10)= 0.81652885640221882246D+00
         AU(10)= 0.56321230207620996800D+00
         AW(10)= 0.12677748006842826844D+00
         D (11)= 0.11322415128385550711D-01
         AR(11)= 0.80154693707835288497D+00
         AU(11)= 0.54343035696939004118D+00
         AW(11)= 0.24941121623622365429D+00
         D (12)= 0.11338250340383400399D-01
         AR(12)= 0.77735630690703512395D+00
         AU(12)= 0.51235184864198707541D+00
         AW(12)= 0.36498322605976535903D+00
         D (13)= 0.11508302534349396417D-01
         AR(13)= 0.76616212139003944228D+00
         AU(13)= 0.63942796347491022859D+00
         AW(13)= 0.64245492242205886340D-01
         D (14)= 0.11475079348200833148D-01
         AR(14)= 0.75535841435335098028D+00
         AU(14)= 0.62698055090243917368D+00
         AW(14)= 0.19060182227792370204D+00
         D (15)= 0.11445216092627289348D-01
         AR(15)= 0.73443057575595027194D+00
         AU(15)= 0.60311616930963099509D+00
         AW(15)= 0.31122759471496082046D+00
         D (16)= 0.11442635813972175907D-01
         AR(16)= 0.70438371840217646684D+00
         AU(16)= 0.56937024984684411187D+00
         AW(16)= 0.42386447815223402893D+00
C
C zero mesh
C
        ELSE
         LMAX= -1
         N1= 0
         N2= 0
         N3= 0
         N4= 0
         N5= 0
         N6= 0
        END IF 
C
C check number of points
C
        NPTS=6*N1+12*N2+8*N3+24*N4+24*N5+48*N6
        IF (NPTS.GT.MAXPTS) THEN
         PRINT *,'LEBEDEV: SIZE OF ARRAY ANGLE EXCEEDED',NPTS,MAXPTS
         CALL STOPIT
        END IF
        NPTS=0
C
C faces of the cube
C
        IF (N1.GT.0) THEN
         DO I= 1,3
          SIGN(1)= 1.0D0 
          DO J= 1,2
           NPTS= NPTS+1
           DO K= 1,3
            ANGLE(K,NPTS)= 0.0D0
           END DO
           ANGLE(I,NPTS)= SIGN(1)
           WEIGHT(NPTS)= A1
           SIGN(1)= -SIGN(1)
          END DO
         END DO
        END IF
C
C centres of the edges of the cube
C
        IF (N2.GT.0) THEN
         DO I= 1,3
          IND1= MOD(I,3)+1
          IND2= MOD(I+1,3)+1
          SIGN(1)= RT2RC 
          DO J= 1,2
           SIGN(2)= RT2RC
           DO K= 1,2
            NPTS= NPTS+1
            ANGLE(I,NPTS)= 0.0D0
            ANGLE(IND1,NPTS)= SIGN(1)
            ANGLE(IND2,NPTS)= SIGN(2)
            WEIGHT(NPTS)= A2
            SIGN(2)= -SIGN(2)
           END DO
           SIGN(1)= -SIGN(1)
          END DO
         END DO
        END IF
C
C corners of the cube
C
        IF (N3.GT.0) THEN
         SIGN(1)= RT3RC 
         DO I= 1,2
          SIGN(2)= RT3RC 
          DO J= 1,2
           SIGN(3)= RT3RC
           DO K= 1,2
            NPTS= NPTS+1 
            DO L= 1,3
             ANGLE(L,NPTS)= SIGN(L)
            END DO
            WEIGHT(NPTS)= A3
            SIGN(3)= -SIGN(3)
           END DO
           SIGN(2)= -SIGN(2)
          END DO
          SIGN(1)= -SIGN(1)
         END DO
        END IF
C
C b(i) coordinates (a,a,b)
C
        DO IGEN= 1,N4
         Z1= AM(IGEN)
         Z2= AL(IGEN)
         DS= B(IGEN)
         DO I= 1,3
          IND1= MOD(I,3)+1
          IND2= MOD(I+1,3)+1
          SIGN(I)= Z1
          DO J=1,2
           SIGN(IND1)= Z2
           DO K=1,2
            SIGN(IND2)= Z2
            DO L=1,2
             NPTS= NPTS+1
             DO M=1,3
              ANGLE(M,NPTS)= SIGN(M)
             END DO
             WEIGHT(NPTS)= DS
             SIGN(IND2)= -SIGN(IND2)
            END DO
            SIGN(IND1)= -SIGN(IND1)
           END DO
           SIGN(I)= -SIGN(I)
          END DO
         END DO
        END DO
C
C c(i) coordinates (a,b,0)
C
        DO IGEN= 1,N5
         Z1= AP(IGEN)
         Z2= AQ(IGEN)
         DS= C(IGEN)
         DO I= 1,3
          SIGN(I)= 0.0D0
          IND1= MOD(I,3)+1
          IND2= MOD(I+1,3)+1
          DO J= 1,2
           SIGN(IND1)= Z1
           DO K= 1,2
            SIGN(IND2)= Z2
            DO L= 1,2
             NPTS= NPTS+1
             DO M= 1,3
              ANGLE(M,NPTS)= SIGN(M)
             END DO
             WEIGHT(NPTS)= DS
             SIGN(IND2)= -SIGN(IND2)
            END DO
            SIGN(IND1)= -SIGN(IND1)
           END DO
           M= IND1
           IND1= IND2
           IND2= M
          END DO
         END DO
        END DO
C
C d(i) coordinates (a,b,c)
C
        DO IGEN= 1,N6
         Z1= AR(IGEN)
         Z2= AU(IGEN)
         Z3= AW(IGEN)
         DS= D(IGEN)
         DO I= 1,3
          SIGN(I)= Z1
          DO J=1,2
           IND1= MOD(I,3)+1
           IND2= MOD(I+1,3)+1
           DO K= 1,2
            SIGN(IND1)= Z2
            DO L= 1,2
             SIGN(IND2)= Z3
             DO M= 1,2
              NPTS= NPTS+1
              DO N= 1,3
               ANGLE(N,NPTS)= SIGN(N)
              END DO
              WEIGHT(NPTS)= DS
              SIGN(IND2)= -SIGN(IND2)
             END DO
             SIGN(IND1)= -SIGN(IND1)
            END DO
            M= IND1
            IND1= IND2
            IND2= M
           END DO
           SIGN(I)= -SIGN(I)
          END DO
         END DO
        END DO
C
C that's all, folks
C
        RETURN
       END
C
C **************************************************************** 
C
CP PREVENT MESHES WHICH ARE NOT OH-INVARIANT 
CP (EXCEPT L=12-14 AND IF BFSA IS NEEDED)
CP POREZAG (01/97)
C
       SUBROUTINE ANGMSH(MAXPTS,LMAX,NPTS,ANGLE,DOMEGA)
        IMPLICIT REAL*8 (A-H,O-Z)
        DIMENSION ANGLE(3,MAXPTS),DOMEGA(MAXPTS)
        DIMENSION LIST(3)
        SAVE
        DATA NLIST/3/
        DATA NMXLEB/29/
        DATA LIST /12,13,14/
C
        LMAX=MAX(LMAX,0)
        IF (LMAX.GT.NMXLEB) THEN
         CALL BFSA(MAXPTS,LMAX,NPTS,ANGLE,DOMEGA)
        ELSE 
         ICALL=0
         DO I=1,NLIST
          IF (LIST(I).EQ.LMAX) ICALL=1
         END DO
         IF (ICALL.EQ.0) THEN
          CALL LEBEDEV(MAXPTS,LMAX,NPTS,ANGLE,DOMEGA)
         ELSE
          CALL STROUD(MAXPTS,LMAX,NPTS,ANGLE,DOMEGA)
         END IF
        END IF
        RETURN
       END
C
